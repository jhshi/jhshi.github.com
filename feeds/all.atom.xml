<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Pearls in Life</title><link href="http://jhshi.me/" rel="alternate"></link><link href="http://jhshi.me/feeds/all.atom.xml" rel="self"></link><id>http://jhshi.me/</id><updated>2018-02-11T17:47:29-05:00</updated><entry><title>OpenGL over VNC</title><link href="http://jhshi.me/2018/02/11/opengl-over-vnc/index.html" rel="alternate"></link><updated>2018-02-11T17:47:29-05:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2018-02-11:2018/02/11/opengl-over-vnc/index.html</id><summary type="html">&lt;p&gt;I've been using SketchUp via VMWare Player for a while and the software just
hangs now and then even after &lt;a class="reference external" href="/2018/01/23/fix-vmware-player-3d-support-issue/"&gt;fixing the OpenGL support issue&lt;/a&gt;. I happen to have another
PC running Windows 7. But I ran into the OpenGL problem again while trying to
use remote desktop.&lt;/p&gt;

&lt;p&gt;The VNC software I use is &lt;a class="reference external" href="https://www.remmina.org/wp/"&gt;Remmina&lt;/a&gt;. After
&lt;a class="reference external" href="https://support.microsoft.com/en-us/help/17463/windows-7-connect-to-another-computer-remote-desktop-connection"&gt;enabling remote desktop&lt;/a&gt;
in my Windows 7 box, I tried to login using Remmina and open the SketchUp
application. It pops up the same &amp;quot;Hardware acceleration is unsupported&amp;quot; error
message.&lt;/p&gt;
&lt;p&gt;After Googling around, I found &lt;cite&gt;OpenGL does not play well over VNC
&amp;lt;https://en.wikipedia.org/wiki/VirtualGL&amp;gt;&lt;/cite&gt;. I first tried &lt;cite&gt;TeamViewer
&amp;lt;https://www.teamviewer.us/&amp;gt;&lt;/cite&gt;, which almost works but with one showstopper: the
mouse wheel down does not work. It is used a lot in SketchUp to span or rotate
viewpoints, and is something I can definitely not live without.&lt;/p&gt;
&lt;p&gt;Another route will be to add VirtualGL support to Remmina, which sounds a lot
hassle.&lt;/p&gt;
&lt;p&gt;Finally, I found that if I first physically login my Windows 7 machine and open
the SketchUp app, then login using Remmina from my Ubuntu machine, SketchUp
remains open and will happily run without any problem. For now I can live with
it: just physically open the SketchUp app once and remember do not close it.&lt;/p&gt;
&lt;p&gt;If for some reason you do not have physical access to the Windows machine, your
next best bet would be TeamViewer.&lt;/p&gt;
</summary><category term="SketchUp"></category><category term="Remmina"></category><category term="OpenGL"></category><category term="VNC"></category></entry><entry><title>Fix VMWare Player 3D Support Issue</title><link href="http://jhshi.me/2018/01/23/fix-vmware-player-3d-support-issue/index.html" rel="alternate"></link><updated>2018-01-23T20:39:49-05:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2018-01-23:2018/01/23/fix-vmware-player-3d-support-issue/index.html</id><summary type="html">&lt;p&gt;I recently installed a Windows 10 guest OS on my Ubuntu 16.04 host machine using
&lt;a class="reference external" href="https://my.vmware.com/web/vmware/free#desktop_end_user_computing/vmware_workstation_player/12_0"&gt;VMWare Workstation 12 Player&lt;/a&gt;,
mainly to use the &lt;a class="reference external" href="https://www.sketchup.com/download/all"&gt;Sketchup Make 2017&lt;/a&gt;
software. Skeckup keeps complaining lack of OpenGL support. Here's how to fix
it.&lt;/p&gt;

&lt;p&gt;Here are the two error messages that VMWare Player shows when starting the guest PC.&lt;/p&gt;
&lt;blockquote&gt;
No 3D support is available from the host.&lt;/blockquote&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;blockquote&gt;
Hardware graphics acceleration is not available.&lt;/blockquote&gt;
&lt;img alt="VMWare Player error message." class="align-center" src="/images/vmware_message.png" /&gt;
&lt;p&gt;And when I try to open SkechUp inside Windows, it complains about lack of
hardware acceleration support as well:&lt;/p&gt;
&lt;img alt="SkechUp error message." class="align-center" src="/images/skechup_message.png" /&gt;
&lt;p&gt;First, I made sure my host OS (Ubuntu) does have hardware graphics support:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get install mesa-utils
&lt;span class="nv"&gt;$ &lt;/span&gt;glxinfo &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s2"&gt;&amp;quot;direct&amp;quot;&lt;/span&gt;
direct rendering: Yes
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Make sure you see the &amp;quot;direct rendering: Yes&amp;quot; line.&lt;/p&gt;
&lt;p&gt;Next, edit &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;$HOME/.vmware/preferences&lt;/span&gt;&lt;/tt&gt; and either add or edit this line:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;mks.gl.allowBlacklistedDrivers &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;TRUE&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;This just tells VmWare Player not to be too picky on the hardware drivers
(apparently the driver on Ubuntu was blacklisted for some reason).&lt;/p&gt;
&lt;p&gt;Of course don't forget to enable 3D graphics acceleration in VMWare settings.&lt;/p&gt;
&lt;img alt="Enable 3D acceleration in VMWare Player settings." class="align-center" src="/images/vmware_settings.png" style="width: 80%;" /&gt;
&lt;p&gt;Then close the VMWare Player, relaunch it and boot up the guest OS. Now it
should not complain about hardware acceleration support and SkechUp should just run fine.&lt;/p&gt;
&lt;p&gt;Thanks to:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://askubuntu.com/questions/832755/no-3d-support-is-available-from-the-host-on-all-vmware-guests"&gt;https://askubuntu.com/questions/832755/no-3d-support-is-available-from-the-host-on-all-vmware-guests&lt;/a&gt;
&lt;a class="reference external" href="https://www.dizwell.com/wordpress/technical-articles/linux/enable-3d-graphics-for-vmware-guests/"&gt;https://www.dizwell.com/wordpress/technical-articles/linux/enable-3d-graphics-for-vmware-guests/&lt;/a&gt;&lt;/p&gt;
</summary><category term="vmware player"></category><category term="3d"></category><category term="opengl"></category></entry><entry><title>Google DNS Configuration on Ubuntu 16.04</title><link href="http://jhshi.me/2017/09/29/google-dns-configuration-on-ubuntu-1604/index.html" rel="alternate"></link><updated>2017-09-29T21:03:55-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2017-09-29:2017/09/29/google-dns-configuration-on-ubuntu-1604/index.html</id><summary type="html">&lt;p&gt;I recently experienced unstable DNS on my Ubuntu laptop. Here is how to
configure the DNS settings so it always use the Google DNS servers first.&lt;/p&gt;

&lt;p&gt;The DNS settings was obtained as part of DHCP response. We need to configure the
DHCP client on the laptop to prepend our custom DNS servers.&lt;/p&gt;
&lt;p&gt;Edit &lt;tt class="docutils literal"&gt;/etc/dhcp/dhclient.conf&lt;/tt&gt; and find this line:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# prepend domain-name-servers&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Uncomment it and configure Google DNS accordingly.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;prepend domain-name-servers 8.8.8.8, 8.8.4.4&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Note there is a &lt;tt class="docutils literal"&gt;;&lt;/tt&gt; at the end of line.&lt;/p&gt;
&lt;p&gt;Next, restart network manager.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo service network-manager restart
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The Google DNS should now be used first.&lt;/p&gt;
&lt;img alt="DNS settings." class="align-center" src="/images/dns.png" style="width: 80%;" /&gt;
</summary><category term="dns"></category><category term="dhcp"></category></entry><entry><title>Fix Touchpad Natual Scrolling of Ubuntu 16.04 on Thinkpad X1</title><link href="http://jhshi.me/2017/09/21/fix-touchpad-natual-scrolling-of-ubuntu-1604-on-thinkpad-x1/index.html" rel="alternate"></link><updated>2017-09-21T15:47:09-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2017-09-21:2017/09/21/fix-touchpad-natual-scrolling-of-ubuntu-1604-on-thinkpad-x1/index.html</id><summary type="html">&lt;p&gt;I recently installed Ubuntu 16.04.3 on my Thinkpad X1 Carbon 3rd Gen laptop.
However, there is no &amp;quot;Natural Scrolling&amp;quot; option for the touch pad. Here is how to
fix it.&lt;/p&gt;

&lt;p&gt;Use this command to enable Natural Scrolling.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gsettings &lt;span class="nb"&gt;set &lt;/span&gt;org.gnome.desktop.peripherals.touchpad natural-scroll &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Here is the mouse settings: there's no natural scrolling option!&lt;/p&gt;
&lt;img alt="Screenshot of mouse settings window." class="align-center" src="/images/ubuntu16.04_mouse_settings.png" style="width: 80%;" /&gt;
</summary><category term="touchpad"></category><category term="natural scrolling"></category><category term="ubuntu 16.04"></category></entry><entry><title>Backing Up Files Using Amazon Glacier</title><link href="http://jhshi.me/2017/03/06/backing-up-files-using-amazon-glacier/index.html" rel="alternate"></link><updated>2017-03-06T16:32:53-05:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2017-03-06:2017/03/06/backing-up-files-using-amazon-glacier/index.html</id><summary type="html">&lt;p&gt;Amazon Glacier is a cheap massive cloud storage solution that is mostly suitable
for storing cold data - data that are rarely accessed. The price is fair:
$4/TB/month. However, it's not like Dropbox or Googld Drive that has nice client
programs that you can simply drag and drop the files to be stored. Instead,
you'll have to work with their APIs to upload you files. In this post, I'll
explain the basics about how to upload the files and also how to query the
inventory.&lt;/p&gt;

&lt;div class="section" id="basic-apis"&gt;
&lt;h2&gt;Basic APIs&lt;/h2&gt;
&lt;p&gt;I use the &lt;a class="reference external" href="https://boto3.readthedocs.io/en/latest/index.html"&gt;boto3&lt;/a&gt; API in
Python. The documentation for Glacier can be found in &lt;a class="reference external" href="https://boto3.readthedocs.io/en/latest/reference/services/glacier.html"&gt;here&lt;/a&gt;. I'll
use the &lt;tt class="docutils literal"&gt;Client&lt;/tt&gt; APIs, which simply wrap the underlying HTTP requests. In
particular, these are the APIs we'll be using for basic upload and query.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://boto3.readthedocs.io/en/latest/reference/services/glacier.html#Glacier.Client.upload_archive"&gt;upload_archive&lt;/a&gt;: upload files.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://boto3.readthedocs.io/en/latest/reference/services/glacier.html#Glacier.Client.delete_archive"&gt;delete_archive&lt;/a&gt;: delete files. Note that files on Glacier is not mutable. To update a file, you'll have to delete the old one and then upload the new one.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://boto3.readthedocs.io/en/latest/reference/services/glacier.html#Glacier.Client.initiate_job"&gt;initiate_job&lt;/a&gt;:
to download files stored in Glacier or to query inventory.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://boto3.readthedocs.io/en/latest/reference/services/glacier.html#Glacier.Client.describe_job"&gt;describe_job&lt;/a&gt;:
to query job status. This is asynchronous to &lt;tt class="docutils literal"&gt;initiate_job&lt;/tt&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="upload-files"&gt;
&lt;h2&gt;Upload Files&lt;/h2&gt;
&lt;p&gt;We'll use the &lt;tt class="docutils literal"&gt;upload_archive&lt;/tt&gt; API to upload a file. Things to note:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;You need a pair of access ID and key to use the API. Follow &lt;a class="reference external" href="https://boto3.readthedocs.io/en/latest/guide/quickstart.html#configuration"&gt;the guide&lt;/a&gt;
to set up &lt;tt class="docutils literal"&gt;boto3&lt;/tt&gt; correctly.&lt;/li&gt;
&lt;li&gt;You must create a &amp;quot;vault&amp;quot; before you can upload. You can do this in the
Glacier manage console.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To upload a file:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;boto3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;glacier&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upload_archive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vaultName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;myvault&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;archiveDescription&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;# persist the map between response[&amp;#39;archiveId&amp;#39;] and path somewhere&lt;/span&gt;
    &lt;span class="c"&gt;# locally&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Note that the &lt;tt class="docutils literal"&gt;archiveDescription&lt;/tt&gt; argument is optional, but we utilize it to
store the file's local path. This will help us bookkeeping later on. Inside
Glacier, the file is solely identified by the &lt;tt class="docutils literal"&gt;archiveId&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;It is advised to keep a local database of the files stored in Glacier, since the
inventory is only updated every 24 hrs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="update-inventory"&gt;
&lt;h2&gt;Update Inventory&lt;/h2&gt;
&lt;p&gt;Sometimes the local archive database may be out-of-sync with Glacier, in which
case a force-sync may be necessary. Basically we'll pull the inventory of
Glacier and re-build the local archive database from that.&lt;/p&gt;
&lt;p&gt;Warnings:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The Glacier inventory is only updated every 24 hrs. So files uploaded within
last 24 hrs may not be reflected in the inventory.&lt;/li&gt;
&lt;li&gt;The inventory query can take up to several hours to finish.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The main API we will use is &lt;tt class="docutils literal"&gt;initiate_job&lt;/tt&gt;, together with &lt;tt class="docutils literal"&gt;describe_job&lt;/tt&gt; to
query job status and &lt;tt class="docutils literal"&gt;get_job_output&lt;/tt&gt; to retrieve the results once the job is
finished. The same work flow can also be used to download a previously uploaded
archive using the archive ID. But here we'll only show how to query the
inventory.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;job&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;initiate_job&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vaultName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;myvault&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;jobParameters&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;inventory-retrieval&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;describe_job&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vaultName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;myvault&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;jobId&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;job_req&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;jobId&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Completed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;job_resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_job_output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vaultName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;myvault&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;jobId&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;job_req&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;jobId&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c"&gt;# first download the output and then parse the JSON&lt;/span&gt;
&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;job_resp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;body&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;archive_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ArchiveList&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c"&gt;# persist archive_list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
</summary><category term="glacier"></category><category term="backup"></category></entry><entry><title>Generating All-In-One LaTex File for Journal Submission</title><link href="http://jhshi.me/2017/03/02/generating-all-in-one-latex-file-for-journal-submission/index.html" rel="alternate"></link><updated>2017-03-02T14:13:07-05:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2017-03-02:2017/03/02/generating-all-in-one-latex-file-for-journal-submission/index.html</id><summary type="html">&lt;p&gt;Recently I need to submit to a journal that does NOT accept the final PDF but
requires all LaTex sources so that they can compile the PDF on their own. Given
that any LaTex projects with reasonable size would have multiple &lt;tt class="docutils literal"&gt;*.tex&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;*.bib&lt;/tt&gt; and figure files. It'll be nice to &lt;em&gt;flatten&lt;/em&gt; the LaTex project so that
we have as few as files to upload. Here is how.&lt;/p&gt;

&lt;div class="section" id="latexpand"&gt;
&lt;h2&gt;latexpand&lt;/h2&gt;
&lt;p&gt;There is a &lt;tt class="docutils literal"&gt;latexpand&lt;/tt&gt; &lt;a class="reference external" href="https://www.ctan.org/pkg/latexpand?lang=en"&gt;utility&lt;/a&gt;
that comes with the TexLive package in Ubuntu. It does almost exactly what we
need: &lt;em&gt;expand&lt;/em&gt; latex files. I used it as follows:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;latexpand --expand-bbl main.bbl main.tex -o all-in-one.tex
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--expand-bbl&lt;/span&gt;&lt;/tt&gt; option will replace the &lt;tt class="docutils literal"&gt;\bibliography&lt;/tt&gt; command with a
list of &lt;tt class="docutils literal"&gt;bibitem&lt;/tt&gt; so that the &lt;tt class="docutils literal"&gt;main.bib&lt;/tt&gt; does not need to be uploaded.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;all-in-one.tex&lt;/span&gt;&lt;/tt&gt; will be the ONLY LaTex file we need to upload.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="figures"&gt;
&lt;h2&gt;Figures&lt;/h2&gt;
&lt;p&gt;We still need to upload all the included figures. Often times we generate more
figures than we actually include in the final manuscript. We can get the list of
actually included figures using this command:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;grep &lt;span class="s2"&gt;&amp;quot;includegraphics&amp;quot;&lt;/span&gt; all-in-one.tex &lt;span class="p"&gt;|&lt;/span&gt; cut -d &lt;span class="se"&gt;\{&lt;/span&gt; -f &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; cut -d &lt;span class="se"&gt;\}&lt;/span&gt; -f 1
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;One caveat is that if all figures are put in a dedicated directory, e.g.,
&lt;tt class="docutils literal"&gt;./figures&lt;/tt&gt;, you'll have to use Latex's &lt;tt class="docutils literal"&gt;\graphicspath&lt;/tt&gt; command to specify
the path, and use only the file name in &lt;tt class="docutils literal"&gt;includegraphics&lt;/tt&gt;. In other words,
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;\includegraphics{./figures/abc.pdf}&lt;/span&gt;&lt;/tt&gt; will not work in the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;all-in-one.tex&lt;/span&gt;&lt;/tt&gt;
unless you create that directory structure in the submission site. So instead,
do this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;graphicx&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;% note the path must ends with &amp;quot;/&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;\graphicspath&lt;/span&gt;&lt;span class="nb"&gt;{{&lt;/span&gt;./figures/&lt;span class="nb"&gt;}}&lt;/span&gt;

&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;figure&lt;span class="nb"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;\includegraphics&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;abc.pdf&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;figure&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;With the above organization, this Makefile snippet will generate the
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;all-in-one.tex&lt;/span&gt;&lt;/tt&gt; file and also copy all included figures into a separate
directory (&lt;tt class="docutils literal"&gt;submitted&lt;/tt&gt;).&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;submit&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    @mkdir -p submitted
    @latexpand --expand-bbl main.bbl main.tex -o submitted/all-in-one.tex
    @&lt;span class="k"&gt;$(&lt;/span&gt;foreach fig, &lt;span class="k"&gt;$(&lt;/span&gt;shell grep &lt;span class="s2"&gt;&amp;quot;includegraphics&amp;quot;&lt;/span&gt; submitted/all-in-one.tex  &lt;span class="p"&gt;|&lt;/span&gt; cut -d &lt;span class="se"&gt;\{&lt;/span&gt; -f &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; cut -d &lt;span class="se"&gt;\}&lt;/span&gt; -f 1&lt;span class="k"&gt;)&lt;/span&gt;, /bin/cp -rfv ./figures/&lt;span class="k"&gt;$(&lt;/span&gt;fig&lt;span class="k"&gt;)&lt;/span&gt; submitted/&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;    # note the final semi-colon in the last command&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The files in &lt;tt class="docutils literal"&gt;submitted&lt;/tt&gt; directory is all the files you need to upload.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="latexpand"></category></entry><entry><title>ISE Error: version `GLIBCXX_3.4.9' not found</title><link href="http://jhshi.me/2016/11/07/ise-error-version-glibcxx_349-not-found/index.html" rel="alternate"></link><updated>2016-11-07T17:54:53-05:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2016-11-07:2016/11/07/ise-error-version-glibcxx_349-not-found/index.html</id><summary type="html">&lt;p&gt;I encountered this error while trying to run the Xilinx &lt;tt class="docutils literal"&gt;xlcm&lt;/tt&gt; tool for ISE
12.2. Here is how to fix it.&lt;/p&gt;

&lt;div class="section" id="the-error"&gt;
&lt;h2&gt;The Error&lt;/h2&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;xlcm&lt;/tt&gt; command runs fine until it tries to spawn a web page. Here is the
error message:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;/usr/bin/google-chrome-stable: /opt/Xilinx/12.2/ISE_DS/common//lib/lin64/libstdc++.so.6: version &lt;span class="sb"&gt;`&lt;/span&gt;GLIBCXX_3.4.9&lt;span class="s1"&gt;&amp;#39; not found (required by /usr/bin/google-chrome-stable)&lt;/span&gt;
&lt;span class="s1"&gt;/usr/bin/google-chrome-stable: /opt/Xilinx/12.2/ISE_DS/common//lib/lin64/libstdc++.so.6: version `CXXABI_1.3.5&amp;#39;&lt;/span&gt; not found &lt;span class="o"&gt;(&lt;/span&gt;required by /usr/bin/google-chrome-stable&lt;span class="o"&gt;)&lt;/span&gt;
/usr/bin/google-chrome-stable: /opt/Xilinx/12.2/ISE_DS/common//lib/lin64/libstdc++.so.6: version &lt;span class="sb"&gt;`&lt;/span&gt;GLIBCXX_3.4.10&lt;span class="s1"&gt;&amp;#39; not found (required by /usr/bin/google-chrome-stable)&lt;/span&gt;
&lt;span class="s1"&gt;/usr/bin/google-chrome-stable: /opt/Xilinx/12.2/ISE_DS/common//lib/lin64/libstdc++.so.6: version `GLIBCXX_3.4.15&amp;#39;&lt;/span&gt; not found &lt;span class="o"&gt;(&lt;/span&gt;required by /usr/bin/google-chrome-stable&lt;span class="o"&gt;)&lt;/span&gt;
/usr/bin/google-chrome-stable: /opt/Xilinx/12.2/ISE_DS/common//lib/lin64/libstdc++.so.6: version &lt;span class="sb"&gt;`&lt;/span&gt;GLIBCXX_3.4.11&lt;span class="s1"&gt;&amp;#39; not found (required by /usr/bin/google-chrome-stable)&lt;/span&gt;
&lt;span class="s1"&gt;/usr/bin/google-chrome-stable: /opt/Xilinx/12.2/ISE_DS/common//lib/lin64/libstdc++.so.6: version `GLIBCXX_3.4.14&amp;#39;&lt;/span&gt; not found &lt;span class="o"&gt;(&lt;/span&gt;required by /usr/bin/google-chrome-stable&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;It appears the &lt;tt class="docutils literal"&gt;xlcm&lt;/tt&gt; binary was statically configured to use the
&lt;tt class="docutils literal"&gt;libstdc++&lt;/tt&gt; that are shipped with ISE. However, those libraries are too old to
accommodate the modern applications such as Google Chrome.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-fix"&gt;
&lt;h2&gt;The Fix&lt;/h2&gt;
&lt;p&gt;First, make sure your system's &lt;tt class="docutils literal"&gt;libstdc++&lt;/tt&gt; file has the correct libc versions.
On Ubuntu:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;strings /usr/lib/x86_64-linux-gnu/libstdc++.so.6 &lt;span class="p"&gt;|&lt;/span&gt; grep GLIBCXX
GLIBCXX_3.4
GLIBCXX_3.4.1
GLIBCXX_3.4.2
GLIBCXX_3.4.3
GLIBCXX_3.4.4
GLIBCXX_3.4.5
GLIBCXX_3.4.6
GLIBCXX_3.4.7
GLIBCXX_3.4.8
GLIBCXX_3.4.9
GLIBCXX_3.4.10
GLIBCXX_3.4.11
GLIBCXX_3.4.12
GLIBCXX_3.4.13
GLIBCXX_3.4.14
GLIBCXX_3.4.15
GLIBCXX_3.4.16
GLIBCXX_3.4.17
GLIBCXX_3.4.18
GLIBCXX_3.4.19
GLIBCXX_DEBUG_MESSAGE_LENGTH
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;That's the right libc file that &lt;tt class="docutils literal"&gt;xlcm&lt;/tt&gt; should use. Now, just override the
outdated libc file of ISE with this one.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /opt/Xilinx/12.2/ISE_DS/common/lib/lin64/
&lt;span class="nv"&gt;$ &lt;/span&gt;mv libstdc++.so.6 ise_libstdc++.so.6
&lt;span class="nv"&gt;$ &lt;/span&gt;cp /usr/lib/x86_64-linux-gnu/libstdc++.so.6 libstdc++.so.6
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Use &lt;tt class="docutils literal"&gt;sudo&lt;/tt&gt; where required.&lt;/p&gt;
&lt;p&gt;Now launch &lt;tt class="docutils literal"&gt;xlcm&lt;/tt&gt; again and it should be able to spawn a web page
successfully.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="glibc"></category><category term="Xilinx ISE"></category><category term="xlcm"></category></entry><entry><title>Chromecast Wireless Protocols Part-II: Cast</title><link href="http://jhshi.me/2016/10/24/chromecast-wireless-protocols-part-ii-cast/index.html" rel="alternate"></link><updated>2016-10-24T21:03:07-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2016-10-24:2016/10/24/chromecast-wireless-protocols-part-ii-cast/index.html</id><summary type="html">&lt;p&gt;In my &lt;a class="reference external" href="/2016/10/24/chromecast-wireless-protocols-part-i-setup/"&gt;previous post&lt;/a&gt;, I explored how the
cast device find and configure the Chromecast dongle. In this post, I'll dig
into the actual cast process.&lt;/p&gt;

&lt;div class="section" id="cast-screen"&gt;
&lt;h2&gt;Cast Screen&lt;/h2&gt;
&lt;p&gt;When casting screen, the cast device (Nexus 6P in my case) basically need to
send a serious of screen shots (probably 30 or 60 FPS) to the chromecast, which
incurs high throughput demand (double the actualy throughput required) to the
Wifi network if this traffic is routed by the AP, i.e., cast device -&amp;gt; AP -&amp;gt;
Chromecast.&lt;/p&gt;
&lt;p&gt;Standards such as &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Miracast"&gt;Miracast&lt;/a&gt; exits for
such purpose (HDMI over Wifi), but it requires a direct ad-hoc network between
the two devices. While in the case of Chromecast, both the Nexus 6p and the
Chromecast (at least the Nexus 6P) are still associated with the AP from my
experience. So how does Chromecast do it?&lt;/p&gt;
&lt;p&gt;I captured a packet trace while setting up a screen cast session, and find one
interesting packet type that I was not aware of: &lt;a class="reference external" href="https://en.wikipedia.org/wiki/TDLS"&gt;TDLS&lt;/a&gt;, which is short for &lt;em&gt;Tunneled Direct Link
Setup&lt;/em&gt; protocol.&lt;/p&gt;
&lt;p&gt;The setup packets are shown in the following screen shot.&lt;/p&gt;
&lt;img alt="Chromecast TDLS setup" src="/images/chromecast_tdls_setup.png" /&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;80:13&lt;/tt&gt; device is my Nexus 6P, the &lt;tt class="docutils literal"&gt;e8:de&lt;/tt&gt; device is the Wifi AP and the
&lt;tt class="docutils literal"&gt;6c:ad&lt;/tt&gt; device is the Chromecast dongle. We can see that the Nexus 6P first negociate
the TDLS parameters via the TDLS Discovery process, then a TDLS link is setup
between the Nexus 6P and the Chromecast. It is confirmed that a direct traffic
between the Nexus 6P and the Chromecast happened afterwards.&lt;/p&gt;
&lt;p&gt;The same mechinism applies for casting a Chromium tab as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cast-youtube"&gt;
&lt;h2&gt;Cast YouTube&lt;/h2&gt;
&lt;p&gt;In another cast scenario, where the content is not originated from the cast
device, but from some web server, as in YouTube, Netflix, etc. I did not observe
a TDLS setup process, which makes sense since the content is not on the cast
device, and the lightweight signaling packets (content URL, pause, volume)
between the cast device and the Chromecast does not justify the overhead of
setting up a TDLS link.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="chromcast"></category><category term="802.11"></category><category term="TDLS"></category></entry><entry><title>Chromecast Wireless Protocols Part-I: Setup</title><link href="http://jhshi.me/2016/10/24/chromecast-wireless-protocols-part-i-setup/index.html" rel="alternate"></link><updated>2016-10-24T14:04:01-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2016-10-24:2016/10/24/chromecast-wireless-protocols-part-i-setup/index.html</id><summary type="html">&lt;p&gt;There are plenty resources online that explains how Chromecast works. But most
of them focus on up-layer protocols, such as mDNS, DIAL/HTTP. I am more
interested in the 802.11 MAC layer. In particular, I was curious in questions
such as:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What happens when you &lt;em&gt;set up&lt;/em&gt; a Chromecast?&lt;/li&gt;
&lt;li&gt;How the cast device (such as an Android phone) and Chromecast communicate (in
802.11 layer)?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some of the questions were obvious, others are not. In this post, I will
document the process about the Chromecast setup process. This will be the first
of the series of posts on this topic.&lt;/p&gt;

&lt;div class="section" id="hardware-and-tools"&gt;
&lt;h2&gt;Hardware and Tools&lt;/h2&gt;
&lt;p&gt;Hardwares:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Chromecast (first gen, model: &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;H2G2-42&lt;/span&gt;&lt;/tt&gt;): test device&lt;/li&gt;
&lt;li&gt;TP-LINK WDR3500: AP&lt;/li&gt;
&lt;li&gt;TP-LINK WDR3500: Wifi sniffer, capture packets for analysis&lt;/li&gt;
&lt;li&gt;Nexus 6P: cast device&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Software Tools:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://openwrt.org/"&gt;OpenWRT&lt;/a&gt;: running on both the AP and the sniffer.
Makes AP configuration and trace collection easy.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;tcpdump&lt;/tt&gt;: used to collect trace&lt;/li&gt;
&lt;li&gt;Wireshark (v2.0.2): used to view trace&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://play.google.com/store/apps/details?id=com.google.android.apps.chromecast.app&amp;amp;hl=en"&gt;Google Cast&lt;/a&gt;
app on Android: used to setup Chromecast.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="chromecast-setup"&gt;
&lt;h2&gt;Chromecast Setup&lt;/h2&gt;
&lt;p&gt;The cast device and the chromecast dongle have to connect to the same Wifi
Access Point (AP) before the cast can happen. Because the Chromecast does not
have a GUI where you can configure it to connect to your Wifi network, this step
is done in-directly on the cast device.&lt;/p&gt;
&lt;p&gt;The basic flow is this:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The Chromecast dongle creates a Wifi network with the default SSID
&lt;tt class="docutils literal"&gt;ChromcastXXXX&lt;/tt&gt;, where &lt;tt class="docutils literal"&gt;XXXX&lt;/tt&gt; are 4 digit number identifying the device.&lt;/li&gt;
&lt;li&gt;The Google Cast app searching for such networks and associates with it once
found.&lt;/li&gt;
&lt;li&gt;You select which AP the Chromecast device should connect to, and enter
credentials accordingly.&lt;/li&gt;
&lt;li&gt;The Chromecast device tries to connect the AP using the credentials provided
in last step.&lt;/li&gt;
&lt;li&gt;Once the Chromecast is connected to the AP, it sets the &lt;tt class="docutils literal"&gt;SSID&lt;/tt&gt; field of the
beacon frames to &lt;tt class="docutils literal"&gt;NULL&lt;/tt&gt; (0 in length) such that the &lt;tt class="docutils literal"&gt;ChromecaseXXXX&lt;/tt&gt; SSID
disappears in your phone's scan result,&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="the-beacon"&gt;
&lt;h2&gt;The Beacon&lt;/h2&gt;
&lt;p&gt;Here is a snapshot of the beacon frame sent by the Chromecast device BEFORE it
is configured.&lt;/p&gt;
&lt;img alt="Beacon frame of Chromecast" src="/images/chromecast_mac.png" /&gt;
&lt;p&gt;There are couple of interesting facts I found.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;The &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Organizationally_unique_identifier"&gt;OUI&lt;/a&gt;
of the Chromecast device (&lt;tt class="docutils literal"&gt;fa:8f:ca&lt;/tt&gt;) is actually not registered. I can not
find it anywhere (&lt;a class="reference external" href="https://www.wireshark.org/tools/oui-lookup.html"&gt;Wireshark OUI lookup&lt;/a&gt;, &lt;a class="reference external" href="http://standards-oui.ieee.org/oui.txt"&gt;IEEE OUI database&lt;/a&gt;). I don't know how to interpret
this...&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;I tried to fool the Google Cast app by creating a fake Wifi AP with the SSID
&lt;tt class="docutils literal"&gt;Chromecase5089&lt;/tt&gt;, and see if it will be list as a Chromecast in the app. The
answer is: NO. Then I realized of course not, since you can name the
Chromecast device whatever you want after setting it up, so SSID is not a good
classifier of whether an AP is a potential Chromecast device.&lt;/p&gt;
&lt;p&gt;My second try is to fake the BSSID, especially the OUI. I set the BSSID of my
test router to some value similar with the true Chromecast.  It works this
time. Like I guessed earlier, the SSID does not matter at all. As show in the
following screenshot. The first is the true Chromecast device, while the
second one is a fake.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="Fake Chromecast device" class="align-center" src="/images/chromecast_ssid.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="link-setup"&gt;
&lt;h2&gt;Link Setup&lt;/h2&gt;
&lt;p&gt;After the cast device connects to the mini Wifi network created by the
Chromecast dongle, we can instruct the Chromecast to connect to the actual AP.&lt;/p&gt;
&lt;p&gt;After filling in the AP to connect to, I observed an association request from a
device with a different MAC address (OUI &lt;tt class="docutils literal"&gt;6c:ad:f8&lt;/tt&gt;) than the Beacon SSID in
previous step. OUI lookup result show this OUI belongs to &amp;quot;AzureWave Technology
Inc.&amp;quot;, which matches its &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Chromecast#First_generation"&gt;hardware spec&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After Chromecast connects to the AP, the SSID field in the beacon frame was set
to NULL.&lt;/p&gt;
&lt;img alt="Chromecast beacon frame after configuration." class="align-center" src="/images/chromecast_beacon_after.png" /&gt;
&lt;p&gt;Given the OUI difference and the Chromecast simultaneously broadcasts beacon and
associates with the AP, I suspect it actually contains two Wifi chips inside:
which does not make much sense given its small form factor and low price. Or
maybe the AzureWave chip supports both mode simultaneously?&lt;/p&gt;
&lt;/div&gt;
</summary><category term="chromecast"></category><category term="wireless"></category><category term="802.11"></category><category term="beacon"></category></entry><entry><title>Calculating CRC for HT-SIG in 802.11n Preamble</title><link href="http://jhshi.me/2016/10/18/calculating-crc-for-ht-sig-in-80211n-preamble/index.html" rel="alternate"></link><updated>2016-10-18T11:31:33-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2016-10-18:2016/10/18/calculating-crc-for-ht-sig-in-80211n-preamble/index.html</id><summary type="html">&lt;p&gt;The HT-SIG field of 802.11n PLCP preamble contains a 8-bit CRC for the receiver
to validate the sanity of the header. Here is how to calculate it.&lt;/p&gt;

&lt;img alt="HT-SIG CRC calculation" src="/images/ht_sig.png" /&gt;
&lt;p&gt;HT-SIG contains 48 bits and spans in 2 OFDM symbols (BPSK modulated, 1/2 rate).
This diagram from the 802.11-2012 standard describes the logic to calculate the
CRC for the first 34 bits of the field.&lt;/p&gt;
&lt;p&gt;Here is a Python version of the implementation.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calc_crc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bits&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;bits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;next_c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
        &lt;span class="n"&gt;next_c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;next_c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;next_c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;next_c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;next_c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;next_c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;next_c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;next_c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;next_c&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;&lt;tt class="docutils literal"&gt;c&lt;/tt&gt; is the 8-bit shift register. For each incoming bits, we calculate the next
value of each bit in the register and store them in &lt;tt class="docutils literal"&gt;next_c&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Finally, we perform two operations: reverse and two's complement. Note that
&lt;tt class="docutils literal"&gt;c[7]&lt;/tt&gt; is the first output bit.&lt;/p&gt;
&lt;p&gt;The standard also provides a test case.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;1 1 1 1 0 0 0 1 0 0 1 0 0 1 1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;calc_crc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Translating the logic into HDLs such as Verilog is quite straightforward.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="n"&gt;ht_sig_crc&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;input&lt;/span&gt; &lt;span class="n"&gt;clock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;input&lt;/span&gt; &lt;span class="n"&gt;enable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;input&lt;/span&gt; &lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="k"&gt;input&lt;/span&gt; &lt;span class="kt"&gt;bit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;input&lt;/span&gt; &lt;span class="n"&gt;input_strobe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="k"&gt;output&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;7&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;crc&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kt"&gt;reg&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;7&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="no"&gt;C&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;genvar&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;generate&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mh"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;begin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;
    &lt;span class="k"&gt;assign&lt;/span&gt; &lt;span class="n"&gt;crc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="no"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;7&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;endgenerate&lt;/span&gt;


&lt;span class="k"&gt;always&lt;/span&gt; &lt;span class="p"&gt;@(&lt;/span&gt;&lt;span class="k"&gt;posedge&lt;/span&gt; &lt;span class="n"&gt;clock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;begin&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;begin&lt;/span&gt;
        &lt;span class="no"&gt;C&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mh"&gt;8&amp;#39;hff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;enable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;begin&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_strobe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;begin&lt;/span&gt;
            &lt;span class="no"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="kt"&gt;bit&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="no"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;7&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="no"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="kt"&gt;bit&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="no"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="no"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="no"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="kt"&gt;bit&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="no"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="no"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="no"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;7&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mh"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="no"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;6&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;endmodule&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Here we use the &lt;tt class="docutils literal"&gt;generate&lt;/tt&gt; block to do the bit-reverse and negation.&lt;/p&gt;
</summary><category term="802.11n"></category><category term="preamble"></category><category term="CRC"></category><category term="SIGNAL"></category></entry><entry><title>Python.h Error While Installing Numpy for PyPy on Ubuntu 16.04</title><link href="http://jhshi.me/2016/10/04/pythonh-error-while-installing-numpy-for-pypy-on-ubuntu-1604/index.html" rel="alternate"></link><updated>2016-10-04T20:40:34-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2016-10-04:2016/10/04/pythonh-error-while-installing-numpy-for-pypy-on-ubuntu-1604/index.html</id><summary type="html">&lt;p&gt;I encountered this error whiling install the PyPy port of Numpy on Ubuntu 16.04.
Here is how to solve it.&lt;/p&gt;

&lt;p&gt;The command line I used was:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install git+https://bitbucket.org/pypy/numpy.git
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The error message was like this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;# a bunch of tracebacks
# then this line
SystemError: Cannot compile &amp;#39;Python.h&amp;#39;. Perhaps you need to install python-dev|python-devel.
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The solution is actually to install the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pypy-dev&lt;/span&gt;&lt;/tt&gt; package instead of the
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;python-dev&lt;/span&gt;&lt;/tt&gt; package suggested by the error message.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get intall pypy-dev
&lt;span class="nv"&gt;$ &lt;/span&gt;pip install git+https://bitbucket.org/pypy/numpy.git
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Thanks to &lt;a class="reference external" href="http://askubuntu.com/a/612016/219398"&gt;http://askubuntu.com/a/612016/219398&lt;/a&gt;.&lt;/p&gt;
</summary><category term="numpy"></category><category term="pypy"></category><category term="Python.h"></category><category term="Ubuntu 16.04"></category></entry><entry><title>Python Testing Using pytest, Tox, Travis-CI and Coveralls</title><link href="http://jhshi.me/2016/10/04/python-testing-using-pytest-tox-travis-ci-and-coverall/index.html" rel="alternate"></link><updated>2016-10-04T19:26:57-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2016-10-04:2016/10/04/python-testing-using-pytest-tox-travis-ci-and-coverall/index.html</id><summary type="html">&lt;p&gt;This post explains the automatic testing setup for the &lt;a class="reference external" href="http://wltrace.readthedocs.io"&gt;WlTrace&lt;/a&gt; project. You can see a live demo for all tools
described in this post at the &lt;a class="reference external" href="https://github.com/jhshi/wltrace"&gt;WlTrace Github repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It maybe a bit confusing at first with all those tools which serve subtly
different purposes. Next, I'll first explain the purpose of the tool, and then
show the particular setup in the WlTrace project.&lt;/p&gt;
&lt;div class="section" id="pytest-micro-testing-the-code"&gt;
&lt;h2&gt;pytest: Micro Testing The Code&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://doc.pytest.org"&gt;pytest&lt;/a&gt; is a unit test framework that actually
tests the nuts and bolts of each piece of your code. You'll need to actually
write test cases and pytest will collect and run those tests for you.&lt;/p&gt;
&lt;p&gt;I favor pytest over Python's default &lt;a class="reference external" href="https://docs.python.org/2/library/unittest.html"&gt;unittest&lt;/a&gt; framework because of it's
simplicity. Furthermore, there are many plugins exist that check various aspects
of the project, such as &lt;a class="reference external" href="http://doc.pytest.org/en/latest/doctest.html"&gt;doctest integration&lt;/a&gt;, &lt;a class="reference external" href="https://pypi.python.org/pypi/pytest-pep8"&gt;pep8 format checking&lt;/a&gt;, etc.&lt;/p&gt;
&lt;p&gt;pytest has excellent &lt;a class="reference external" href="http://doc.pytest.org/"&gt;documentation&lt;/a&gt;. Here is the
particular configuration for the WlTrace project.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# setup.cfg&lt;/span&gt;

&lt;span class="k"&gt;[tool:pytest]&lt;/span&gt;
&lt;span class="na"&gt;addopts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;-v -x --doctest-modules --ignore=setup.py --cov=wltrace --pep8&lt;/span&gt;
&lt;span class="na"&gt;pep8maxlinelength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;80&lt;/span&gt;
&lt;span class="na"&gt;pep8ignore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&lt;/span&gt;
&lt;span class="s"&gt;    E402    # module level import not at top of file&lt;/span&gt;
&lt;span class="s"&gt;    E241    # multiple spaces after &amp;#39;,&amp;#39;&lt;/span&gt;
&lt;span class="s"&gt;    E226    # missing white space around arithmetic operator&lt;/span&gt;
&lt;span class="s"&gt;    E222    # multiple spaces after operator&lt;/span&gt;
&lt;span class="s"&gt;    docs/source/conf.py ALL&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The &lt;tt class="docutils literal"&gt;addopts&lt;/tt&gt; option specific the arguments to call &lt;tt class="docutils literal"&gt;pytest&lt;/tt&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-v&lt;/span&gt;&lt;/tt&gt;: verbose output. This shows what is being tested, instead of just
a dot.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-x&lt;/span&gt;&lt;/tt&gt;: stop on first failed test&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--doctest-modules&lt;/span&gt;&lt;/tt&gt;: &lt;a class="reference external" href="http://doc.pytest.org/en/latest/doctest.html"&gt;integrate doctest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--ignore=setup.py&lt;/span&gt;&lt;/tt&gt;: do not do doctest on the top level &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--cov=wltrace&lt;/span&gt;&lt;/tt&gt;: Test the coverage of the &lt;tt class="docutils literal"&gt;wltrace&lt;/tt&gt; module, which is the
top module of the WlTrace package. Requires &lt;a class="reference external" href="https://pypi.python.org/pypi/pytest-cov"&gt;pytest-cov&lt;/a&gt; plugin and the Coverage.py
package.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--pep8&lt;/span&gt;&lt;/tt&gt;: check &lt;a class="reference external" href="http://legacy.python.org/dev/peps/pep-0008/"&gt;pep8&lt;/a&gt; format
compliance. Requires &lt;a class="reference external" href="https://pypi.python.org/pypi/pytest-pep8"&gt;pytest-pep8&lt;/a&gt;
plugin.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now we can use a single &lt;tt class="docutils literal"&gt;pytest&lt;/tt&gt; command to fire up the tests and also get
code coverage information during the test stored at &lt;tt class="docutils literal"&gt;.coverage&lt;/tt&gt; file, which
will be used later for Coveralls. This file should be ignored by your VCS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tox-macro-testing-the-environment"&gt;
&lt;h2&gt;Tox: Macro Testing The Environment&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://tox.readthedocs.io"&gt;Tox&lt;/a&gt; is a tool to test your final package in
various Python environments, such as Python 2, Python 3, PyPy, Jython, etc. It
is mainly used to make sure the &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt; is configured properly and your
final distribution package can be successfully installed under those Python
environments. Furthermore, it issues the test command after installation to test
if the project also run properly in those environments.&lt;/p&gt;
&lt;p&gt;Here's the project's &lt;tt class="docutils literal"&gt;tox.ini&lt;/tt&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[tox]&lt;/span&gt;
&lt;span class="na"&gt;envlist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;py27,pypy&lt;/span&gt;

&lt;span class="k"&gt;[testenv]&lt;/span&gt;
&lt;span class="na"&gt;commands&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;pytest&lt;/span&gt;
&lt;span class="na"&gt;deps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&lt;/span&gt;
&lt;span class="s"&gt;    pytest-pep8&lt;/span&gt;
&lt;span class="s"&gt;    pytest-cov&lt;/span&gt;
&lt;span class="s"&gt;    pytest&lt;/span&gt;
&lt;span class="s"&gt;    coverage&lt;/span&gt;

&lt;span class="k"&gt;[testenv:pypy]&lt;/span&gt;
&lt;span class="na"&gt;install_command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;pip install git+https://bitbucket.org/pypy/numpy.git {packages}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Here we specified two Python environments: Python 2.7 and PyPy. Note the special
&lt;tt class="docutils literal"&gt;install_command&lt;/tt&gt; configuration for PyPy to deal with the &lt;tt class="docutils literal"&gt;Numpy&lt;/tt&gt; package.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="travis-ci-continuous-integration"&gt;
&lt;h2&gt;Travis CI: Continuous Integration&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://travis-ci.org/"&gt;Travis CI&lt;/a&gt; is a online service to automatically build
and test your project for continuous Integration, so it is easy to pinpoint to
the single commit that breaks the build.&lt;/p&gt;
&lt;p&gt;Here is the &lt;tt class="docutils literal"&gt;.travis.yml&lt;/tt&gt; configuration.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="l-Scalar-Plain"&gt;language&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;python&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;python&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;2.7&amp;quot;&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;pypy&amp;quot;&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;install&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="p-Indicator"&gt;|&lt;/span&gt;
        &lt;span class="no"&gt;if [[ &amp;quot;${TRAVIS_PYTHON_VERSION}&amp;quot; = pypy ]]; then&lt;/span&gt;
            &lt;span class="no"&gt;git clone https://github.com/yyuu/pyenv.git ~/.pyenv&lt;/span&gt;
            &lt;span class="no"&gt;PYENV_ROOT=&amp;quot;$HOME/.pyenv&amp;quot;&lt;/span&gt;
            &lt;span class="no"&gt;PATH=&amp;quot;$PYENV_ROOT/bin:$PATH&amp;quot;&lt;/span&gt;
            &lt;span class="no"&gt;eval &amp;quot;$(pyenv init -)&amp;quot;&lt;/span&gt;
            &lt;span class="no"&gt;pyenv install pypy-5.4.1&lt;/span&gt;
            &lt;span class="no"&gt;pyenv global pypy-5.4.1&lt;/span&gt;
            &lt;span class="no"&gt;pip install git+https://bitbucket.org/pypy/numpy.git&lt;/span&gt;
        &lt;span class="no"&gt;fi&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;pip install tox-travis coveralls&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;script&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;tox&lt;/span&gt;

&lt;span class="l-Scalar-Plain"&gt;after_success&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;coveralls&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Here we first install a recent version PyPy and also &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;tox-travis&lt;/span&gt;&lt;/tt&gt; to make tox
play nice with Travis CI. We also install the &lt;tt class="docutils literal"&gt;coveralls&lt;/tt&gt; tool to be used
later to publish the coverage information to &lt;a class="reference external" href="http://coveralls.io"&gt;http://coveralls.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note that we install &lt;tt class="docutils literal"&gt;numpy&lt;/tt&gt; in pypy environment explicitly. This is because
the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;tox-travis&lt;/span&gt;&lt;/tt&gt; plugin has some difficulty utilizing the &lt;tt class="docutils literal"&gt;install_command&lt;/tt&gt;
configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="coverage-py-code-coverage"&gt;
&lt;h2&gt;Coverage.py: Code Coverage&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://coverage.readthedocs.io"&gt;Coverage.py&lt;/a&gt; is a tool to measure the code
coverage of Python programs. In the context of testing, it can be used to
measure the code coverage when running pytest, which effectively translate code
coverage to test coverage.&lt;/p&gt;
&lt;p&gt;Previously we use the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pytest-cov&lt;/span&gt;&lt;/tt&gt; plugin to call this tool during test so
that we translate the code coverage to test coverage. The coverage information
is stored in the &lt;tt class="docutils literal"&gt;.coverage&lt;/tt&gt; file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="coveralls-showcase-coverage"&gt;
&lt;h2&gt;Coveralls: Showcase Coverage&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://coveralls.io/"&gt;Coveralls&lt;/a&gt; is a web service that displays the code
coverage information generated by the Coverage.py tool.&lt;/p&gt;
&lt;p&gt;We installed &lt;tt class="docutils literal"&gt;coveralls&lt;/tt&gt; package in Travis. The &lt;tt class="docutils literal"&gt;coveralls&lt;/tt&gt; command will
publish the coverage information to &lt;a class="reference external" href="http://coveralls.io"&gt;http://coveralls.io&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="pytest"></category><category term="tox"></category><category term="travis"></category><category term="coverage"></category><category term="coverall"></category><category term="testing"></category></entry><entry><title>Tox and Travis Setup for Python Project Using PyPy</title><link href="http://jhshi.me/2016/10/03/tox-and-travis-setup-for-pypy-project/index.html" rel="alternate"></link><updated>2016-10-03T13:12:34-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2016-10-03:2016/10/03/tox-and-travis-setup-for-pypy-project/index.html</id><summary type="html">&lt;p&gt;Recently I was in development of a &lt;a class="reference external" href="https://github.com/jhshi/wltrace"&gt;Python project&lt;/a&gt; that supports both the regular Python 2.7
and also the PyPy environment. Here is how to setup the automatic testing
environment using Tox and Travis-CI.&lt;/p&gt;

&lt;div class="section" id="tox-setup-and-handling-numpy"&gt;
&lt;h2&gt;Tox Setup and Handling Numpy&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://tox.readthedocs.io/en/latest/"&gt;Tox&lt;/a&gt; is a tool to test if your
package can be installed in various Python environment properly. Tox setup is
relatively easy: just follow the basic setup document of Tox.&lt;/p&gt;
&lt;p&gt;The tricky part of supporting regular Python and PyPy simultaneously is to
handle the &lt;tt class="docutils literal"&gt;numpy&lt;/tt&gt; packet properly. since you can not simply do a &lt;tt class="docutils literal"&gt;pip
install numpy&lt;/tt&gt; in PyPy, but have to use the BitBucket repo URL instead.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[UPDATE 2016-10-05]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I found there is this PyPy port of numpy called &lt;a class="reference external" href="https://pypi.python.org/pypi/numpy-pypy/1.9.0"&gt;numpy-pypy&lt;/a&gt;. We can also use this package.&lt;/p&gt;
&lt;p&gt;To install &lt;tt class="docutils literal"&gt;numpy&lt;/tt&gt; properly, I did three things.&lt;/p&gt;
&lt;p&gt;First, have one &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;common-requirements.txt&lt;/span&gt;&lt;/tt&gt; that specific all requirements
except for the &lt;tt class="docutils literal"&gt;numpy&lt;/tt&gt;, and then have two separated &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;py27-requirements.txt&lt;/span&gt;&lt;/tt&gt;
and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pypy-requirements.txt&lt;/span&gt;&lt;/tt&gt;. In &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;py27-requirements.txt&lt;/span&gt;&lt;/tt&gt;, specify the
&lt;tt class="docutils literal"&gt;numpy&lt;/tt&gt; version needed.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# requirements for py27&lt;/span&gt;
-r common-requirements.txt
&lt;span class="nv"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;1.11.1
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;While in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pypy-requirements.txt&lt;/span&gt;&lt;/tt&gt;, use the BitBucket link instead.
.. code-block:: text&lt;/p&gt;
&lt;blockquote&gt;
# requirements for pypy
git+https://bitbucket.org/pypy/numpy.git
-r common-requirements.txt&lt;/blockquote&gt;
&lt;p&gt;Second, detect Python environment at runtime and set up &lt;tt class="docutils literal"&gt;install_requires&lt;/tt&gt;
properly.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;install_requires&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="c"&gt;# requirements&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;platform&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;python_implementation&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;PyPy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;install_requires&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;numpy-pypy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;install_requires&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;numpy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c"&gt;# ...&lt;/span&gt;
    &lt;span class="n"&gt;install_requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;install_requires&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c"&gt;# ...&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;At this point, you should be able to use the &lt;tt class="docutils literal"&gt;tox&lt;/tt&gt; command to test both the
&lt;tt class="docutils literal"&gt;py27&lt;/tt&gt; and the &lt;tt class="docutils literal"&gt;pypy&lt;/tt&gt; environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="travis-setup"&gt;
&lt;h2&gt;Travis Setup&lt;/h2&gt;
&lt;p&gt;We need to first install the recent version of PyPy as Travis is known to
behind on PyPy versions. Here is the &lt;tt class="docutils literal"&gt;.travis.yml&lt;/tt&gt; that installs the PyPy
v5.4.1 using &lt;tt class="docutils literal"&gt;pyenv&lt;/tt&gt;.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="l-Scalar-Plain"&gt;language&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;python&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;python&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;2.7&amp;quot;&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;pypy&amp;quot;&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;addons&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;apt&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="l-Scalar-Plain"&gt;packages&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
            &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;pypy-dev&lt;/span&gt;
            &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;liblapack-dev&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;install&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="p-Indicator"&gt;|&lt;/span&gt;
        &lt;span class="no"&gt;if [[ &amp;quot;${TRAVIS_PYTHON_VERSION}&amp;quot; = pypy ]]; then&lt;/span&gt;
            &lt;span class="no"&gt;git clone https://github.com/yyuu/pyenv.git ~/.pyenv&lt;/span&gt;
            &lt;span class="no"&gt;PYENV_ROOT=&amp;quot;$HOME/.pyenv&amp;quot;&lt;/span&gt;
            &lt;span class="no"&gt;PATH=&amp;quot;$PYENV_ROOT/bin:$PATH&amp;quot;&lt;/span&gt;
            &lt;span class="no"&gt;eval &amp;quot;$(pyenv init -)&amp;quot;&lt;/span&gt;
            &lt;span class="no"&gt;pyenv install pypy-5.4.1&lt;/span&gt;
            &lt;span class="no"&gt;pyenv global pypy-5.4.1&lt;/span&gt;
        &lt;span class="no"&gt;fi&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;pip install tox-travis&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;script&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;tox&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;numpy-pypy&lt;/span&gt;&lt;/tt&gt; package depends on &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pypy-dev&lt;/span&gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;liblapack-dev&lt;/span&gt;&lt;/tt&gt;, so we
install them through the &lt;tt class="docutils literal"&gt;addons&lt;/tt&gt; configuration of Travis.&lt;/p&gt;
&lt;p&gt;Note that we also used the &lt;a class="reference external" href="https://pypi.python.org/pypi/tox-travis"&gt;tox-travis&lt;/a&gt; plugin to easy the integration of
tox and Travis.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/pyca/pyopenssl/blob/master/.travis.yml"&gt;https://github.com/pyca/pyopenssl/blob/master/.travis.yml&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/20617600/travis-special-requirements-for-each-python-version"&gt;http://stackoverflow.com/questions/20617600/travis-special-requirements-for-each-python-version&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</summary><category term='"tox"'></category><category term='"travis"'></category><category term='"pypy"'></category></entry><entry><title>Automated Testing of Pelican Blog Using Travis-CI</title><link href="http://jhshi.me/2016/09/28/automated-testing-of-pelican-blog-using-travis-ci/index.html" rel="alternate"></link><updated>2016-09-28T18:44:07-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2016-09-28:2016/09/28/automated-testing-of-pelican-blog-using-travis-ci/index.html</id><summary type="html">&lt;p&gt;Recently I adjusted my blog work flow a bit to utilize &lt;a class="reference external" href="https://travis-ci.org/"&gt;Travis CI&lt;/a&gt; to automatically test and publish the site. Here is
my setup process.&lt;/p&gt;

&lt;div class="section" id="background"&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;I use &lt;a class="reference external" href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; to maintain this blog website.
The source of the site content (ReStructured text, not html) is hosted at this
GitHub repository: &lt;a class="reference external" href="https://github.com/jhshi/blog_source"&gt;https://github.com/jhshi/blog_source&lt;/a&gt;. The generated site is
hosted at here: &lt;a class="reference external" href="https://github.com/jhshi/jhshi.github.com"&gt;https://github.com/jhshi/jhshi.github.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My previous work flow was:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Write content locally&lt;/li&gt;
&lt;li&gt;Do a bit testing using local HTTP server (mostly looking for format
glitches)&lt;/li&gt;
&lt;li&gt;Commit and push to the &lt;tt class="docutils literal"&gt;jhshi/blog_source&lt;/tt&gt; repo.&lt;/li&gt;
&lt;li&gt;Do a &lt;tt class="docutils literal"&gt;fab github&lt;/tt&gt; to generate the site and push to the
&lt;tt class="docutils literal"&gt;jhshi/jhshi.github.com&lt;/tt&gt; repo.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As you can see, the process (especially step 2 - 4) is a bit tedious, and the
site is not throughly tested. In particular, I do not always run &lt;tt class="docutils literal"&gt;linkchecker&lt;/tt&gt;
before I push. And finally, I need to manually &lt;em&gt;publish&lt;/em&gt; the site every time.&lt;/p&gt;
&lt;p&gt;So the goal is to shift some of the heavy-lifting, especially testing and
publishing, to a continuous integration tool. Travis seems the natural choice
given its excellent integration with Github.&lt;/p&gt;
&lt;p&gt;Before you get started, I suppose you have already connected Travis with your
Github account. Refer to the documentation from Travis for more details:
&lt;a class="reference external" href="https://docs.travis-ci.com/user/getting-started/"&gt;https://docs.travis-ci.com/user/getting-started/&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="build-environment"&gt;
&lt;h2&gt;Build Environment&lt;/h2&gt;
&lt;p&gt;As a first step, we first tell Travis how to build our project. Put these
content in a file named &amp;quot;.travis.yml&amp;quot; in your projects root directory.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="l-Scalar-Plain"&gt;language&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;python&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;install&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;NO_SUDO=1 source setup.sh&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;script&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;make html&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;There are two things worth noticing:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The &lt;tt class="docutils literal"&gt;setup.sh&lt;/tt&gt; script, which can be found
here: &lt;a class="reference external" href="https://github.com/jhshi/blog_source/blob/master/setup.sh"&gt;https://github.com/jhshi/blog_source/blob/master/setup.sh&lt;/a&gt;, is
responsible to set the pelican environment, including cloning proper plugins
and themes repository. The &lt;tt class="docutils literal"&gt;NO_SUDO&lt;/tt&gt; flag tells the script to not use
&lt;tt class="docutils literal"&gt;sudo&lt;/tt&gt; and also use &lt;tt class="docutils literal"&gt;https&lt;/tt&gt; URLs for repository instead of &lt;tt class="docutils literal"&gt;ssh&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;If you use &lt;tt class="docutils literal"&gt;ga_page_view&lt;/tt&gt; plugin, the build will fail since the private key
file &lt;tt class="docutils literal"&gt;ga.pem&lt;/tt&gt; will not exist in the freshly cloned repository: it
shouldn't. I'll talk about how to deal with this later. But for now, we can
tell &lt;tt class="docutils literal"&gt;pelican&lt;/tt&gt; to silently ignore this error. Change the &lt;tt class="docutils literal"&gt;ga_page_view&lt;/tt&gt;
configuration in &lt;tt class="docutils literal"&gt;pelicanconf.py&lt;/tt&gt; slightly like this:&lt;/li&gt;
&lt;/ol&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ga.pem&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;GOOGLE_SERVICE_ACCOUNT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;xxx&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;GOOGLE_KEY_FILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PROJECT_ROOT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;ga.pem&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;GA_START_DATE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;2005-01-01&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;GA_END_DATE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;today&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;GA_METRIC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;ga:pageviews&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;[WARN] No key found for Google Analytics&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Commit and push to the master branch of your source repository, and check
&lt;tt class="docutils literal"&gt;travis&lt;/tt&gt; logs to make sure it can successfully build the site.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="private-files"&gt;
&lt;h2&gt;Private Files&lt;/h2&gt;
&lt;p&gt;There are two private files in my case: the key for Google Analytics API and the
deploy key for the website repository.&lt;/p&gt;
&lt;p&gt;Let's first create the deploy key if you don't have it already. Note that this
must NOT your primary ssh key. So I suggest you create a new pair of SSH keys
just for the website repo.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ssh-keygen -f ./deploy_key
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Copy the content of &lt;tt class="docutils literal"&gt;deploy_key.pub&lt;/tt&gt; to your project's deploy keys settings,
then move it to somewhere else or delete it: we don't really need it anymore.&lt;/p&gt;
&lt;p&gt;Next, install &lt;tt class="docutils literal"&gt;travis&lt;/tt&gt; CLI tool, which is used to encrypt the private files.
&lt;tt class="docutils literal"&gt;travis&lt;/tt&gt; depends on ruby greater than 2.0. So I recommend to use the Brightbox
ppa for ruby.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo add-apt-repository ppa:brightbox/ruby-ng
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get update
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get install ruby2.2-dev ruby-2.2
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo gem install travis
&lt;span class="nv"&gt;$ &lt;/span&gt;travis -v
1.8.2 &lt;span class="c"&gt;# &amp;lt;--- your mileage may vary&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;travis login
&lt;span class="c"&gt;# &amp;lt;--- enter your GITHUB username and password&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Next, use &lt;tt class="docutils literal"&gt;travis&lt;/tt&gt; to encrypt the file. Note that you can only encrypt one
file in total. Here we have two files to encrypt: the key for Google API and the
key for deploy the website. So we need to tar it first:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;tar cvzf secrets.tgz ga.pem deploy_key
&lt;span class="nv"&gt;$ &lt;/span&gt;travis encrypt-file secrets.tgz
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Finally, unpack those secrets by add these lines to the &lt;tt class="docutils literal"&gt;.travis.yml&lt;/tt&gt;.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="l-Scalar-Plain"&gt;before_install&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
&lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;openssl aes-256-cbc -K $encrypted_XXXXXX_key -iv $encrypted_XXXXXX_iv -in secrets.tgz.enc -out secrets.tgz -d&lt;/span&gt;
&lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;tar xvf secrets.tgz&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Replace &lt;tt class="docutils literal"&gt;XXXXXX&lt;/tt&gt; with the magic number you got from &lt;tt class="docutils literal"&gt;travis &lt;span class="pre"&gt;encrypt-file&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Now, delete &lt;tt class="docutils literal"&gt;secrets.tgz&lt;/tt&gt;, and add &lt;tt class="docutils literal"&gt;deploy_key&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;ga.pem&lt;/tt&gt; to your
&lt;tt class="docutils literal"&gt;.gitignore&lt;/tt&gt;, commit all changes, and push to &lt;tt class="docutils literal"&gt;master&lt;/tt&gt; branch. Check travis
logs to make sure the sites gets built. In particular, you should not see the
&lt;tt class="docutils literal"&gt;No key&lt;/tt&gt; warning for &lt;tt class="docutils literal"&gt;ga_page_view&lt;/tt&gt; plugin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="automatic-deployment"&gt;
&lt;h2&gt;Automatic Deployment&lt;/h2&gt;
&lt;p&gt;Finally, let's tell travis to deploy the website if the test passes. Add this
rule to your &lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;check&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;clean&lt;/span&gt; &lt;span class="n"&gt;publish&lt;/span&gt;
    &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;PY&lt;span class="k"&gt;)&lt;/span&gt; -m pelican.server &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; - &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
    sleep 3
    linkchecker http://localhost:8000
    pgrep -f &lt;span class="s2"&gt;&amp;quot;^python -m pelican.server&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; xargs &lt;span class="nb"&gt;kill&lt;/span&gt; -9


&lt;span class="nf"&gt;travis&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;clean&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt; &lt;span class="n"&gt;publish&lt;/span&gt;
    chmod &lt;span class="m"&gt;600&lt;/span&gt; deploy_key &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;ssh-agent -s&lt;span class="sb"&gt;`&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
        ssh-add deploy_key &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
        git init . &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
        git config user.email &lt;span class="s2"&gt;&amp;quot;robot@travis-ci.org&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        git config user.name &lt;span class="s2"&gt;&amp;quot;Travis&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        git remote add origin &lt;span class="k"&gt;$(&lt;/span&gt;GITHUB_PAGES_REPO&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
        git add --all --force . &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
        git commit -am &lt;span class="s2"&gt;&amp;quot;Site updated on `date -R`&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
        git push origin master --force &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="nb"&gt;cd&lt;/span&gt; -
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Note that we also check URL links using &lt;tt class="docutils literal"&gt;linkchecker&lt;/tt&gt; before deploying. Change
the make target in &lt;tt class="docutils literal"&gt;.travis.yml&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;make travis&lt;/tt&gt;, commit and push.  And now
if the site is good, it should be automatically deployed.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="travis"></category><category term="github"></category><category term="blog"></category><category term="testing"></category></entry><entry><title>Start AutoSSH on Boot</title><link href="http://jhshi.me/2016/08/24/start-autossh-on-boot/index.html" rel="alternate"></link><updated>2016-08-24T11:11:29-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2016-08-24:2016/08/24/start-autossh-on-boot/index.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.harding.motd.ca/autossh/"&gt;AutoSSH&lt;/a&gt; is a great tool to maintain a
persistent SSH tunnel. Here is how to start AutoSSH on boot so that the tunnel
can survive system reboot of the local machine.&lt;/p&gt;

&lt;p&gt;Here we assume you can already &lt;tt class="docutils literal"&gt;ssh&lt;/tt&gt; into the remote machine without typing
the password. If not, see my &lt;a class="reference external" href="/2012/04/27/sshscp-without-password/index.html"&gt;previous post&lt;/a&gt; on how to set
up it.&lt;/p&gt;
&lt;p&gt;First, on your local machine, switch to &lt;tt class="docutils literal"&gt;root&lt;/tt&gt; user:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo su
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Second, &lt;tt class="docutils literal"&gt;ssh&lt;/tt&gt; into remote machine as &lt;tt class="docutils literal"&gt;root&lt;/tt&gt; so the remote machine is added
to your &lt;tt class="docutils literal"&gt;root&lt;/tt&gt;'s &lt;tt class="docutils literal"&gt;known_hosts&lt;/tt&gt;.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# ssh &amp;lt;user&amp;gt;@&amp;lt;remote_host&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Third, add this line to your &lt;tt class="docutils literal"&gt;/etc/rc.local&lt;/tt&gt;.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;autossh -N -f -i /home/&amp;lt;user&amp;gt;/.ssh/id_rsa -R 22222:localhost:22 &amp;lt;user&amp;gt;@&amp;lt;remote_host&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The command arguments are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-N&lt;/span&gt;&lt;/tt&gt;: tell &lt;tt class="docutils literal"&gt;ssh&lt;/tt&gt; to not execute any command, since we only use it for
tunneling.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-f&lt;/span&gt;&lt;/tt&gt;: tell &lt;tt class="docutils literal"&gt;autossh&lt;/tt&gt; to fall into background on start.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-i&lt;/span&gt;&lt;/tt&gt;: tell &lt;tt class="docutils literal"&gt;ssh&lt;/tt&gt; to use the proper identity.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-R&lt;/span&gt; 22222:localhost:22&lt;/tt&gt;: reverse tunnel remote host's 22222 port to
localhost's 22 port. So that we can use &lt;tt class="docutils literal"&gt;ssh &lt;span class="pre"&gt;-p&lt;/span&gt; 22222 localhost&lt;/tt&gt; on remote
host to &lt;tt class="docutils literal"&gt;ssh&lt;/tt&gt; into local machine.&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="autossh"></category><category term="ssh"></category><category term="tunnel"></category></entry><entry><title>Disable "New sign-in from" Email from Google</title><link href="http://jhshi.me/2016/08/14/disable-new-sign-in-from-email-from-google/index.html" rel="alternate"></link><updated>2016-08-14T03:11:58-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2016-08-14:2016/08/14/disable-new-sign-in-from-email-from-google/index.html</id><summary type="html">&lt;p&gt;I have a Gmail account for Android ROM testing purpose. And I kept receiving
this annoying email from Google anytime I use that account to sign in Gmail
(most of the time it's a clean flashed Android phone which I will wipe out
later). Here is how to disable the email notification.&lt;/p&gt;

&lt;p&gt;Login to Gmail using the account which you wish to stop receiving notifications.
At the very bottom right of Inbox page, you will see this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;Last account activity: 0 minutes ago
Details
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Click on &amp;quot;Details&amp;quot;, then at the bottom of the pop up window:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;Alert preference: Show an alert for unusual activity. change
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Click &amp;quot;change&amp;quot; and then choose &amp;quot;Never show an alert for unusual activity&amp;quot;. Then
&amp;quot;Apply&amp;quot;, then &amp;quot;Disable alerts&amp;quot;.&lt;/p&gt;
&lt;p&gt;Thanks to:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://webapps.stackexchange.com/questions/85727/make-google-stop-sending-new-sign-in-from-emails/86432#86432"&gt;https://webapps.stackexchange.com/questions/85727/make-google-stop-sending-new-sign-in-from-emails/86432#86432&lt;/a&gt;?s=77a2ae5697034627aab8f8eb0388f4ce&lt;/p&gt;
</summary><category term="Google"></category><category term="Email"></category></entry><entry><title>Start Gerrit Server upon Boot on Ubuntu</title><link href="http://jhshi.me/2016/08/10/start-gerrit-server-upon-boot-on-ubuntu/index.html" rel="alternate"></link><updated>2016-08-10T10:44:55-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2016-08-10:2016/08/10/start-gerrit-server-upon-boot-on-ubuntu/index.html</id><summary type="html">&lt;p&gt;I couldn't find any solid document online. Here are the steps to configure
Gerrit server to automatically start upon system boot on Ubuntu.&lt;/p&gt;

&lt;p&gt;Here are the version numbers on my setup, your mileage may vary.&lt;/p&gt;
&lt;p&gt;Ubuntu&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;lsb_release -a
No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 14.04.1 LTS
Release:    14.04
Codename:   trusty
&lt;span class="nv"&gt;$ &lt;/span&gt;uname -a
Linux platform 3.13.0-39-generic &lt;span class="c"&gt;#66-Ubuntu SMP Tue Oct 28 13:30:27 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Gerrit 2.9.1, site directory is &lt;tt class="docutils literal"&gt;/srv/gerrit2&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;First, modify the &lt;tt class="docutils literal"&gt;gerrit.sh&lt;/tt&gt; script, change:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Required-Start: $named $remote $syslog&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;To this line:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Required-Start:    $all&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Note the line is still commented.&lt;/p&gt;
&lt;p&gt;Second, make the proper symlinks:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo ln -sfv /srv/gerrit2/bin/gerrit.sh /etc/init.d/gerrit
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo update-rc.d gerrit defaults 92
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Finally, we need to tell Gerrit the site directory.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;GERRIT_SITE=/srv/gerrti2&amp;quot;&lt;/span&gt; &amp;gt; /etc/default/gerritcodereview
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;You should be good to go. Restart the server and Gerrit should be up and running
as well.&lt;/p&gt;
&lt;p&gt;Thanks to this post:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://askubuntu.com/questions/721478/ubuntu-init-d-configuration-not-starting-gerrit-2-11-4-at-boot"&gt;http://askubuntu.com/questions/721478/ubuntu-init-d-configuration-not-starting-gerrit-2-11-4-at-boot&lt;/a&gt;&lt;/p&gt;
</summary><category term="gerrit"></category><category term="init.d"></category><category term="startup"></category><category term="boot"></category></entry><entry><title>FileNotFound Exception in RecoverySystem.installPackage</title><link href="http://jhshi.me/2016/08/06/filenotfound-exception-in-recoverysysteminstallpackage/index.html" rel="alternate"></link><updated>2016-08-06T21:42:06-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2016-08-06:2016/08/06/filenotfound-exception-in-recoverysysteminstallpackage/index.html</id><summary type="html">&lt;p&gt;I encountered this error while trying to use the
&lt;tt class="docutils literal"&gt;RecoverySystem.installPackage&lt;/tt&gt; API to apply an OTA update. This post shows
what causes the error and how to walk around it. The error occurs for AOSP
release &lt;cite&gt;android-6.0.1_r24&lt;/cite&gt; in my case.&lt;/p&gt;

&lt;div class="section" id="the-cause"&gt;
&lt;h2&gt;The Cause&lt;/h2&gt;
&lt;p&gt;By looking at the source code at
&lt;tt class="docutils literal"&gt;$AOSP/frameworks/base/core/java/android/os/RecoverySystem.java&lt;/tt&gt; (Link
&lt;a class="reference external" href="https://android.googlesource.com/platform/frameworks/base.git/+/android-6.0.1_r63/core/java/android/os/RecoverySystem.java"&gt;RecoverySystem.java&lt;/a&gt;). The exception was thrown from this line:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;installPackage&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="n"&gt;packageFile&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;packageFile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getCanonicalPath&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;FileWriter&lt;/span&gt; &lt;span class="n"&gt;uncryptFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FileWriter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UNCRYPT_FILE&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- THIS LINE&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;uncryptFile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;write&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;uncryptFile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;w&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TAG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;!!! REBOOTING TO INSTALL &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; !!!&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;// If the package is on the /data partition, write the block map file&lt;/span&gt;
        &lt;span class="c1"&gt;// into COMMAND_FILE instead.&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;startsWith&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/data/&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;@/cache/recovery/block.map&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;filenameArg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;--update_package=&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;localeArg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;--locale=&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Locale&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getDefault&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;bootCommand&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filenameArg&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;localeArg&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Earlier, &lt;tt class="docutils literal"&gt;UNCRYPT_FILE&lt;/tt&gt; was defined as this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="n"&gt;RECOVERY_DIR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/cache/recovery&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="n"&gt;COMMAND_FILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RECOVERY_DIR&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="n"&gt;UNCRYPT_FILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RECOVERY_DIR&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;uncrypt_file&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;So its value is &lt;tt class="docutils literal"&gt;/cache/recovery/uncrypt_file&lt;/tt&gt;. However, at this point, its
parent directory &lt;tt class="docutils literal"&gt;/cache/recovery/&lt;/tt&gt; does not exists yet! And &lt;tt class="docutils literal"&gt;FileWriter&lt;/tt&gt;
will not create it automatically, therefore the &lt;tt class="docutils literal"&gt;FileNotFound&lt;/tt&gt; exception.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-fix"&gt;
&lt;h2&gt;The Fix&lt;/h2&gt;
&lt;p&gt;If you are a app developer and do not have access to the AOSP framework on your
target system, simple create that folder before calling &lt;tt class="docutils literal"&gt;installPackage&lt;/tt&gt;.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/cache/recovery/&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)).&lt;/span&gt;&lt;span class="na"&gt;mkdirs&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;RecoverySystem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;installPackage&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;otaPackage&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The real fix from the platform side is this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;installPackage&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="n"&gt;packageFile&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
       &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
       &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;packageFile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getCanonicalPath&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
       &lt;span class="n"&gt;RECOVERY_DIR&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;mkdirs&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
       &lt;span class="n"&gt;FileWriter&lt;/span&gt; &lt;span class="n"&gt;uncryptFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FileWriter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UNCRYPT_FILE&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- THIS LINE&lt;/span&gt;
       &lt;span class="c1"&gt;//...&lt;/span&gt;
       &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
</summary><category term="RecoverySystem"></category><category term="OTA"></category><category term="AOSP"></category><category term="Exception"></category><category term="FileNotFound"></category></entry><entry><title>How to Properly Mirror CyanogenMod</title><link href="http://jhshi.me/2016/08/06/how-to-properly-mirror-cyanogenmod/index.html" rel="alternate"></link><updated>2016-08-06T14:47:52-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2016-08-06:2016/08/06/how-to-properly-mirror-cyanogenmod/index.html</id><summary type="html">&lt;p&gt;Recently I needed to create a mirror of CyanogenMod to facilities further
development of our smartphone testbed PhoneLab. The goal is to have a working
mirror that we can stage any experimental changes on our own server, since there
is no plan to publish such changes to upstream (at least for now). Quite
surprisingly, I found this to be a non-trivial task. Here is a log of I walked
around the minefield.&lt;/p&gt;

&lt;div class="section" id="background-and-goal"&gt;
&lt;h2&gt;Background and Goal&lt;/h2&gt;
&lt;p&gt;We are using Gerrit as a Git server. It's a decent Git host solution has some
nice access control features. We have built a set of tools that can
automatically merge a given set of experimental branches to our baseline branch,
and generates incremental OTA updates that we can push to our participants.&lt;/p&gt;
&lt;p&gt;Starting from summer 2016, we are using the Nexus
6 device (code name &lt;tt class="docutils literal"&gt;shamu&lt;/tt&gt;).  We have been using the stock AOSP mirrors since
the very beginning. But this year we decided to give CyanogenMod a try
(particularly because it is a huge pain to even get a working ROM for Nexus 6
using stock AOSP). But we still want the automated process of merging
experimental changes and do OTA updates.&lt;/p&gt;
&lt;p&gt;The goals of our mirror are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A simple &lt;tt class="docutils literal"&gt;repo init/repo sync&lt;/tt&gt; using our manifest should give you a working
code-base, meaning you can build a working ROM for Nexus 6 with it. No any
special tweaks needed on the experimenter's side.&lt;/li&gt;
&lt;li&gt;Each repo should have a common baseline branch (called
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;phonelab/cm-13.0/develop&lt;/span&gt;&lt;/tt&gt; that somebody can fork from and start making
experimental changes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="the-overall-picture"&gt;
&lt;h2&gt;The Overall Picture&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Produce a local clone that are suitable to server as a mirror&lt;/li&gt;
&lt;li&gt;Push this local clone to our Gerrit server&lt;/li&gt;
&lt;li&gt;Compose a proper repo manifest to point things to the right place.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="get-a-working-mirror-repo"&gt;
&lt;h2&gt;Get a Working Mirror Repo&lt;/h2&gt;
&lt;p&gt;We have chosen the latest stable CyanogenMod release for Nexus 6
(&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;stable/cm-13.0-ZNH2K&lt;/span&gt;&lt;/tt&gt;). The first trap is that: the default manifest does
not work if you want to create a mirror. In particular, CM has used shallow
clones (&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;clone-depth=&amp;quot;1&amp;quot;&lt;/span&gt;&lt;/tt&gt;) for certain repos. This is OK if you do not intent
to ever push the repo, but most likely Gerrit will complain about this and
eventually claim that these repos are corrupted because the history is not
complete.&lt;/p&gt;
&lt;p&gt;So the first step is to fork the CyanogenMod manifest (mine is here:
&lt;a class="reference external" href="https://github.com/jhshi/android"&gt;https://github.com/jhshi/android&lt;/a&gt;, check the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;stable/cm-13.0-ZNH2K&lt;/span&gt;&lt;/tt&gt; branch) and
remove any shallow clones. This can be done via this VIM command:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;%s:&lt;span class="sr"&gt;/clone-depth=&amp;quot;1&amp;quot; /&lt;/span&gt;/&lt;span class="k"&gt;g&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Also, since we are using a different manfiest repos, we also set the default
fetch URL to be an absolute path:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;remote name&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;github&amp;quot;&lt;/span&gt;
    fetch&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://github.com/&amp;quot;&lt;/span&gt;
    review&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;review.cyanogenmod.org&amp;quot;&lt;/span&gt; /&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Now, do a &lt;tt class="docutils literal"&gt;repo init&lt;/tt&gt; using this manifest.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;repo init -u https://github.com/jhshi/android -b stable/cm-13.0-ZNH2K
&lt;span class="nv"&gt;$ &lt;/span&gt;repo sync
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;This will download all repositories properly. After this finished, we need to
also grab the repos for our specific device.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source &lt;/span&gt;build/envsetup.sh
&lt;span class="nv"&gt;$ &lt;/span&gt;breakfast shamu
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;This will grab two extra repos:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;device/moto/shamu&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;kernel/moto/shamu&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The next step is to create a common baseline branch based on the current tip.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;repo forall -ec &lt;span class="s1"&gt;&amp;#39;echo $REPO_PATH; git checkout -b phonelab/cm-13.0/develop&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Then, we create the corresponding repositories on the Gerrit server. Here is the
second trap. In the CM manifest, there are several these projects:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;project&lt;/span&gt; &lt;span class="na"&gt;path=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hardware/qcom/audio-caf/apq8084&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CyanogenMod/android_hardware_qcom_audio&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;groups=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;qcom,qcom_audio&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;revision=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stable/cm-13.0-caf-8084-ZNH2K&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;project&lt;/span&gt; &lt;span class="na"&gt;path=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hardware/qcom/audio-caf/msm8916&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CyanogenMod/android_hardware_qcom_audio&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;groups=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;qcom,qcom_audio&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;revision=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stable/cm-13.0-caf-8916-ZNH2K&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;project&lt;/span&gt; &lt;span class="na"&gt;path=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hardware/qcom/audio-caf/msm8937&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CyanogenMod/android_hardware_qcom_audio&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;groups=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;qcom,qcom_audio&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;revision=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stable/cm-13.0-caf-8937-ZNH2K&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;project&lt;/span&gt; &lt;span class="na"&gt;path=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hardware/qcom/audio-caf/msm8952&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CyanogenMod/android_hardware_qcom_audio&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;groups=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;qcom,qcom_audio&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;revision=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stable/cm-13.0-caf-8952-ZNH2K&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;project&lt;/span&gt; &lt;span class="na"&gt;path=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hardware/qcom/audio-caf/msm8960&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CyanogenMod/android_hardware_qcom_audio&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;groups=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;qcom,qcom_audio&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;revision=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stable/cm-13.0-caf-8960-ZNH2K&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;project&lt;/span&gt; &lt;span class="na"&gt;path=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hardware/qcom/audio-caf/msm8974&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CyanogenMod/android_hardware_qcom_audio&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;groups=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;qcom,qcom_audio&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;revision=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stable/cm-13.0-caf-8974-ZNH2K&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;project&lt;/span&gt; &lt;span class="na"&gt;path=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hardware/qcom/audio-caf/msm8994&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CyanogenMod/android_hardware_qcom_audio&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;groups=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;qcom,qcom_audio&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;revision=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stable/cm-13.0-caf-8994-ZNH2K&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;project&lt;/span&gt; &lt;span class="na"&gt;path=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hardware/qcom/audio-caf/msm8996&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CyanogenMod/android_hardware_qcom_audio&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;groups=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;qcom,qcom_audio&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;revision=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stable/cm-13.0-caf-8996-ZNH2K&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;As you can see, they are in fact from the same remove repositories, just with
different revision name, and they are expected in different folders. Since we
want a common branch name for each repository, we have to create multiple
repositories on our server, so that we can let the same name
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;phonelab/cm-13.0/develop&lt;/span&gt;&lt;/tt&gt; to point to different commits. The key point here
is: &lt;tt class="docutils literal"&gt;name&lt;/tt&gt; is no longer a unique key to identify a project, but &lt;tt class="docutils literal"&gt;path&lt;/tt&gt; are.
So we will name the repos by their &lt;tt class="docutils literal"&gt;path&lt;/tt&gt;, not by &lt;tt class="docutils literal"&gt;name&lt;/tt&gt;.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;repo forall -ec &lt;span class="s1"&gt;&amp;#39;echo $REPO_PATH &amp;amp;&amp;amp; ssh -p 29418 user@server gerrit create-project cm-shamu/$REPO_PATH&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Note that I am using &lt;tt class="docutils literal"&gt;$REPO_PATH&lt;/tt&gt;, which is the local filesystem folder name,
rather than &lt;tt class="docutils literal"&gt;$REPO_NAME&lt;/tt&gt;. Also, all such repos are under the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;cm-shamu/&lt;/span&gt;&lt;/tt&gt; name
space on our server.&lt;/p&gt;
&lt;p&gt;Next, upload all those repos:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;repo forall -ec &lt;span class="s1"&gt;&amp;#39;echo $REPO_PATH &amp;amp;&amp;amp; git push user@server:29418/cm-shamu/$REPO_PATH refs/heads/*&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;This shall take a while.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="get-a-working-manifest"&gt;
&lt;h2&gt;Get a Working Manifest&lt;/h2&gt;
&lt;p&gt;Now all repos are in our Gerrit server, we need to compose a proper manifest for
&lt;tt class="docutils literal"&gt;repo init&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Start with the default manifest at &lt;a class="reference external" href="https://github.com/CyanogenMod/android"&gt;https://github.com/CyanogenMod/android&lt;/a&gt;. We
made these changes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;There should be only one remote called &lt;tt class="docutils literal"&gt;phonelab&lt;/tt&gt;, which points to our
Gerrit server.&lt;/li&gt;
&lt;li&gt;The default revision of every project should be &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;phonelab/cm-13.0/develop&lt;/span&gt;&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Remove any individual &lt;tt class="docutils literal"&gt;revision&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;remote&lt;/tt&gt; project attributes. This can
be done by this VIM command: &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;:%s/revision=&amp;quot;.\{-}&amp;quot;&lt;/span&gt; //g&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;:%s/remote=&amp;quot;.\{-}&amp;quot;&lt;/span&gt; //g&lt;/tt&gt;, where &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;.\{-}&lt;/span&gt;&lt;/tt&gt; is VIM's non-greedy regex syntax.&lt;/li&gt;
&lt;li&gt;Remove all &lt;tt class="docutils literal"&gt;name&lt;/tt&gt; attribute, since the name will be the path:
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;:%s/name=&amp;quot;.\{-}&amp;quot;&lt;/span&gt; //g&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Change &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;path=..&lt;/span&gt;&lt;/tt&gt; to be &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;name=..&lt;/span&gt;&lt;/tt&gt;: &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;:%s/path=/name=/g&lt;/span&gt;&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Change default fetch URL to be &lt;tt class="docutils literal"&gt;.&lt;/tt&gt; since the manifest and all other repos
are now in the same level.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I ended with this manifest:
&lt;a class="reference external" href="https://github.com/jhshi/cm.manifest.shamu/blob/phonelab/cm-13.0/develop/default.xml"&gt;https://github.com/jhshi/cm.manifest.shamu/blob/phonelab/cm-13.0/develop/default.xml&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Create a Gerrit project with the path &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;cm-shamu/manifest.git&lt;/span&gt;&lt;/tt&gt; and push the
modified manifest to it.&lt;/p&gt;
&lt;p&gt;At this point, anybody should be able to do a single &lt;tt class="docutils literal"&gt;repo init&lt;/tt&gt; using the
above manifest, and all repos will be pulled from our Gerrit server.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="CyanogenMod"></category><category term="mirror"></category><category term="aosp"></category><category term="repo"></category><category term="manifest"></category></entry><entry><title>Xilinx ISE INTERNAL_ERROR:Xst:cmain.c:3483:1.56.16.1</title><link href="http://jhshi.me/2016/08/01/xilinx-ise-internal_errorxstcmainc3483156161/index.html" rel="alternate"></link><updated>2016-08-01T11:34:14-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2016-08-01:2016/08/01/xilinx-ise-internal_errorxstcmainc3483156161/index.html</id><summary type="html">&lt;p&gt;I encountered this error a lot recently when trying to compile a customized
Verilog project for USRP N210 using Xilinx ISE 12.2. Here is one reason why this
error might happen from my experience.&lt;/p&gt;

&lt;p&gt;It seems ISE does not like it when you use indexed array items in module
instance port. For example:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;reg&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;31&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;ram&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mh"&gt;127&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kt"&gt;reg&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;6&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;some_module&lt;/span&gt; &lt;span class="n"&gt;m_inst&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clock&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ram&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
    &lt;span class="c1"&gt;// other ports&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;This will mostly probably cause the &lt;tt class="docutils literal"&gt;INTERNAL_ERROR&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The walk around is to use a dedicated wire for the port instead of a indexed
array item.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;reg&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;31&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;ram&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mh"&gt;127&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kt"&gt;reg&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;6&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;wire&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;31&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;the_input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ram&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="n"&gt;some_module&lt;/span&gt; &lt;span class="n"&gt;m_inst&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clock&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;the_input&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="c1"&gt;// other ports&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Apparently this is just &lt;strong&gt;one of the possible reasons&lt;/strong&gt; that could cause the
error, but definitely worth checking out if you're desperate after exhausting
out other possibilities.&lt;/p&gt;
</summary><category term="Xilinx"></category><category term="ISE"></category><category term="Verilog"></category></entry><entry><title>Setting Up USRPN2x0 in VirtualBox</title><link href="http://jhshi.me/2016/07/12/setting-up-usrpn2x0-in-virtualbox/index.html" rel="alternate"></link><updated>2016-07-12T13:58:33-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2016-07-12:2016/07/12/setting-up-usrpn2x0-in-virtualbox/index.html</id><summary type="html">&lt;p&gt;This post shows how to connect to USRP N2x0 from a Ubuntu guest OS inside
Virtualbox running on a Windows host.&lt;/p&gt;

&lt;div class="section" id="host-os"&gt;
&lt;h2&gt;Host OS&lt;/h2&gt;
&lt;p&gt;Here we assume you have a secondary Ethernet card that is physically connected
to the USRP N2x0.&lt;/p&gt;
&lt;p&gt;First, in VirtualBox's configuration window, click the &lt;tt class="docutils literal"&gt;Network&lt;/tt&gt; tab, and then
&lt;tt class="docutils literal"&gt;Adpater 2&lt;/tt&gt;. Leave &lt;tt class="docutils literal"&gt;Adapter 1&lt;/tt&gt; alone so that you still have Internet access
inside the VM.&lt;/p&gt;
&lt;img alt="VirtualBox Network Configuration" src="/images/vbox_network.png" /&gt;
&lt;p&gt;In &lt;tt class="docutils literal"&gt;Attached to&lt;/tt&gt;, choose &lt;tt class="docutils literal"&gt;Bridged Adapter&lt;/tt&gt; so that the VM has direct access
to the physical network adapter. Then in &lt;tt class="docutils literal"&gt;Name&lt;/tt&gt;, choose the secondary NIC that
is physically connected to the USRP.&lt;/p&gt;
&lt;p&gt;Save the configuration and boot into the guest OS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="guest-os"&gt;
&lt;h2&gt;Guest OS&lt;/h2&gt;
&lt;p&gt;Inside the guest Ubuntu OS, make sure the network adaptor is visible.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;ifconfig -a
&lt;/pre&gt;
&lt;p&gt;You should see two Ethernet interfaces: one for the &lt;tt class="docutils literal"&gt;Adapter 1&lt;/tt&gt; which provides
Internet access through NAT, and another for the &lt;tt class="docutils literal"&gt;Adapter 2&lt;/tt&gt; we just added. At
this point, there should be no IP address assigned to the second interface. In
my case, the two interfaces are &lt;tt class="docutils literal"&gt;enp0s3&lt;/tt&gt; (NAT) and &lt;tt class="docutils literal"&gt;enp0s8&lt;/tt&gt; (Bridged).
Adapt the names accordingly for your setup in following instructions.&lt;/p&gt;
&lt;p&gt;Next, assign an static IP address to &lt;tt class="docutils literal"&gt;enp0s8&lt;/tt&gt;. The default IP address for
USRPs are usually 192.168.10.2, so we set the IP address for &lt;tt class="docutils literal"&gt;enp0s8&lt;/tt&gt; to be in
the same subnet.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo ifconfig enp0s8 192.168.10.1
&lt;/pre&gt;
&lt;p&gt;Then, add a static route so that all packets in 192.168.10.0/24 subnet is routed
via the &lt;tt class="docutils literal"&gt;enp0s8&lt;/tt&gt; interface.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo ip route add 192.168.10.0/24 dev enp0s8
&lt;/pre&gt;
&lt;p&gt;Make sure that the newly added route is recognized by the kernel (the last line
of the following output).&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;ip route
default via 10.0.2.2 dev enp0s3  proto static  metric 100
10.0.2.0/24 dev enp0s3  proto kernel  scope link  src 10.0.2.15  metric 100
192.168.10.0/24 dev enp0s8  proto kernel  scope link  src 192.168.10.1
&lt;/pre&gt;
&lt;p&gt;Finally, bring up the interface and ping the USRP!&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo ifconfig enp0s8 up
&lt;span class="nv"&gt;$ &lt;/span&gt;ping 192.168.10.2
&lt;span class="nv"&gt;$ &lt;/span&gt;uhd_find_devices
&lt;/pre&gt;
&lt;p&gt;You should receive ping responses and &lt;tt class="docutils literal"&gt;uhd_find_devices&lt;/tt&gt; should be able to
find the USRP devices.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="USRP"></category><category term="N210"></category><category term="N200"></category><category term="VirtualBox"></category><category term="route"></category></entry><entry><title>Mounting Virtualbox Shared Folder on Boot</title><link href="http://jhshi.me/2016/07/12/mounting-virtualbox-shared-folder-on-boot/index.html" rel="alternate"></link><updated>2016-07-12T10:21:56-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2016-07-12:2016/07/12/mounting-virtualbox-shared-folder-on-boot/index.html</id><summary type="html">&lt;p&gt;Shared folder is a great feature of Virtualbox to share data between the host
and guest OS. This post shows how to mount the shared folder during boot on a
Ubuntu 16.04 guest OS running on Windows 10 host OS.&lt;/p&gt;

&lt;div class="section" id="setup-the-shared-folder"&gt;
&lt;h2&gt;Setup the Shared Folder&lt;/h2&gt;
&lt;p&gt;Suppose you want to share &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;D:\vbox_share&lt;/span&gt;&lt;/tt&gt; on the host OS to the guest OS.
First, open up the virtual machine configuration window in Virtualbox, in
&lt;tt class="docutils literal"&gt;Shared Folders&lt;/tt&gt; tab, click the add button, shown as follows.&lt;/p&gt;
&lt;img alt="Virtual Shared Folders Configuration" src="/images/vbox_share.png" /&gt;
&lt;p&gt;In the pop up windows, enter &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;D:\vbox_share&lt;/span&gt;&lt;/tt&gt; in the &lt;tt class="docutils literal"&gt;Folder Path&lt;/tt&gt; box --
this is the path to the folder on the &lt;strong&gt;host&lt;/strong&gt; OS. In &lt;tt class="docutils literal"&gt;Folder Name&lt;/tt&gt; box, give
an &lt;strong&gt;alias&lt;/strong&gt; to that folder which we will use later in guest OS. Here I use
&lt;tt class="docutils literal"&gt;vbox_share&lt;/tt&gt; as an example.&lt;/p&gt;
&lt;p&gt;Optionally, check the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Auto-mount&lt;/span&gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;Make Permarnent&lt;/tt&gt; box as you wish.&lt;/p&gt;
&lt;p&gt;Then, boot into your Ubuntu virtual machine, open a terminal, and use this
command to mount the shared folder. Here I assume the mount point is
&lt;tt class="docutils literal"&gt;/mnt/vbox_share&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo mount -t vboxsf vbox_share /mnt/vboxshare
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="mount-on-boot"&gt;
&lt;h2&gt;Mount on Boot&lt;/h2&gt;
&lt;p&gt;To mount the shared folder during boot, we need to do two things.&lt;/p&gt;
&lt;p&gt;First, add this entry to &lt;tt class="docutils literal"&gt;/etc/fstab&lt;/tt&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
vbox_share    /mnt/vbox_share  vboxsf  defaults    0   0
&lt;/pre&gt;
&lt;p&gt;Second, add this entry to &lt;tt class="docutils literal"&gt;/etc/modules&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
vboxsf
&lt;/pre&gt;
&lt;p&gt;This is because the &lt;tt class="docutils literal"&gt;vboxsf&lt;/tt&gt; module will not be loaded by Linux by default
during boot. Therefore the mounting will fail. Then entry in &lt;tt class="docutils literal"&gt;/etc/modules&lt;/tt&gt;
tells Linux to load the module first before trying to mount the shared folder.&lt;/p&gt;
&lt;p&gt;Thanks to this post: &lt;a class="reference external" href="http://askubuntu.com/questions/365346/virtualbox-shared-folder-mount-from-fstab-fails-works-once-bootup-is-complete"&gt;http://askubuntu.com/questions/365346/virtualbox-shared-folder-mount-from-fstab-fails-works-once-bootup-is-complete&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</summary><category term="virtualbox"></category><category term="ubuntu"></category><category term="shared folder"></category><category term="fstab"></category><category term="vboxsf"></category></entry><entry><title>Customize USRP N2x0 DSP RX Chain</title><link href="http://jhshi.me/2016/07/08/customize-usrp-n2x0-dsp-rx-chain/index.html" rel="alternate"></link><updated>2016-07-08T15:19:08-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2016-07-08:2016/07/08/customize-usrp-n2x0-dsp-rx-chain/index.html</id><summary type="html">&lt;p&gt;In one of my research projects, I need to develop some signal processing logic
that runs on the FPGA of the USRP, to meeting some delay and timing
requirements. Here is a general overview of the steps to customize the DSP Rx
chain of USRP N2x0 devices. Details of my particular customization will be
probably discussed in separate posts.&lt;/p&gt;

&lt;div class="section" id="dsp-rx-chain-overview"&gt;
&lt;h2&gt;DSP Rx Chain Overview&lt;/h2&gt;
&lt;p&gt;The spirit of Software Defined Radios is to push as much as of the signal
processing to the host PC, enabling easy development and fast prototyping and
easy. However, there are certain tasks that are just too timing/performance
sensitive to be put on the host PC. Therefore, USRPs has a FPGA on board to
perform several pre-processing of the signal samples before they are sent to the
host PC.&lt;/p&gt;
&lt;img alt="Pipeline of DSP Rx Chain" src="/images/dsp_rx_chain.png" /&gt;
&lt;p&gt;The above diagram shows the pipeline of the DSP receive chain on the FPGA. The
RF signal are sampled and converted by the ADC module, and the raw samples are
processed by the Rx Frontend module for scaling and converting the samples to
the familiar I/Q values.&lt;/p&gt;
&lt;p&gt;Next, the I/Q values (&lt;tt class="docutils literal"&gt;frontend_i, frontend_q&lt;/tt&gt;) are sent to a dummpy custom
module. By default, this Custom module just pipe the I/Q samples directly to
the Digital Down Converter (DDC) module to extract the baseband signal.&lt;/p&gt;
&lt;p&gt;Then the baseband signals (&lt;tt class="docutils literal"&gt;ddc_out_sample&lt;/tt&gt;) are passed into the Custom module
again, which in turn pass them directly to the VITA49 core, which will frame
these samples and send them to host PC.&lt;/p&gt;
&lt;p&gt;As we can clear see, the USRP FPGA framework already provides us a nice custom
valve where we can perform custom processing either before or after the DDC
stage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="enable-custom-build"&gt;
&lt;h2&gt;Enable Custom Build&lt;/h2&gt;
&lt;p&gt;By default, the Custom module is disabled. To enable it, we need to make the
following changes. Here we use the N200R4 as an example. The steps are the same
for other N2x0 devices.&lt;/p&gt;
&lt;p&gt;First, clone the USRP FPGA source (if you haven't done so).&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git clone git&amp;#64;github.com:EttusResearch/fpga.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;fpga/usrp2/top/N2x0/
&lt;/pre&gt;
&lt;p&gt;Next, make a copy the original Makefile.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;cp Makefile.N200R4 Makefile.N200R4.custom
&lt;/pre&gt;
&lt;p&gt;Then make these changes to &lt;tt class="docutils literal"&gt;Makefile.N200R4.custom&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class="code diff literal-block"&gt;
# use a differnet build directory
&lt;span class="gd"&gt;- BUILD_DIR = $(abspath build$(ISE)-N200R4)
&lt;/span&gt;&lt;span class="gi"&gt;+ BUILD_DIR = $(abspath build$(ISE)-N200R4-custom)
&lt;/span&gt;
# remove these two lines, as we will set them later
&lt;span class="gd"&gt;- CUSTOM_SRCS =
- CUSTOM_DEFS =
&lt;/span&gt;

# include a custom src list file that we will create later, this file sets
# the CUSTOM_SRCS variable
&lt;span class="gi"&gt;+ include ../../custom/Makefile.srcs
&lt;/span&gt;

# Enable the custom module using verilog macro
&lt;span class="gd"&gt;-&amp;quot;Verilog Macros&amp;quot; &amp;quot;LVDS=1|RX_DSP0_MODULE=custom_dsp_rx&amp;quot;
&lt;/span&gt;&lt;span class="gi"&gt;+&amp;quot;Verilog Macros&amp;quot; &amp;quot;LVDS=1|RX_DSP0_MODULE=custom_dsp_rx|RX_DSP1_MODULE=custom_dsp_rx&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Then in &lt;tt class="docutils literal"&gt;fpga/custom/&lt;/tt&gt; directory, create a file named &lt;tt class="docutils literal"&gt;Makefile.srcs&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class="code Makefile literal-block"&gt;
&lt;span class="nv"&gt;CUSTOM_SRCS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;abspath &lt;span class="k"&gt;$(&lt;/span&gt;addprefix &lt;span class="k"&gt;$(&lt;/span&gt;BASE_DIR&lt;span class="k"&gt;)&lt;/span&gt;/../custom/, &lt;span class="se"&gt;\
&lt;/span&gt;    custom_dsp_rx.v&lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="o"&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;As you continue the development, you'll probably create more Verilog modules.
Just add their file names here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="checkpoint"&gt;
&lt;h2&gt;Checkpoint&lt;/h2&gt;
&lt;p&gt;Now the build system will include the &lt;tt class="docutils literal"&gt;custom_dsp_rx.v&lt;/tt&gt; file. Before you do
any changes to that file, I suggest you compile the whole project for sanity
check.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;fpga/top/N2x0/
&lt;span class="nv"&gt;$ &lt;/span&gt;make -f Makefile.N200R4.custom clean bin
&lt;span class="nv"&gt;$ &lt;/span&gt;uhd_image_loader --args&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;type=usrp2&amp;quot;&lt;/span&gt; --fpga-path build-custom/u2plus.bin --fw-path path/to/your/firmware
&lt;/pre&gt;
&lt;p&gt;This should succeed and the functionality of the FPAG image should be exactly
the same as before since the default Custom module only passes through signals.&lt;/p&gt;
&lt;p&gt;Note: to flash the FPGA image, you'll also need a &lt;em&gt;compatible&lt;/em&gt; firmware image.
So I recommend you to clone the uhd and fpga repos and build them together.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="usrp"></category><category term="sdr"></category><category term="dsp"></category><category term="fpga"></category></entry><entry><title>Installing Tmux from Source (Non-Root)</title><link href="http://jhshi.me/2016/07/08/installing-tmux-from-source-non-root/index.html" rel="alternate"></link><updated>2016-07-08T14:03:40-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2016-07-08:2016/07/08/installing-tmux-from-source-non-root/index.html</id><summary type="html">&lt;p&gt;Recently I needed to install &lt;a class="reference external" href="https://tmux.github.io/"&gt;tmux&lt;/a&gt; on a server which runs some ancient RHEL
and I do not have sudo access to. Here is how I did it. In fact it has tmux
1.6 pre-installed, but my tmux configuration file is based on tmux 2.2, which
contains many options that are absent in earlier versions of tmux.&lt;/p&gt;

&lt;div class="section" id="libevent-setup"&gt;
&lt;h2&gt;Libevent Setup&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;libevent&lt;/tt&gt; will be most likely missing (as it is in my case). So first,
let's set it up. Download the tarball from &lt;a class="reference external" href="http://libevent.org/"&gt;http://libevent.org/&lt;/a&gt;, extract it,
configure and install.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;wget https://github.com/libevent/libevent/releases/download/release-2.0.22-stable/libevent-2.0.22-stable.tar.gz
&lt;span class="nv"&gt;$ &lt;/span&gt;tar xvf libevent-2.0.22-stable.tar.gz
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;libevent-2.0.22-stable
&lt;span class="nv"&gt;$ &lt;/span&gt;./configure --prefix&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;make &lt;span class="c"&gt;# use make -j 8 to speed it up if your machine is capable
&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;make install
&lt;/pre&gt;
&lt;p&gt;Note that since I do not have root access to this machine, I set the
installation prefix to be my home directory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tmux-setup"&gt;
&lt;h2&gt;Tmux Setup&lt;/h2&gt;
&lt;p&gt;Second, download the tmux source tarball from &lt;a class="reference external" href="https://tmux.github.io/"&gt;https://tmux.github.io/&lt;/a&gt;. As of
writing this blog, the latest version is 2.2.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;wget https://github.com/tmux/tmux/releases/download/2.2/tmux-2.2.tar.gz
&lt;span class="nv"&gt;$ &lt;/span&gt;tar xvf tmux-2.2
&lt;span class="nv"&gt;$ &lt;/span&gt;./configure --prefix&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt; &lt;span class="nv"&gt;CFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-I&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;/include&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;LDFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-L&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;/lib&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;make
&lt;span class="nv"&gt;$ &lt;/span&gt;make install
&lt;/pre&gt;
&lt;p&gt;Again, I set the installation prefix to be my home directory, and also tells
gcc where to find the &lt;tt class="docutils literal"&gt;libevent&lt;/tt&gt; headers and libraries using the &lt;tt class="docutils literal"&gt;CCFLAGS&lt;/tt&gt;
and &lt;tt class="docutils literal"&gt;LDFLAGS&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="path-setup"&gt;
&lt;h2&gt;$PATH Setup&lt;/h2&gt;
&lt;p&gt;After this, &lt;tt class="docutils literal"&gt;tmux&lt;/tt&gt; binary will be installed in &lt;tt class="docutils literal"&gt;$HOME/bin&lt;/tt&gt;. Finally, we need
to tweak the &lt;tt class="docutils literal"&gt;$PATH&lt;/tt&gt; variable a bit so that bash will find this binary before
the system one.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/bin:&lt;span class="nv"&gt;$PATH&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;You may want to also put the above line in your &lt;tt class="docutils literal"&gt;.bashrc&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Now you should be able to use the shiningly new tmux.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;tmux -V
tmux 2.2
&lt;/pre&gt;
&lt;/div&gt;
</summary><category term="tmux"></category><category term="libevent"></category></entry><entry><title>Zathura: PDF Viewer for VIM Lovers</title><link href="http://jhshi.me/2016/03/09/zathura-pdf-viewer-for-vim-lovers/index.html" rel="alternate"></link><updated>2016-03-09T15:07:33-05:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2016-03-09:2016/03/09/zathura-pdf-viewer-for-vim-lovers/index.html</id><summary type="html">&lt;p&gt;I have been looking for a PDF viewer on Linux platform that is lightweight,
keyboard driven. &lt;a class="reference external" href="https://wiki.gnome.org/Apps/Evince"&gt;Evince&lt;/a&gt; was once my favorite, until I met &lt;a class="reference external" href="https://pwmt.org/projects/zathura/"&gt;Zathura&lt;/a&gt;.&lt;/p&gt;

&lt;div class="section" id="highlights"&gt;
&lt;h2&gt;Highlights&lt;/h2&gt;
&lt;p&gt;Here a few features of Zathura that I really appreciate:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;Keyboard Driven&lt;/em&gt;: the keyboard shortcuts are very similar to Vim. A Vim user
will immediately feel at home when using Zathura.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Minimal Design&lt;/em&gt;: but has almost all features you would expect from any decent
PDF viewers. In particular, automatically reload the file if changes are
detected. This comes handy together with the continuous preview mode of
&lt;a class="reference external" href="http://users.phys.psu.edu/~collins/software/latexmk-jcc/"&gt;Latexmk&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Customizibility&lt;/em&gt;: similar to Vim, there is a &lt;tt class="docutils literal"&gt;zathurarc&lt;/tt&gt; which you can use
to customize Zathura.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;Use this command to install Zathura and set it to default PDF viewer.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get install zathura
&lt;span class="nv"&gt;$ &lt;/span&gt;mimeopen -d *.pdf
&lt;span class="c"&gt;# choose Zathura&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class="section" id="basic-usage"&gt;
&lt;h2&gt;Basic Usage&lt;/h2&gt;
&lt;p&gt;As I mentioned before, Zathura use almost the exact key mapping as Vim. For
example, &lt;tt class="docutils literal"&gt;j, k, h, l&lt;/tt&gt; for navigation, &lt;tt class="docutils literal"&gt;gg, GG&lt;/tt&gt; to go to the first or last
page, and &lt;tt class="docutils literal"&gt;J, K&lt;/tt&gt; for next and previous page. These are pretty much all you
need for basic PDF viewing.&lt;/p&gt;
&lt;p&gt;In particular, &lt;tt class="docutils literal"&gt;TAB&lt;/tt&gt; will show the table of content. For more keyboard
shortcuts, checkout the manual.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configuration"&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;You can configure Zathura using &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;$HOME/.config/zathura/zathurarc&lt;/span&gt;&lt;/tt&gt;. Here is my
&lt;tt class="docutils literal"&gt;zathurarc&lt;/tt&gt;.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# zoom and scroll step size&lt;/span&gt;
&lt;span class="nb"&gt;set &lt;/span&gt;zoom-step 20
&lt;span class="nb"&gt;set &lt;/span&gt;scroll-step 80

&lt;span class="c"&gt;# copy selection to system clipboard&lt;/span&gt;
&lt;span class="nb"&gt;set &lt;/span&gt;selection-clipboard clipboard

&lt;span class="c"&gt;# enable incremental search&lt;/span&gt;
&lt;span class="nb"&gt;set &lt;/span&gt;incremental-search &lt;span class="nb"&gt;true&lt;/span&gt;

&lt;span class="c"&gt;# zoom&lt;/span&gt;
map &amp;lt;C-i&amp;gt; zoom in
map &amp;lt;C-o&amp;gt; zoom out
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
</summary><category term="zathura"></category><category term="pdf viewer"></category><category term="vim"></category></entry><entry><title>Handle KeyboardInterrupt in Python MultiProcessing</title><link href="http://jhshi.me/2015/12/27/handle-keyboardinterrupt-in-python-multiprocessing/index.html" rel="alternate"></link><updated>2015-12-27T00:01:16-05:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2015-12-27:2015/12/27/handle-keyboardinterrupt-in-python-multiprocessing/index.html</id><summary type="html">&lt;p&gt;&lt;tt class="docutils literal"&gt;multiprocessing&lt;/tt&gt; is a convenient library to take the advantage of multiple
cores easily found in modern processes. The typical pattern is to spawn a bunch
of worker processes, and let them consume the data from a &lt;tt class="docutils literal"&gt;queue&lt;/tt&gt;. However,
when debugging, I usually found myself attempting to terminate the script using
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Ctrl-C&lt;/span&gt;&lt;/tt&gt; yet to find it has no effect.&lt;/p&gt;

&lt;div class="section" id="working-example"&gt;
&lt;h2&gt;Working Example&lt;/h2&gt;
&lt;p&gt;Here is a typical pattern to use &lt;tt class="docutils literal"&gt;multiprocssing.Process&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;multiprocess.Queue&lt;/tt&gt;.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;multiprocssing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;

            &lt;span class="c"&gt;# process item here&lt;/span&gt;

&lt;span class="n"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multiprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Queue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;workers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;multiprocssing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cpu_count&lt;/span&gt;&lt;span class="p"&gt;())]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;workers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;workers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join_thread&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Here we spawn a number of workers, and let each of them consume input from the
queue. Normally the main process gets stuck at the &lt;tt class="docutils literal"&gt;queue.join_thread()&lt;/tt&gt; function.
When you press &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Ctrl-C&lt;/span&gt;&lt;/tt&gt; while the script is running, the subprocesses will not
be terminated properly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="first-attempt"&gt;
&lt;h2&gt;First Attempt&lt;/h2&gt;
&lt;p&gt;My first try is to catch the &lt;tt class="docutils literal"&gt;KeyboardInterrupt&lt;/tt&gt; and the manually terminate the processes.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join_thread&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;KeyboardInterrupt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;workers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;terminate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;However, this won't work most of the time, especially when you have some serious
computing going on in each process.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="solution"&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;p&gt;Then I noticed the &lt;tt class="docutils literal"&gt;daemon&lt;/tt&gt; flag in the &lt;tt class="docutils literal"&gt;Process&lt;/tt&gt; document.&lt;/p&gt;
&lt;blockquote&gt;
When a process exits, it attempts to terminate all of its daemonic child
processes.&lt;/blockquote&gt;
&lt;p&gt;So I set each child process's &lt;tt class="docutils literal"&gt;daemon&lt;/tt&gt; attribute to be &lt;tt class="docutils literal"&gt;True&lt;/tt&gt;: they are not
creating sub-subprocesses anyway.&lt;/p&gt;
&lt;p&gt;Note that &lt;tt class="docutils literal"&gt;daemon&lt;/tt&gt; flag must be set BEFORE
calling the processes' &lt;tt class="docutils literal"&gt;start&lt;/tt&gt; function. Also, once the &lt;tt class="docutils literal"&gt;daemon&lt;/tt&gt; flag is
set, &lt;tt class="docutils literal"&gt;queue.join_thread()&lt;/tt&gt; does not work anymore: you'll have to call &lt;tt class="docutils literal"&gt;join&lt;/tt&gt;
for each worker.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;workers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;daemon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;workers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;KeyboardInterrupt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;workers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;terminate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
</summary><category term="multiprocessing"></category><category term="keyboardinterrupt"></category><category term="process"></category></entry><entry><title>Fix Screen Brightness Issue with ThinkPad X1 Carbon 3rd Edition</title><link href="http://jhshi.me/2015/12/15/fix-screen-brightness-issue-with-thinkpad-x1-carbon-3rd/index.html" rel="alternate"></link><updated>2015-12-15T00:04:41-05:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2015-12-15:2015/12/15/fix-screen-brightness-issue-with-thinkpad-x1-carbon-3rd/index.html</id><summary type="html">&lt;p&gt;I recently installed Ubuntu 14.04.3 LTS on my Thinkpad X1 carbon (3rd Edition).
Most of the stuff worked out of the box, yet the screen brightness adjustment
key has no effect.&lt;/p&gt;

&lt;p&gt;After Googling around, this solution works.&lt;/p&gt;
&lt;p&gt;Create a file named &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/usr/share/X11/xorg.conf.d/20-intel.conf&lt;/span&gt;&lt;/tt&gt;, with the
following content.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;Section&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Device&amp;quot;&lt;/span&gt;
        &lt;span class="nb"&gt;Identifier&lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;card0&amp;quot;&lt;/span&gt;
        &lt;span class="nb"&gt;Driver&lt;/span&gt;      &lt;span class="s2"&gt;&amp;quot;intel&amp;quot;&lt;/span&gt;
        &lt;span class="nb"&gt;Option&lt;/span&gt;      &lt;span class="s2"&gt;&amp;quot;Backlight&amp;quot;&lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;intel_backlight&amp;quot;&lt;/span&gt;
        &lt;span class="nb"&gt;BusID&lt;/span&gt;       &lt;span class="s2"&gt;&amp;quot;PCI:0:2:0&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;EndSection&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Thanks to this post.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://itsfoss.com/fix-brightness-ubuntu-1310/"&gt;http://itsfoss.com/fix-brightness-ubuntu-1310/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In fact, this issue is probably not related to this particular hardware. I found
another thread in &lt;a class="reference external" href="http://askubuntu.com/questions/599477/lenovo-x1-carbon-2015-3rd-gen-20-bs-trackpoint-clickpad-and-wifi"&gt;askubuntu.com&lt;/a&gt;. Yet the solution there did not work for me.&lt;/p&gt;
</summary><category term="thinkpad"></category><category term="carbon"></category><category term="ubunut"></category><category term="screen"></category><category term="brightness"></category></entry><entry><title>Troubleshooting Slow VIM Scrolling</title><link href="http://jhshi.me/2015/12/06/troubleshooting-slow-vim-scrolling/index.html" rel="alternate"></link><updated>2015-12-06T23:56:36-05:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2015-12-06:2015/12/06/troubleshooting-slow-vim-scrolling/index.html</id><summary type="html">&lt;p&gt;I was editing a LaTeX file using VIM and noticed that the scrolling is quite
slow. Here is how I troubleshoot it.&lt;/p&gt;

&lt;div class="section" id="the-symptom"&gt;
&lt;h2&gt;The Symptom&lt;/h2&gt;
&lt;p&gt;I made a small screen cast showing what I mean by &amp;quot;slow&amp;quot;. I opened the file,
moved the cursor to the first line, and then pressed and held &lt;tt class="docutils literal"&gt;j&lt;/tt&gt;, until the
cursor reached the end of the file. You can easily notice the lag starting from
around line 80.&lt;/p&gt;
&lt;img alt="Screencast of slow VIM scrolling." class="align-center" src="/images/vim_slow_scrolling.gif" /&gt;
&lt;/div&gt;
&lt;div class="section" id="first-attempt-plugins"&gt;
&lt;h2&gt;First Attempt: Plugins&lt;/h2&gt;
&lt;p&gt;At first, one could easily blame certain plugins (especially I recently
installed &lt;a class="reference external" href="https://github.com/Valloric/YouCompleteMe"&gt;YouCompleteMe&lt;/a&gt;). I used &lt;a class="reference external" href="https://github.com/VundleVim/Vundle.vim"&gt;Vundle&lt;/a&gt; to manage my plugins so it is
relatively easy to disable them. But this ends up nowhere: even after I disabled
all plugins, the problem still persists.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="troubleshooting"&gt;
&lt;h2&gt;Troubleshooting&lt;/h2&gt;
&lt;p&gt;I found an excellent guide from &lt;a class="reference external" href="http://vim.wikia.com/wiki/Troubleshooting"&gt;VIM Wiki&lt;/a&gt; about how to troubleshoot VIM
problems. Here are what I tried:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Run VIM without any customization---OK, no scrolling issue.&lt;/li&gt;
&lt;/ol&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;vim -N -u NONE -i NONE main.tex
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;Only load my &lt;tt class="docutils literal"&gt;.vimrc&lt;/tt&gt;---no luck, still sluggish.&lt;/li&gt;
&lt;/ol&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;vim -N --noplugin -i NONE main.tex
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;Binary searching issue inside &lt;tt class="docutils literal"&gt;.vimrc&lt;/tt&gt; using the &lt;tt class="docutils literal"&gt;finish&lt;/tt&gt; command, which
tells VIM to stop loading further commands.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Finally, I was able to pinpoint this line inside my &lt;tt class="docutils literal"&gt;.vimrc&lt;/tt&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;cursorline&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Then I did a &lt;tt class="docutils literal"&gt;:h cursorline&lt;/tt&gt; and found these:&lt;/p&gt;
&lt;blockquote&gt;
Highlight the screen line of the cursor with CursorLine
|hl-CursorLine|.  Useful to easily spot the cursor.  &lt;strong&gt;Will make screen
redrawing slower&lt;/strong&gt;.&lt;/blockquote&gt;
&lt;p&gt;I suspect because I do have several large chunks (16 by 16) of &lt;tt class="docutils literal"&gt;tabular&lt;/tt&gt;
environment inside the file, but it is still surprising that a modern computer
can not handle such seemingly simple text editing.&lt;/p&gt;
&lt;p&gt;I Googled online and did not found any useful solutions. I guess for now I will
just have to live with it. Fortunately I do not have many such LaTeX files.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="scroll"></category><category term="slow"></category><category term="cursorline"></category></entry><entry><title>Run Plex Media Server as Another User in Ubuntu</title><link href="http://jhshi.me/2015/12/05/run-plex-media-server-as-another-user-in-ubuntu/index.html" rel="alternate"></link><updated>2015-12-05T19:50:24-05:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2015-12-05:2015/12/05/run-plex-media-server-as-another-user-in-ubuntu/index.html</id><summary type="html">&lt;p&gt;Recently I installed &lt;a class="reference external" href="https://plex.tv/"&gt;Plex Media Server&lt;/a&gt; on my Ubuntu box. Here are what I did
to make it run as my user so that it can index any of my media files without
permission issues. The instructions here is for Ubuntu 14.04, but should be
applicable to later Ubuntu version as well.&lt;/p&gt;

&lt;p&gt;First, we need to tell Plex the user name it should run as.&lt;/p&gt;
&lt;p&gt;In &lt;tt class="docutils literal"&gt;/etc/default/plexmediaserver&lt;/tt&gt;, change the &lt;tt class="docutils literal"&gt;PLEX_MEDIA_SERVER_USER&lt;/tt&gt;
variable to the user name you want to run Plex as.&lt;/p&gt;
&lt;p&gt;Second, we need to change the owner of Plex's App support directory. By default,
it's &lt;tt class="docutils literal"&gt;/var/lib/plexmediaserver&lt;/tt&gt;. If in doubt, you can check the
&lt;tt class="docutils literal"&gt;PLEX_MEDIA_SERVER_APPLICATION_SUPPORT_DIR&lt;/tt&gt; variable in
&lt;tt class="docutils literal"&gt;/etc/systemd/system/plexmediaserver.service&lt;/tt&gt;.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo chown -R user:user /var/lib/plexmediaserver
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Finally, restart Plex server:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo service plexmediaserver stop
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo service plexmediaserver start
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Now make sure that the server is running as the user you specified:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ps aux &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s2"&gt;&amp;quot;plex&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</summary><category term="plex"></category></entry><entry><title>ACPI Error: Method parse/execution failed [_GPE._L6F]</title><link href="http://jhshi.me/2015/11/14/acpi-error-method-parseexecution-failed-_gpe_l6f/index.html" rel="alternate"></link><updated>2015-11-14T01:53:47-05:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2015-11-14:2015/11/14/acpi-error-method-parseexecution-failed-_gpe_l6f/index.html</id><summary type="html">&lt;p&gt;I recently built a PC based on Intel's latest Skylake CPU (&lt;a class="reference external" href="http://ark.intel.com/products/88184/Intel-Core-i5-6500-Processor-6M-Cache-up-to-3_60-GHz"&gt;i5-6500&lt;/a&gt;) and Z170
chipset (&lt;a class="reference external" href="http://www.asrock.com/mb/Intel/Z170%20Pro4/index.us.asp"&gt;AsRock Z170 Pro4&lt;/a&gt;), and installed Ubuntu 15.10 on it. After setting up,
however, I found that the kernel message buffer was flooded with this error
message. This is how I fixed it.&lt;/p&gt;

&lt;div class="section" id="tl-dr"&gt;
&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;This is how to fix it: add this line to &lt;tt class="docutils literal"&gt;/etc/rc.local&lt;/tt&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;disable&amp;quot;&lt;/span&gt; &amp;gt; /sys/firmware/acpi/interrupts/gpe6F
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Then reboot your PC, the error message should be gone. If you want to learn more
about how I came up with fix, keep reading.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-symptoms"&gt;
&lt;h2&gt;The Symptoms&lt;/h2&gt;
&lt;p&gt;As described earlier, after the system booted up, this error message flooded the
kernel ring buffer:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;[&lt;/span&gt;    0.922778&lt;span class="o"&gt;]&lt;/span&gt; ACPI Exception: AE_NOT_FOUND, &lt;span class="k"&gt;while&lt;/span&gt; evaluating GPE method &lt;span class="o"&gt;[&lt;/span&gt;_L6F&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;20150619/evgpe-592&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;    0.923906&lt;span class="o"&gt;]&lt;/span&gt; ACPI Error: &lt;span class="o"&gt;[&lt;/span&gt;PGRT&lt;span class="o"&gt;]&lt;/span&gt; Namespace lookup failure, AE_NOT_FOUND &lt;span class="o"&gt;(&lt;/span&gt;20150619/psargs-359&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;    0.923908&lt;span class="o"&gt;]&lt;/span&gt; ACPI Error: Method parse/execution failed &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="se"&gt;\_&lt;/span&gt;GPE._L6F&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;Node ffff8804654cd118&lt;span class="o"&gt;)&lt;/span&gt;, AE_NOT_FOUND &lt;span class="o"&gt;(&lt;/span&gt;20150619/psparse-536&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;These three error messages were printed over and over again, and the
&lt;tt class="docutils literal"&gt;/var/log/kern.log&lt;/tt&gt; file rapidly exceeds several GB in about half an hour.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="attempts"&gt;
&lt;h2&gt;Attempts&lt;/h2&gt;
&lt;p&gt;After Googling around, I found this kernel bug report that is exactly the same
problem:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://bugzilla.kernel.org/show_bug.cgi?id=105491"&gt;https://bugzilla.kernel.org/show_bug.cgi?id=105491&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It seems that adding &lt;tt class="docutils literal"&gt;acpi=off&lt;/tt&gt; to kernel arguments could eliminate this
error, but that will also disable all the ACPI functionality and the system
would not be shut down properly (got stuck when do a &lt;tt class="docutils literal"&gt;sudo reboot&lt;/tt&gt;).&lt;/p&gt;
&lt;p&gt;I also updated to the latest BIOS (&lt;tt class="docutils literal"&gt;v2.80&lt;/tt&gt;) from AsRock, that still does not
fix the problem.&lt;/p&gt;
&lt;p&gt;Finally, later on that thread, somebody mentioned that we could just disable the
GPE.L6F function by echoing &lt;tt class="docutils literal"&gt;disable&lt;/tt&gt; to a specific pseudo file in &lt;tt class="docutils literal"&gt;/sys&lt;/tt&gt;
directory, hence the solution mentioned earlier.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="acpi"></category><category term="linux"></category><category term="skylake"></category><category term="gpe"></category><category term="ubuntu"></category></entry><entry><title>Post Revision Plugin for Pelican</title><link href="http://jhshi.me/2015/10/13/post-revision-plugin-for-pelican/index.html" rel="alternate"></link><updated>2015-10-13T00:59:06-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2015-10-13:2015/10/13/post-revision-plugin-for-pelican/index.html</id><summary type="html">&lt;p&gt;I used to have a &lt;a class="reference external" href="/2013/11/17/post-revision-plugin-for-octopress/index.html"&gt;post revision plugin for Octopress&lt;/a&gt;
and I love it. Here is my effort to achieve the same effect in Pelican.&lt;/p&gt;

&lt;p&gt;For this purpose, I came up with this &lt;a class="reference external" href="https://github.com/jhshi/pelican.plugins.post_revision"&gt;post-revision&lt;/a&gt; plugin and also a
template in the &lt;a class="reference external" href="https://github.com/jhshi/pelican-bootstrap3"&gt;pelican-bootstrap3&lt;/a&gt; theme. The plugin generates some meta data
for each article that contains the history information. And the templates
consumes that meta data and present them in the HTML files.&lt;/p&gt;
&lt;div class="section" id="post-revision-plugin"&gt;
&lt;h2&gt;Post Revision Plugin&lt;/h2&gt;
&lt;p&gt;The plugin itself is quite straightforward. The article or page's file path on
the local file system can be accessed through the &lt;tt class="docutils literal"&gt;source_path&lt;/tt&gt; attribute.
After the site is generated (&lt;tt class="docutils literal"&gt;page_generator_finalized&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;article_generator_finalized&lt;/tt&gt; signal), we iterate through the articles and
pages, and do a &lt;tt class="docutils literal"&gt;git log&lt;/tt&gt; on them.&lt;/p&gt;
&lt;p&gt;For simplicity, right now we only store two piece of information for each Git
commit: date and commit message title (the first line). The commits are stored
as a list of &lt;tt class="docutils literal"&gt;(date, msg)&lt;/tt&gt; tuple in reverse order as the &lt;tt class="docutils literal"&gt;history&lt;/tt&gt;
attribute.&lt;/p&gt;
&lt;p&gt;Optionally, if you specified &lt;tt class="docutils literal"&gt;GITHUB_URL&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;PROJECT_ROOT&lt;/tt&gt; variables in
the configuration file, this plugin also generates a link to the Github commit
history page for the post, stored as &lt;tt class="docutils literal"&gt;github_history_url&lt;/tt&gt; attribute.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="templates"&gt;
&lt;h2&gt;Templates&lt;/h2&gt;
&lt;p&gt;Now we have the history meta data for the article, we can put it some where in
the article template. I used the &lt;a class="reference external" href="https://github.com/jhshi/pelican-bootstrap3"&gt;pelican-bootstrap3&lt;/a&gt; theme. And the history
information is in the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;post-revision.html&lt;/span&gt;&lt;/tt&gt; template:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;{% if article.history %}
&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;well&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;related-posts&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    {% if article.github_history_url %}
      &lt;span class="nt"&gt;&amp;lt;h4&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;article&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;github_history_url&lt;/span&gt; &lt;span class="err"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{{ POST_REVISION_TEXT|default(&amp;#39;Post History&amp;#39;) }}&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
    {% else %}
      &lt;span class="nt"&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;{{ POST_REVISION_TEXT|default(&amp;#39;Post History:&amp;#39;) }}&lt;span class="nt"&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
    {% endif %}

    {% for date, msg in article.history[:POST_HISTORY_MAX_COUNT|default(5)] %}
      &lt;span class="nt"&gt;&amp;lt;b&amp;gt;&lt;/span&gt;{{ date|strftime(&amp;quot;%A %I:%M %p, %B %d %Y&amp;quot;) }}&lt;span class="nt"&gt;&amp;lt;/b&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;p&amp;gt;&lt;/span&gt;{{ msg }}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    {% endfor %}
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
{% endif %}
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Here we have some more settings:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;POST_REVISION_TEXT&lt;/tt&gt; is the title of the post revision section.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;POST_HISTORY_MAX_COUNT&lt;/tt&gt; controls how many history items to show.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can see a working example down below.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="post revision"></category><category term="git"></category><category term="history"></category><category term="plugin"></category></entry><entry><title>Migrating from Octopress to Pelican</title><link href="http://jhshi.me/2015/10/11/migrating-from-octopress-to-pelican/index.html" rel="alternate"></link><updated>2015-10-11T21:53:54-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2015-10-11:2015/10/11/migrating-from-octopress-to-pelican/index.html</id><summary type="html">&lt;p&gt;Recently I migrated this blog site from &lt;a class="reference external" href="http://octopress.org/"&gt;Octopress&lt;/a&gt; to &lt;a class="reference external" href="http://docs.getpelican.com"&gt;Pelican&lt;/a&gt;. Here is why and
how.&lt;/p&gt;

&lt;div class="section" id="what-s-wrong-with-octopress"&gt;
&lt;h2&gt;What's Wrong with Octopress?&lt;/h2&gt;
&lt;p&gt;I have been using &lt;a class="reference external" href="http://octopress.org/"&gt;Octopress&lt;/a&gt; for a while (actually almost two years!) and it's
been working great. In fact, I even wrote a few Octopress plugins myself (e.g,
&lt;a class="reference external" href="http://github.com/jhshi/octopress-page-view"&gt;page-view&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/jhshi/octopress-post-revision"&gt;post-revision&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/jhshi/octopress-popular-posts"&gt;popular-posts&lt;/a&gt;) to make blogging easier.&lt;/p&gt;
&lt;p&gt;However, the major problem with Octopress is that &lt;strong&gt;building the site is super
slow&lt;/strong&gt;. Right now I have roughly 100 posts, and a build can take up to several
minutes to finish (vs. 9 seconds in Pelican). And I just can not stand it any more.&lt;/p&gt;
&lt;p&gt;Additionally, Octopress is based on &lt;a class="reference external" href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt;, which uses Ruby, which I am never a
fan of. And the author of Octopress promised to &lt;a class="reference external" href="http://octopress.org/2015/01/15/octopress-3.0-is-coming/"&gt;clean up the spaghetti layout
of the repository&lt;/a&gt;,
yet it seems takes forever to finish.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-pelican"&gt;
&lt;h2&gt;Why &lt;a class="reference external" href="http://docs.getpelican.com"&gt;Pelican&lt;/a&gt;?&lt;/h2&gt;
&lt;p&gt;Pelican has several great features that look very appeal to me:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Using &lt;a class="reference external" href="https://www.python.org/"&gt;Python&lt;/a&gt;---my favorite language.&lt;/li&gt;
&lt;li&gt;The framework is packaged cleanly as a single Python package, so I can use
&lt;a class="reference external" href="https://virtualenv.pypa.io/en/latest/"&gt;Virtualenv&lt;/a&gt; and all that great stuff from &lt;a class="reference external" href="https://www.python.org/"&gt;Python&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Support reStructuredText and Markdown, so it's potently easy to migrate from
Octopress.&lt;/li&gt;
&lt;li&gt;Because it uses &lt;a class="reference external" href="https://www.python.org/"&gt;Python&lt;/a&gt;, I might actually willing to fix a thing or two in
case it breaks.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="migration"&gt;
&lt;h2&gt;Migration&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pelican-quickstart&lt;/span&gt;&lt;/tt&gt; is great in set up a minimal working directory quickly.
After copying the posts from &lt;tt class="docutils literal"&gt;source/_posts&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;content&lt;/tt&gt;, there are a
couple of things to take care of.&lt;/p&gt;
&lt;div class="section" id="yaml-front-matter"&gt;
&lt;h3&gt;YAML Front Matter&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://octopress.org/"&gt;Octopress&lt;/a&gt; uses YAML front matter for post meta data, such as title, date, tags,
etc. Pelican can recognize most of them but &lt;tt class="docutils literal"&gt;tags&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;category&lt;/tt&gt;. More
specifically,&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;In &lt;a class="reference external" href="http://octopress.org/"&gt;Octopress&lt;/a&gt;, you can put a post in multiple categories using the
&lt;tt class="docutils literal"&gt;categories&lt;/tt&gt; attribute. But in Pelican, one post can only in one category
using the &lt;tt class="docutils literal"&gt;category&lt;/tt&gt; attribute. This may cause trouble if you had some post
in multiple categories in Octopress.&lt;/li&gt;
&lt;li&gt;Pelican can not recognize the YAML front matter for &lt;tt class="docutils literal"&gt;tags&lt;/tt&gt;, which is very
similar to a JSON array. For example, in Octopress, it's &lt;tt class="docutils literal"&gt;tags: [&amp;quot;tag1&amp;quot;,
&amp;quot;tag2&amp;quot;]&lt;/tt&gt;. In Pelican, it's &lt;tt class="docutils literal"&gt;tags: tag1; tag2&lt;/tt&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I fixed the first one by substituting all &lt;tt class="docutils literal"&gt;categories&lt;/tt&gt; with &lt;tt class="docutils literal"&gt;category&lt;/tt&gt;. Then
I tried to manually convert the YAML style array to Pelican style array using
&lt;tt class="docutils literal"&gt;sed&lt;/tt&gt;, which failed miserably.&lt;/p&gt;
&lt;p&gt;Then I found the &lt;a class="reference external" href="https://github.com/joachimneu/pelican-md-metayaml"&gt;md-metayaml&lt;/a&gt; Pelican plugin, which was exactly what I needed. Just
add &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;md-metayaml&lt;/span&gt;&lt;/tt&gt; to your &lt;tt class="docutils literal"&gt;PLUGINS&lt;/tt&gt; and boom, Pelican can now recognize YAML
front matter!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="liquid-tags"&gt;
&lt;h3&gt;Liquid Tags&lt;/h3&gt;
&lt;p&gt;Octopress uses Liquid Tags for multimedia resources, such as images, videos,
etc. Similar to YAML, there is also a &lt;a class="reference external" href="https://github.com/getpelican/pelican-plugins/tree/master/liquid_tags"&gt;liquid-tags&lt;/a&gt; plugin for Pelican. I mostly
use the &lt;tt class="docutils literal"&gt;img&lt;/tt&gt; tag, so I just added &lt;tt class="docutils literal"&gt;liqued_tags.img&lt;/tt&gt; to the &lt;tt class="docutils literal"&gt;PLUGINS&lt;/tt&gt;. You
can add others as well, such as &lt;tt class="docutils literal"&gt;youtube&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;video&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;However, there is one tags that I used before that is missing in &lt;a class="reference external" href="https://github.com/getpelican/pelican-plugins/tree/master/liquid_tags"&gt;liquid-tags&lt;/a&gt;
plugin---&lt;tt class="docutils literal"&gt;blockquote&lt;/tt&gt;. Fortunately, I only used this tag in one post and I
happily convert it using the standard Markdown block quote syntax.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary-text"&gt;
&lt;h3&gt;Summary Text&lt;/h3&gt;
&lt;p&gt;By default, Pelican uses a fixed number of words as the post summary. I prefer
the way that Octopress handles summary: explicitly use a excerpt separator
(&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;&amp;lt;!--&lt;/span&gt; more &lt;span class="pre"&gt;--&amp;gt;&lt;/span&gt;&lt;/tt&gt;) to control which part goes to the post summary (typically
first paragraph).&lt;/p&gt;
&lt;p&gt;Again, there is this &lt;a class="reference external" href="https://github.com/getpelican/pelican-plugins/tree/master/summary"&gt;summary&lt;/a&gt; plugin that does exactly as mentioned above. Just
put &lt;tt class="docutils literal"&gt;summary&lt;/tt&gt; in &lt;tt class="docutils literal"&gt;PLUGINS&lt;/tt&gt; and set &lt;tt class="docutils literal"&gt;SUMMARY_END_MARKER&lt;/tt&gt; to be
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;&amp;lt;!--&lt;/span&gt; more &lt;span class="pre"&gt;--&amp;gt;&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="url-pattern"&gt;
&lt;h3&gt;URL Pattern&lt;/h3&gt;
&lt;p&gt;This is probably just me: the URL pattern on this site is actually inherited
from the old days when I was using WordPress. Basically, the post URL is
something like &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/2015/10/11/title-slug/index.html&lt;/span&gt;&lt;/tt&gt;, which corresponds to
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;2015-10-11-title-slug.markdown&lt;/span&gt;&lt;/tt&gt; file in Octopress.&lt;/p&gt;
&lt;p&gt;First, we need to tell Pelican to obtain URL slug from the file name:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;FILENAME_METADATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;(?P&amp;lt;date&amp;gt;\d{4}-\d{2}-\d{2})-(?P&amp;lt;slug&amp;gt;.*)&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Then we set the article URL pattern:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ARTICLE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{date:%Y}/{date:%m}/{date:&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;}/{slug}/&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;ARTICLE_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{date:%Y}/{date:%m}/{date:&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;}/{slug}/index.html&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;div class="section" id="wrap-it-up"&gt;
&lt;h4&gt;Wrap It Up&lt;/h4&gt;
&lt;p&gt;At this point, we have done most of the migrations. There are couple of more
tweaks that makes Pelican works better:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Using a theme (I used &lt;a class="reference external" href="https://github.com/jhshi/pelican-bootstrap3"&gt;pelican-bootstrap3&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add some awesome plugins, such as &lt;a class="reference external" href="https://github.com/getpelican/pelican-plugins/tree/master/related_posts"&gt;related_posts&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/getpelican/pelican-plugins/tree/master/tag_cloud"&gt;tag_cloud&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/getpelican/pelican-plugins/tree/master/sitemap"&gt;sitemap&lt;/a&gt;, and
&lt;a class="reference external" href="https://github.com/getpelican/pelican-plugins/tree/master/tipue_search"&gt;tipue_search&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Enable monthly and yearly archives.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can see a full Pelican configuration file &lt;a class="reference external" href="https://github.com/jhshi/blog_source/blob/master/pelicanconf.py"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="pelican"></category><category term="blog"></category></entry><entry><title>Google Mobile Faculty Summit</title><link href="http://jhshi.me/2015/10/10/google-mobile-summit/index.html" rel="alternate"></link><updated>2015-10-10T13:38:37-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2015-10-10:2015/10/10/google-mobile-summit/index.html</id><summary type="html">&lt;p&gt;I have been attending the &lt;a href="https://goo.gl/bMCcJI"&gt;Google Mobile Summit&lt;/a&gt; for past two days. I'll
share some of the exciting projects that Google is doing as well as my personal
take away from them.&lt;/p&gt;


&lt;h2&gt;&lt;a href="https://goo.gl/gYKduQ"&gt;Project Loon&lt;/a&gt;: LTE by ... Baloons!&lt;/h2&gt;
&lt;p&gt;In a nutshell, this project wants to send a bunch of balloons to the
stratosphere to act as LTE cellular towers.&lt;/p&gt;
&lt;p&gt;Personally, I feel like the most exciting and interesting part is to navigate
the balloons by putting them up and down and leveraging the natural wind in
stratosphere to move the balloons to designated area. I can imagine a lot of
interesting research challenges there. In particular, I'm told that right now
they need to obtain the wind direction data and prediction from third-party
providers in order to plan the trajectory of the balloon. Instead, one might be
able to learn the wind direction in an online fashion by dispatching balloons to
different layers in the stratosphere for a short period of time. This may work
because the wind directions in the stratosphere only change very slowly (in
order of several hours), so such wind direction measurements can be usefully
even performed very infrequently.&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://goo.gl/YhS1JL"&gt;Physical Web&lt;/a&gt;: Cyberphysical Stuff&lt;/h2&gt;
&lt;p&gt;The essence of this project is to put a BLE beacon device in every physical
"things" that we may want to interact with, such as parking meters, movie
posters, etc. Theses beacons contain a short URL that will direct people various
web interfaces.&lt;/p&gt;
&lt;p&gt;At first glance, the idea is very similar to QR codes, or NFC tags. And indeed,
I think they are quite similar: a way to link physical beings to the cyber
world. I was not quite convinced why BLE beacons are better than NFC tags in any
meaningful ways. Maybe BLE is more pervasive? And NFC are usually absent in
high-end smartphones with metal back lids? I am not quite sure I buy these
arguments...&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://fi.google.com"&gt;Project Fi&lt;/a&gt;: AT&amp;amp;T, Verizon, Sprint, or... Google?&lt;/h2&gt;
&lt;p&gt;This is probably the most interesting project in this summit. Basically Google
wants to serve as a "virtual cellular provider" that unifies different physical
providers (such as Sprint, AT&amp;amp;T) and choose whichever is better for you behind
the scene. Most of all, it's cheap! $20/month base rate and $10/GB data rate, as
simple as that. And they even refund you for unused data packages! How cool is
that! Unfortunately, as of now you do need an invitation to join, and a latest
Nexus phone (Nexus 5X, 6P and 6).&lt;/p&gt;
&lt;p&gt;From research perspective, this project also touches several know hard problems,
most notably wireless handover, both between providers, and between Wifi and
LTE. The later may be simpler of the two, since the device can simultaneously
connect to Wifi and LTE to assess which one is better. However, since the device
only have one cellular radio, it can only connect to one LTE provider at a
time. Crowdsourcing may come in handy to determine the LTE quality based on
locations, etc.&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://www.google.com/atap/project-soli/"&gt;Project Soli&lt;/a&gt;: Ant Radar&lt;/h2&gt;
&lt;p&gt;They use 60GHz technologies to pack a tiny radar into wearable devices to enable
touch less interaction. The demo is quite cool. I am always skeptical of such RF
sensing stuff, now is Google is at it, maybe they can make it actually work...&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://en.wikipedia.org/wiki/Google_Contact_Lens"&gt;Project Iris&lt;/a&gt;: "Smart" Contact Lenses&lt;/h2&gt;
&lt;p&gt;OK, now Google tries to mess up with your contact lenses :-) Basically, they
developed this tiny tiny sensing system that can actually be embedded in the
contact lenses. The lenses now measures the glucose level in the tears for early
diabetes detection. It is amazing they may managed to pack so many stuff
(sensors, battery, antenna) in such small form factor. My only concern is
that...do the lenses heat up?&lt;/p&gt;</summary><category term="google"></category><category term="loon"></category><category term="nearme"></category></entry><entry><title>Build AOSP 5.1.1 for Nexus 5</title><link href="http://jhshi.me/2015/09/23/build-aosp-5-dot-1-1-for-nexus-5/index.html" rel="alternate"></link><updated>2015-09-23T17:47:36-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2015-09-23:2015/09/23/build-aosp-5-dot-1-1-for-nexus-5/index.html</id><summary type="html">&lt;p&gt;I this post I will talk about the &lt;em&gt;extra&lt;/em&gt; steps to build a &lt;em&gt;usable&lt;/em&gt; Lollipop
(5.1.1) ROM for LG Nexus 5 (hammerhead) device. Most of the functionalities work
out of box (bluetooh, Wifi tethering, camera, etc), but there are some
show-stoppers.&lt;/p&gt;


&lt;h1&gt;LGE Vendor Blobs&lt;/h1&gt;
&lt;p&gt;For some unknown reason, the &lt;a href="https://developers.google.com/android/nexus/drivers"&gt;official LGE vendor blobs&lt;/a&gt; does not work out of the
box, at least for Sprint phones. More specifically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;No cellular data connection.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No Sprint hidden menu app.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Can not update cellular profile and PRL. (Settings-&amp;gt;More-&amp;gt;Cellular
     Networks-&amp;gt;Carrier Settings)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I had this issue for KitKat before. Please refer to my &lt;a href="/2014/06/27/fix-data-connection-for-nexus-5-hammerhead-on-android-4-dot-4-4-kitkat/"&gt;previous post&lt;/a&gt; on
how I resolved it last time. Long story short, I repeated the steps there and
come up with a &lt;a href="https://github.com/jhshi/aosp.vendor_lge_hammerhead"&gt;LGE vendor blob repo&lt;/a&gt; that fixes the problems
mentioned above.&lt;/p&gt;
&lt;p&gt;Just clone the repo, put it in &lt;code&gt;/vendor/lge/&lt;/code&gt; directory in your AOSP root, and
check out the &lt;code&gt;for_android-5.1.1_r3&lt;/code&gt; tag.&lt;/p&gt;
&lt;p&gt;Apparently the repo was built specifically for &lt;code&gt;android-5.1.1_r3&lt;/code&gt; tag from AOSP, but
they should work for other 5.1.1 revisions as well. If not, just follow the
steps in my &lt;a href="/2014/06/27/fix-data-connection-for-nexus-5-hammerhead-on-android-4-dot-4-4-kitkat/"&gt;previous post&lt;/a&gt; to update the binaries.&lt;/p&gt;
&lt;h1&gt;Google Apps&lt;/h1&gt;
&lt;p&gt;By default, AOSP does no contain any Google apps and services, there are many
resources online. I put up a version in &lt;a href="https://github.com/jhshi/aosp.vendor_google_gapps"&gt;this repo&lt;/a&gt; which contains pretty
much most of the major Google apps and services.&lt;/p&gt;
&lt;p&gt;A special note: do not attempt to push too many Gapps, otherwise you could
easily exceed the 1GB limit on system partition size!&lt;/p&gt;
&lt;h1&gt;Fused Location Provider&lt;/h1&gt;
&lt;p&gt;Fused location provider let your phone get more accurate location much faster.
It is provided through Google services so it is not enabled by default in AOSP.&lt;/p&gt;
&lt;p&gt;This patch enables fused location service (in &lt;code&gt;device/lge/hammerhead&lt;/code&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gh"&gt;diff --git a/overlay/frameworks/base/core/res/res/values/config.xml b/overlay/frameworks/base/core/res/res/values/config.xml&lt;/span&gt;
&lt;span class="gh"&gt;index 8caef0c..a807ddc 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/overlay/frameworks/base/core/res/res/values/config.xml&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/overlay/frameworks/base/core/res/res/values/config.xml&lt;/span&gt;
&lt;span class="gu"&gt;@@ -287,4 +287,19 @@&lt;/span&gt;
         &amp;lt;item&amp;gt;hsupa:4094,87380,704512,4096,16384,110208&amp;lt;/item&amp;gt;
     &amp;lt;/string-array&amp;gt;

&lt;span class="gi"&gt;+    &amp;lt;!-- Enable overlay for all location components. --&amp;gt;&lt;/span&gt;
&lt;span class="gi"&gt;+    &amp;lt;bool name=&amp;quot;config_enableNetworkLocationOverlay&amp;quot; translatable=&amp;quot;false&amp;quot;&amp;gt;true&amp;lt;/bool&amp;gt;&lt;/span&gt;
&lt;span class="gi"&gt;+    &amp;lt;bool name=&amp;quot;config_enableFusedLocationOverlay&amp;quot; translatable=&amp;quot;false&amp;quot;&amp;gt;true&amp;lt;/bool&amp;gt;&lt;/span&gt;
&lt;span class="gi"&gt;+    &amp;lt;bool name=&amp;quot;config_enableGeocoderOverlay&amp;quot; translatable=&amp;quot;false&amp;quot;&amp;gt;true&amp;lt;/bool&amp;gt;&lt;/span&gt;
&lt;span class="gi"&gt;+    &amp;lt;bool name=&amp;quot;config_enableGeofenceOverlay&amp;quot; translatable=&amp;quot;false&amp;quot;&amp;gt;true&amp;lt;/bool&amp;gt;&lt;/span&gt;
&lt;span class="gi"&gt;+&lt;/span&gt;
&lt;span class="gi"&gt;+    &amp;lt;!--&lt;/span&gt;
&lt;span class="gi"&gt;+      Sets the package names whose certificates should be used to&lt;/span&gt;
&lt;span class="gi"&gt;+      verify location providers are allowed to be loaded.&lt;/span&gt;
&lt;span class="gi"&gt;+    --&amp;gt;&lt;/span&gt;
&lt;span class="gi"&gt;+    &amp;lt;string-array name=&amp;quot;config_locationProviderPackageNames&amp;quot; translatable=&amp;quot;false&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="gi"&gt;+      &amp;lt;item&amp;gt;com.google.android.gms&amp;lt;/item&amp;gt;&lt;/span&gt;
&lt;span class="gi"&gt;+      &amp;lt;item&amp;gt;com.android.location.fused&amp;lt;/item&amp;gt;&lt;/span&gt;
&lt;span class="gi"&gt;+    &amp;lt;/string-array&amp;gt;&lt;/span&gt;
 &amp;lt;/resources&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Build Kernel In-Tree&lt;/h1&gt;
&lt;p&gt;This is optional, but is a must if you want to do kernel development. Please
refer to my &lt;a href="/2014/06/30/build-kernel-in-tree-with-aosp-for-nexus-5-hammerhead/"&gt;previous post&lt;/a&gt; on how to integrate the kernel source into AOSP so
that it gets built together with the rest of AOSP.&lt;/p&gt;</summary><category term="aosp"></category><category term="lollipop"></category><category term="hammerhead"></category><category term="rom"></category></entry><entry><title>Bypass Android Lockscreen PIN Code Using Recovery and ADB</title><link href="http://jhshi.me/2015/06/01/bypass-android-lockscreen-pin-code-using-recovery-and-adb/index.html" rel="alternate"></link><updated>2015-06-01T16:38:16-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2015-06-01:2015/06/01/bypass-android-lockscreen-pin-code-using-recovery-and-adb/index.html</id><summary type="html">&lt;p&gt;One of the PhoneLab participants accidentally forgot the PIN code for his
phone, thus can not access the phone at all. There are tremendous tutorials online
on how to solve this. This is what I tested and worked.&lt;/p&gt;


&lt;p&gt;Since PhoneLab devices are flashed with Clockworkmod recovery, I reboot the
phone (Nexus 5) into recovery mode, mount &lt;code&gt;/system&lt;/code&gt; and &lt;code&gt;/data&lt;/code&gt; partitions, &lt;code&gt;adb
shell&lt;/code&gt; into the phone, and delete these two files: &lt;code&gt;/data/system/password.key&lt;/code&gt;
and &lt;code&gt;/data/system/gesture.key&lt;/code&gt;. Then the problem was fixed: no lock screen after
powering on the phone.&lt;/p&gt;
&lt;p&gt;These are two methods that I tried yet &lt;strong&gt;failed&lt;/strong&gt;. Both have something to do
with the &lt;code&gt;settings.db&lt;/code&gt; file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;adb shell
&lt;span class="nb"&gt;cd&lt;/span&gt; /data/data/com.android.providers.settings/databases
sqlite3 settings.db
update system &lt;span class="nb"&gt;set &lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; where &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lock_pattern_autolock&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
update system &lt;span class="nb"&gt;set &lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; where &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lockscreen.lockedoutpermanently&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
.quit
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And this one (from &lt;a href="http://forum.xda-developers.com/showthread.php?t=1409304"&gt;xda-developers forum&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;adb shell
sqlite3 /data/data/com.android.providers.settings/databases/settings.db
sqlite&amp;gt; update secure &lt;span class="nb"&gt;set &lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;65536&lt;/span&gt; where &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lockscreen.password_type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
sqlite&amp;gt; .exit
&lt;span class="c"&gt;# exit&lt;/span&gt;
adb reboot
&lt;/pre&gt;&lt;/div&gt;</summary><category term="PIN"></category><category term="recovery"></category><category term="adb"></category></entry><entry><title>Disable VIM Spell Checking for C String</title><link href="http://jhshi.me/2015/04/09/disable-vim-spell-checking-for-c-string/index.html" rel="alternate"></link><updated>2015-04-09T20:50:47-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2015-04-09:2015/04/09/disable-vim-spell-checking-for-c-string/index.html</id><summary type="html">&lt;p&gt;Vim has great built-in spell checking. Even better, when editing source code
files, it is smart enough to know not do spell checking in source code, which is
quite neat. However, it will still do spell checking for string literals. Most
of the times, this is not desired. This post shows how to tell VIM only do spell
checking in comments when editing code files. &lt;/p&gt;


&lt;p&gt;Vim figures out which region of the contents need spell checking by inferring the
syntax files. For example, for C files, the syntax file is located at
&lt;code&gt;/usr/share/vim/vim74/syntax/c.vim&lt;/code&gt;. There, you will find several lines that
defines the &lt;code&gt;cString&lt;/code&gt; region. One example is the following line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;syn region  cString     start=+L\=&amp;quot;+ skip=+\\\\\|\\&amp;quot;+ end=+&amp;quot;+ contains=cSpecial,@Spell extend
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You'll notice that at the end, it says &lt;code&gt;@Spell&lt;/code&gt;, which tells VIM that the string
literals need spell check.&lt;/p&gt;
&lt;p&gt;To override this behavior, and let VIM leave string literals alone when do spell
checking, we can change the definition of &lt;code&gt;cString&lt;/code&gt; in our own syntax files.&lt;/p&gt;
&lt;p&gt;For instance, you can put these lines in &lt;code&gt;~/.vim/after/syntax/c.vim&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;if exists(&amp;quot;c_no_cformat&amp;quot;)
  syn region    cString     start=+L\=&amp;quot;+ skip=+\\\\\|\\&amp;quot;+ end=+&amp;quot;+ contains=cSpecial
else
  syn region    cString     start=+L\=&amp;quot;+ skip=+\\\\\|\\&amp;quot;+ end=+&amp;quot;+ contains=cSpecial,cFormat
endif

if !exists(&amp;quot;c_no_c11&amp;quot;) &amp;quot; ISO C11
  if exists(&amp;quot;c_no_cformat&amp;quot;)
    syn region  cString     start=+\%(U\|u8\=\)&amp;quot;+ skip=+\\\\\|\\&amp;quot;+ end=+&amp;quot;+ contains=cSpecial
  else
    syn region  cString     start=+\%(U\|u8\=\)&amp;quot;+ skip=+\\\\\|\\&amp;quot;+ end=+&amp;quot;+ contains=cSpecial,cFormat
  endif
endif
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;They are almost identical to the default definition in
&lt;code&gt;/usr/share/vim/vim74/syntax/c.vim&lt;/code&gt;, just the trailing &lt;code&gt;@Spell&lt;/code&gt;s are removed.&lt;/p&gt;
&lt;p&gt;This technique can also be applied to other languages, such as python or Java.&lt;/p&gt;</summary><category term="spell"></category></entry><entry><title>Fix MAC Address Clone in OpenWRT</title><link href="http://jhshi.me/2015/01/19/fix-mac-address-clone-in-openwrt/index.html" rel="alternate"></link><updated>2015-01-19T17:09:44-05:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2015-01-19:2015/01/19/fix-mac-address-clone-in-openwrt/index.html</id><summary type="html">&lt;p&gt;I used to be able to change the MAC address of WAN interface by specifying
&lt;code&gt;macaddr&lt;/code&gt; option in &lt;code&gt;/etc/config/network&lt;/code&gt;. However, due to &lt;a href="https://dev.openwrt.org/ticket/18488"&gt;unknown reason&lt;/a&gt;,
this no longer works in snapshot builds. Here is how to achieve the same effect
using init scripts.&lt;/p&gt;


&lt;p&gt;In my router (TP-LINK WDR3500), &lt;code&gt;eth1&lt;/code&gt; is the WAN interface. Adjust this
according to you case.&lt;/p&gt;
&lt;p&gt;First, verify that you can change WAN interface's MAC address using &lt;code&gt;ifconfig&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;root@OpenWrt:~# ifconfig eth1 down
root@OpenWrt:~# ifconfig eth1 hw ether XX:XX:XX:XX:XX:XX
root@OpenWrt:~# ifconfig eth1 up
root@OpenWrt:~# ifconfig eth1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Substitute &lt;code&gt;XX:XX:XX:XX:XX:XX&lt;/code&gt; with the MAC address you want to clone, and check
the output of the last command to make sure the new MAC address is used.&lt;/p&gt;
&lt;p&gt;Next we want to automatically override the MAC address when system boots up. We
can use the init scripts. Edit &lt;code&gt;/etc/init.d/clonemac&lt;/code&gt; and put the following content in it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/sh /etc/rc.common&lt;/span&gt;
&lt;span class="c"&gt;# Copyright (C) 2014 OpenWrt.org&lt;/span&gt;

&lt;span class="nv"&gt;START&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;94
&lt;span class="nv"&gt;STOP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;15

start&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    ifconfig eth1 down
    ifconfig eth1 hw ether XX:XX:XX:XX:XX:XX
    ifconfig eth1 up
&lt;span class="o"&gt;}&lt;/span&gt;

stop&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Stop.&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For details of OpenWrt init script, please check the &lt;a href="http://wiki.openwrt.org/doc/techref/initscripts"&gt;document&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Make the script executable, then we can change the MAC address simply by this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;root@OpenWrt:~# /etc/init.d/clonemac start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To execute the script automatically on system boot, we need to enable it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;root@OpenWrt:~# /etc/init.d/clonemac &lt;span class="nb"&gt;enable&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will create a symbolic link to the &lt;code&gt;clonemac&lt;/code&gt; script in &lt;code&gt;/etc/rc.d&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Reboot the router and you will find the new MAC address be automatically used.&lt;/p&gt;</summary><category term="macaddr"></category><category term="openwrt"></category><category term="hwaddr"></category><category term="clone"></category><category term="overriding"></category></entry><entry><title>Benchmark Android File System Using IOzone</title><link href="http://jhshi.me/2014/12/31/benchmarking-android-file-system-using-iozone/index.html" rel="alternate"></link><updated>2014-12-31T12:21:17-05:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2014-12-31:2014/12/31/benchmarking-android-file-system-using-iozone/index.html</id><summary type="html">&lt;p&gt;&lt;a href="http://www.iozone.org/"&gt;IOzone&lt;/a&gt; is a famous file system benchmark tool in *nix world. In this
post, I'll show you how to port it to Android and how to use it to benchmark
both flash and Ramdisk's performance.&lt;/p&gt;


&lt;h3&gt;Build IOZone with AOSP&lt;/h3&gt;
&lt;p&gt;I work on AOSP tree on daily basis, so it's handy for me to incorporate it into
AOSP tree to take advantage of the AOSP tool chain. The key part is to come up
with a appropriate &lt;code&gt;Android.mk&lt;/code&gt; file so that it gets built along with other
sub-projects of AOSP.&lt;/p&gt;
&lt;p&gt;First, download IOzone source tarball from its website. I'm using the latest
tarball as of now (12/31/2014) with version 3.429. Then extract it to
&lt;code&gt;external/iozone&lt;/code&gt;--the usual place where we put all external upstream repos.&lt;/p&gt;
&lt;p&gt;Add a &lt;code&gt;Android.mk&lt;/code&gt; file like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;LOCAL_PATH&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;call my-dir&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;include $(CLEAR_VARS)&lt;/span&gt;

&lt;span class="nv"&gt;OBJS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; iozone.o libbif.o

&lt;span class="nv"&gt;ALL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; iozone

&lt;span class="nf"&gt;%.o&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; %.&lt;span class="n"&gt;c&lt;/span&gt;
    @&lt;span class="k"&gt;$(&lt;/span&gt;NQ&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; CC  &amp;#39;&lt;/span&gt; &lt;span class="nv"&gt;$@&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;Q&lt;span class="k"&gt;)$(&lt;/span&gt;CC&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;CFLAGS&lt;span class="k"&gt;)&lt;/span&gt; -c -o &lt;span class="nv"&gt;$@&lt;/span&gt; &lt;span class="nv"&gt;$&amp;lt;&lt;/span&gt;

&lt;span class="nf"&gt;iozone&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;OBJS&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;CC&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;LDFLAGS&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;OBJS&lt;span class="k"&gt;)&lt;/span&gt; -lrt -lpthread -o iozone

&lt;span class="nv"&gt;LOCAL_SRC_FILES&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;patsubst %.o,%.c,&lt;span class="k"&gt;$(&lt;/span&gt;OBJS&lt;span class="k"&gt;))&lt;/span&gt;

&lt;span class="nv"&gt;LOCAL_CFLAGS&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; -Wall -DANDROID -DO_RSYNC&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; -DNO_THREADS
&lt;span class="nv"&gt;LOCAL_CFLAGS&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; -O3 -Dunix -DHAVE_ANSIC_C -DNAME&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;linux-arm&amp;quot;&amp;#39;&lt;/span&gt; -DLINUX_ARM -Dlinux 

&lt;span class="nv"&gt;LOCAL_C_INCLUDES&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;KERNEL_HEADERS&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;LOCAL_LDFLAGS&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; -Wl,--no-fatal-warnings
&lt;span class="nv"&gt;LOCAL_MODULE_TAGS&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; eng
&lt;span class="nv"&gt;LOCAL_SHARED_LIBRARIES&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; libc
&lt;span class="nv"&gt;LOCAL_LDLIBS&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; -lpthread
&lt;span class="nv"&gt;LOCAL_MODULE&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; iozone

&lt;span class="cp"&gt;include $(BUILD_EXECUTABLE)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Changes against the original &lt;code&gt;Makefile&lt;/code&gt; that comes with the source code are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do not build &lt;code&gt;fileop.c&lt;/code&gt;, &lt;code&gt;libasync.c&lt;/code&gt; and &lt;code&gt;pit_server.c&lt;/code&gt;. They're not
     compatible with AOSP source and we will not use them anyway.&lt;/li&gt;
&lt;li&gt;Define &lt;code&gt;ANDROID&lt;/code&gt; in &lt;code&gt;CFLAGS&lt;/code&gt;, which we'll use for some minor changes
     to the source code later.&lt;/li&gt;
&lt;li&gt;Define &lt;code&gt;O_RSYNC&lt;/code&gt;, somehow this flag definition is missing in AOSP's
     &lt;code&gt;fcntl.h&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The second part of &lt;code&gt;CFLAGS&lt;/code&gt; is copied from the original &lt;code&gt;Makefile&lt;/code&gt;'s
     &lt;code&gt;linux-arm&lt;/code&gt; target.&lt;/li&gt;
&lt;li&gt;Add user space kernel headers to include path.&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;libc&lt;/code&gt; and &lt;code&gt;libpthread&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then we need to modify the source code a little bit to cope of AOSP's header files.&lt;/p&gt;
&lt;p&gt;Changes for &lt;code&gt;iozone.c&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gh"&gt;diff --git a/iozone.c b/iozone.c&lt;/span&gt;
&lt;span class="gh"&gt;index 85fdea0..36de106 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/iozone.c&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/iozone.c&lt;/span&gt;
&lt;span class="gu"&gt;@@ -403,8 +403,12 @@ typedef long long off64_t;&lt;/span&gt;
 #include &amp;lt;sys/time.h&amp;gt;

 #ifdef SHARED_MEM
&lt;span class="gi"&gt;+#ifdef ANDROID&lt;/span&gt;
&lt;span class="gi"&gt;+#include &amp;lt;linux/shm.h&amp;gt;&lt;/span&gt;
&lt;span class="gi"&gt;+#else&lt;/span&gt;
 #include &amp;lt;sys/shm.h&amp;gt;
 #endif
&lt;span class="gi"&gt;+#endif&lt;/span&gt;

 #if defined(bsd4_2) &amp;amp;&amp;amp; !defined(MS_SYNC)
 #define MS_SYNC 0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Changes for &lt;code&gt;libbif.c&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gh"&gt;diff --git a/libbif.c b/libbif.c&lt;/span&gt;
&lt;span class="gh"&gt;index 890e226..f997e74 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/libbif.c&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/libbif.c&lt;/span&gt;
&lt;span class="gu"&gt;@@ -17,7 +17,7 @@&lt;/span&gt;
 #include &amp;lt;sys/types.h&amp;gt;
 #include &amp;lt;stdio.h&amp;gt;
 #include &amp;lt;sys/file.h&amp;gt;
&lt;span class="gd"&gt;-#if defined(__AIX__) || defined(__FreeBSD__) || defined(__DragonFly__)&lt;/span&gt;
&lt;span class="gi"&gt;+#if defined(__AIX__) || defined(__FreeBSD__) || defined(__DragonFly__) || defined(ANDROID)&lt;/span&gt;
 #include &amp;lt;fcntl.h&amp;gt;
 #else
 #include &amp;lt;sys/fcntl.h&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, add &lt;code&gt;iozone&lt;/code&gt; to your &lt;code&gt;PRODUCT_PACKAGES&lt;/code&gt; so that it gets built when you
do &lt;code&gt;make&lt;/code&gt; in AOSP root directory.&lt;/p&gt;
&lt;h3&gt;Benchmark Results&lt;/h3&gt;
&lt;p&gt;IOZone has a bunch of options. You can find the full document &lt;a href="http://www.iozone.org/docs/IOzone_msword_98.pdf"&gt;here&lt;/a&gt;. The
options I used in this benchmark are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-a&lt;/code&gt;: auto mode.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-z&lt;/code&gt;: test all record size. In particular, for larger files, test with small
     record sizes (4K, 8K, etc.)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-n 4k&lt;/code&gt;: specify minimum file size to test.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-g 512m&lt;/code&gt;: specify maximum file size to test.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-e&lt;/code&gt;: include &lt;code&gt;fsync&lt;/code&gt; and &lt;code&gt;fflush&lt;/code&gt; when calculating time.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-o&lt;/code&gt;: force write synchronously to disk.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p&lt;/code&gt;: purge cache before each file operation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-f&lt;/code&gt;: specify test file path. I tested with both &lt;code&gt;/sdcard/test.bin&lt;/code&gt; for flash and
     &lt;code&gt;/mnt/asec&lt;/code&gt; for Ramdisk (or tmpfs).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The smartphone I used is Nexus 5 (hammerhead) running Android 4.4.4 KitKat.
Here are the results:&lt;/p&gt;
&lt;p&gt;Flash Read:
&lt;img src="/images/flash_read.png" alt="center" title="center"&gt;&lt;/p&gt;
&lt;p&gt;Flash Write:
&lt;img src="/images/flash_write.png" alt="center" title="center"&gt;&lt;/p&gt;
&lt;p&gt;Ramdisk Read:
&lt;img src="/images/ramdisk_read.png" alt="center" title="center"&gt;&lt;/p&gt;
&lt;p&gt;Ramdisk Write:
&lt;img src="/images/ramdisk_write.png" alt="center" title="center"&gt;&lt;/p&gt;
&lt;p&gt;We can see that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The overall bandwidth with flash fluctuates a lot with different file or record
     size. While the bandwidths for Ramdisk are quite stable.&lt;/li&gt;
&lt;li&gt;As expected, the read throughput of flash is much better than write.&lt;/li&gt;
&lt;li&gt;The bandwidth of Ramdisk can be faster than flash in order of magnitudes.&lt;/li&gt;
&lt;li&gt;One particularly interesting phenomena is that, for flash read, when the
     record size is equal to the file size (4k-16M), the bandwidth is ridiculously high
     (~500MB/s). Not sure about the reason yet.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="iozone"></category><category term="benchmark"></category><category term="flash"></category><category term="ramdisk"></category></entry><entry><title>Mailman Configuration with Nginx+FastCGI+Postfix on Ubuntu</title><link href="http://jhshi.me/2014/11/16/mailman-configuration-with-nginx-plus-fastcgi-plus-postfix-on-ubuntu/index.html" rel="alternate"></link><updated>2014-11-16T13:02:25-05:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2014-11-16:2014/11/16/mailman-configuration-with-nginx-plus-fastcgi-plus-postfix-on-ubuntu/index.html</id><summary type="html">&lt;p&gt;Here are the steps and caveats to setup a proper mail list on Ubuntu server. The
instructions are are for Ubuntu 14.04 LTS, and should be easy to adapt for other
platforms.&lt;/p&gt;


&lt;h2&gt;Assumptions&lt;/h2&gt;
&lt;p&gt;Here we assume the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You have an domain, &lt;code&gt;example.com&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You want to mail list running at machine with host name &lt;code&gt;lists.example.com&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The mail list address should look like &lt;code&gt;somelist@example.com&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You have setup the &lt;a href="http://en.wikipedia.org/wiki/MX_record"&gt;DNS MX record&lt;/a&gt; for &lt;code&gt;example.com&lt;/code&gt; to point to
     &lt;code&gt;lists.example.com&lt;/code&gt;. Please use &lt;a href="http://mxtoolbox.com/SuperTool.aspx"&gt;MX Toolbox&lt;/a&gt; to double check.&lt;/li&gt;
&lt;li&gt;You already have a Nginx server up and running at &lt;code&gt;lists.exmaple.com&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;Before we dive in the setup, here is the role of each tool:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nginx: HTTP server, provide Mailman web interface.&lt;/li&gt;
&lt;li&gt;FastCGI: CGI tool, dynamically generate Mailman HTML pages.&lt;/li&gt;
&lt;li&gt;Postfix: Mail Transfer Agent, we use it to actually send and receive emails.&lt;/li&gt;
&lt;li&gt;Mailman: Mail list tool, member management.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Suppose you send a email to &lt;code&gt;somelist@example.com&lt;/code&gt;. Here are what will happen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You email provider, say Gmail, queries the MX record of &lt;code&gt;example.com&lt;/code&gt;, figure
     out is actually the IP address of &lt;code&gt;lists.example.com&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Gmail send the email to &lt;code&gt;lists.example.com&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Postfix receives the email, and route this to Mailman.&lt;/li&gt;
&lt;li&gt;Mailman figure out who are in this list, then tell Postfix to forward the
     email to them.&lt;/li&gt;
&lt;li&gt;List members receive this email sent by Postfix.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Package Installation&lt;/h2&gt;
&lt;h4&gt;FastCGI&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get install fcgiwrap
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Open &lt;code&gt;/etc/init.d/fcgiwrap&lt;/code&gt;, make sure &lt;code&gt;FCGI_USER&lt;/code&gt; and &lt;code&gt;FCGI_GROUP&lt;/code&gt; are both
&lt;code&gt;www-data&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Mailman&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get install mailman
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;During installation, choose language support, say &lt;code&gt;en&lt;/code&gt;. The instructions will
also tell you to create a &lt;code&gt;mailman&lt;/code&gt; list. &lt;strong&gt;Do NOT do this yet&lt;/strong&gt;, we will create the
list later, after we configured mailman properly.&lt;/p&gt;
&lt;h4&gt;Postfix&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get install postfix
&lt;span class="c"&gt;# or this if you have installed postfix&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo dpkg-reconfigure postfix
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Make sure you choose the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;General type of mail configuration: &lt;strong&gt;Internet Site&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;System mail name: &lt;strong&gt;example.com&lt;/strong&gt; (without &lt;code&gt;lists&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Root and postmaster mail recipient: you Linux user name on &lt;code&gt;lists.example.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Other destinations to accept mail for: make sure &lt;code&gt;example.com&lt;/code&gt; is there.&lt;/li&gt;
&lt;li&gt;Force synchronous updates on mail queue: No.&lt;/li&gt;
&lt;li&gt;Local networks: make sure &lt;code&gt;example.com&lt;/code&gt; is there.&lt;/li&gt;
&lt;li&gt;Mailbox size limit: 0.&lt;/li&gt;
&lt;li&gt;Local address extension character: &lt;code&gt;+&lt;/code&gt; (the plus sign).&lt;/li&gt;
&lt;li&gt;Internet protocols to use: all.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Nginx Configuration&lt;/h2&gt;
&lt;p&gt;In &lt;code&gt;/etc/nginx/fastcgi_params&lt;/code&gt;, comment out this line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;fastcgi_param SCRIPT_FILENAME &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;request_filename&lt;/span&gt;&lt;span class="x"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Suppose your web server is configured in &lt;code&gt;/etc/nginx/sites-available/www&lt;/code&gt;, add
these lines to you server configuration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;mailman&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;                                                            
  &lt;span class="n"&gt;root&lt;/span&gt;  &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cgi&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                                                      
  &lt;span class="n"&gt;fastcgi_split_path_info&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;^/&lt;/span&gt;&lt;span class="n"&gt;mailman&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="p"&gt;^&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="o"&gt;/.*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                             
  &lt;span class="n"&gt;fastcgi_pass&lt;/span&gt;  &lt;span class="n"&gt;unix&lt;/span&gt;&lt;span class="o"&gt;:///&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;fcgiwrap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                               
  &lt;span class="n"&gt;include&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;fastcgi_params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                                           
  &lt;span class="n"&gt;fastcgi_param&lt;/span&gt; &lt;span class="n"&gt;SCRIPT_FILENAME&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;document_root&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;fastcgi_script_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;            
  &lt;span class="n"&gt;fastcgi_param&lt;/span&gt; &lt;span class="n"&gt;PATH_INFO&lt;/span&gt;       &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;fastcgi_path_info&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                            
&lt;span class="p"&gt;}&lt;/span&gt;                                                                              
&lt;span class="nt"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;images&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;mailman&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;                                                     
  &lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;share&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;images&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mailman&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                                           
&lt;span class="p"&gt;}&lt;/span&gt;                                                                              
&lt;span class="nt"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;pipermail&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;                                                          
  &lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mailman&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;archives&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;public&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                                    
  &lt;span class="n"&gt;autoindex&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                                                              
&lt;span class="p"&gt;}&lt;/span&gt;                               
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Restart Nginx server, you should be able to see the web page at http://lists.example.com/mailman/listinfo&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo service nginx restart
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Mailman Configuration&lt;/h2&gt;
&lt;p&gt;Open &lt;code&gt;/etc/mailman/mm_cfg.py&lt;/code&gt;, modify these lines:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DEFAULT_URL_PATTERN&lt;/code&gt;: should be &lt;code&gt;http://%s/mailman&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DEFAULT_EMAIL_HOST&lt;/code&gt;: should be &lt;code&gt;example.com&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DEFAULT_URL_HOST&lt;/code&gt;: should be &lt;code&gt;lists.example.com&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Postfix Configuration&lt;/h2&gt;
&lt;p&gt;Open &lt;code&gt;/etc/postfix/main.cf&lt;/code&gt;, make sure these lines are correct:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;mydomain = example.com&lt;/span&gt;
&lt;span class="x"&gt;myhostname = lists.&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;mydomain&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;myorigin = /etc/mailname&lt;/span&gt;
&lt;span class="x"&gt;mydestination = &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;mydomain&lt;/span&gt;&lt;span class="x"&gt; localhost.&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;mydomain&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;myhostname&lt;/span&gt;&lt;span class="x"&gt; localhost&lt;/span&gt;
&lt;span class="x"&gt;mynetworks = &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;mydomain&lt;/span&gt;&lt;span class="x"&gt; 127.0.0.0/8 [::ffff:127.0.0.0]/104 [::1]/128&lt;/span&gt;

&lt;span class="x"&gt;alias_maps = hash:/etc/aliases&lt;/span&gt;
&lt;span class="x"&gt;alias_database = hash:/etc/aliases&lt;/span&gt;
&lt;span class="x"&gt;local_recipient_maps = proxy:unix:passwd.byname &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;alias_maps&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;local_recipient_maps&lt;/code&gt; tells Postfix how to route the emails.&lt;/p&gt;
&lt;p&gt;If you use Sendgrid for outgoing emails, also add these lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;smtp_sasl_auth_enable = yes 
smtp_sasl_password_maps = static:yourSendGridUsername:yourSendGridPassword 
smtp_sasl_security_options = noanonymous 
smtp_tls_security_level = encrypt
header_size_limit = 4096000
relayhost = [smtp.sendgrid.net]:587
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Create the First Mail List&lt;/h2&gt;
&lt;p&gt;Ok, now we pretty much configured everything. Let's create the first email list
called &lt;code&gt;mailman&lt;/code&gt;, which will be used for Mailman logistics (like email
reminders).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo newlist mailman
&lt;span class="c"&gt;# Enter you email address and password&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It will tell you to paste this lines to &lt;code&gt;/etc/aliases&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;## mailman mailing list                                                          
mailman:              &amp;quot;|/var/lib/mailman/mail/mailman post mailman&amp;quot;              
mailman-admin:        &amp;quot;|/var/lib/mailman/mail/mailman admin mailman&amp;quot;             
mailman-bounces:      &amp;quot;|/var/lib/mailman/mail/mailman bounces mailman&amp;quot;           
mailman-confirm:      &amp;quot;|/var/lib/mailman/mail/mailman confirm mailman&amp;quot;           
mailman-join:         &amp;quot;|/var/lib/mailman/mail/mailman join mailman&amp;quot;              
mailman-leave:        &amp;quot;|/var/lib/mailman/mail/mailman leave mailman&amp;quot;             
mailman-owner:        &amp;quot;|/var/lib/mailman/mail/mailman owner mailman&amp;quot;             
mailman-request:      &amp;quot;|/var/lib/mailman/mail/mailman request mailman&amp;quot;           
mailman-subscribe:    &amp;quot;|/var/lib/mailman/mail/mailman subscribe mailman&amp;quot;         
mailman-unsubscribe:  &amp;quot;|/var/lib/mailman/mail/mailman unsubscribe mailman&amp;quot;    
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then update the &lt;code&gt;/etc/aliases.db&lt;/code&gt; database:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo newaliases
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then restart Mailman and Postfix:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo service postfix restart
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo service mailman restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now if you go to &lt;code&gt;http://lists.example.com/mailman/listinfo&lt;/code&gt;, you should see the
newly created &lt;code&gt;Mailman&lt;/code&gt; list.&lt;/p&gt;
&lt;p&gt;You can continue by adding other lists, and send test emails to these lists.&lt;/p&gt;
&lt;h2&gt;About Aliases&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;/etc/aliases&lt;/code&gt; file tells Postfix how to route the emails. In above
&lt;code&gt;mailman&lt;/code&gt; example, when receiving emails to &lt;code&gt;mailman@example.com&lt;/code&gt;, Postfix will
know to call the command &lt;code&gt;/var/lib/mailman/mail/mailman post mailman&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can also tell Postfix to forward certain emails to another email address.
For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;help&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;gmail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then if you send a email to &lt;code&gt;help@example.com&lt;/code&gt;, Postfix will forward it to
&lt;code&gt;example.help@gmail.com&lt;/code&gt;.&lt;/p&gt;</summary><category term="mailman"></category><category term="nginx"></category><category term="fastcgi"></category><category term="postfix"></category><category term="maillist"></category></entry><entry><title>Monitor Screen Touch Event in Android</title><link href="http://jhshi.me/2014/11/09/monitor-screen-touch-event-in-android/index.html" rel="alternate"></link><updated>2014-11-09T18:47:24-05:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2014-11-09:2014/11/09/monitor-screen-touch-event-in-android/index.html</id><summary type="html">&lt;p&gt;In one of my projects I need to track every screen touch event in background.
That is, my app needs to be "invisible" while capturing every screen touch. Here
is how I achieved this.&lt;/p&gt;


&lt;p&gt;The idea is to define a dummy UI fragment that is really tiny (say, 1x1 pixel),
and place it on one of the corners of the screen, and let it listen on all touch
events outside it. Well, literally, it's not "invisible", in fact it's in
foreground all the time! But since it's so tiny so hopefully users won't feel a
difference.&lt;/p&gt;
&lt;p&gt;First, let's create this dummy view:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mWindowManager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WindowManager&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;mContext&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSystemService&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WINDOW_SERVICE&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;mDummyView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;LinearLayout&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mContext&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;LayoutParams&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;LayoutParams&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LayoutParams&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;MATCH_PARENT&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;mDummyView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setLayoutParams&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;mDummyView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setOnTouchListener&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we set the width of the dummy view to be 1 pixel, and the height to be
parent height. And we also set up a touch event listen of this dummy view, which
we'll implement later.&lt;/p&gt;
&lt;p&gt;Then let's add this dummy view.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;LayoutParams&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;LayoutParams&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="cm"&gt;/* width */&lt;/span&gt;
        &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="cm"&gt;/* height */&lt;/span&gt;
        &lt;span class="n"&gt;LayoutParams&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;TYPE_PHONE&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;LayoutParams&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;FLAG_NOT_FOCUSABLE&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; 
        &lt;span class="n"&gt;LayoutParams&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;FLAG_NOT_TOUCH_MODAL&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="n"&gt;LayoutParams&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;FLAG_WATCH_OUTSIDE_TOUCH&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;PixelFormat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;TRANSPARENT&lt;/span&gt;
        &lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;gravity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Gravity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;LEFT&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Gravity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;TOP&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;mWindowManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mDummyView&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The key here is the &lt;code&gt;FLAG_WATCH_OUTSIDE_TOUCH&lt;/code&gt; flag, it enables the dummy view
to capture all events on screen, whether or not the event is inside the dummy
view or not.&lt;/p&gt;
&lt;p&gt;Finally, let's handle the touch event by implementing &lt;code&gt;View.OnTouchListener&lt;/code&gt;
listener.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;onTouch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;View&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MotionEvent&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TAG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Touch event: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;

    &lt;span class="c1"&gt;// log it&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We need to return &lt;code&gt;false&lt;/code&gt; since we're not really handling the event, so that the
underlying real UI elements can get those events.&lt;/p&gt;
&lt;p&gt;A final note is that, to keep our dummy view always listening touch events, we
need to wrap all these in an &lt;code&gt;Service&lt;/code&gt;: we create the dummy view in &lt;code&gt;onCreate&lt;/code&gt;
and add it to screen in &lt;code&gt;onStartCommand&lt;/code&gt;. And the service should implement
&lt;code&gt;View.OnTouchListener&lt;/code&gt; to receive the touch events.&lt;/p&gt;</summary></entry><entry><title>AOSP Release Tools</title><link href="http://jhshi.me/2014/11/09/aosp-release-tools/index.html" rel="alternate"></link><updated>2014-11-09T14:42:39-05:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2014-11-09:2014/11/09/aosp-release-tools/index.html</id><summary type="html">&lt;p&gt;AOSP ships with a bunch of tools that are very useful for platform release. I'll
cover their usage and explain what they do in this post.&lt;/p&gt;


&lt;h2&gt;Generate Target Files&lt;/h2&gt;
&lt;p&gt;Usually when you develop locally, you would use plain &lt;code&gt;make&lt;/code&gt; with no particular
target to compile AOSP. When you prepare for release, however, you need to do
this instead:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;make -j16 dist
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It will first compile the whole source tree, as a plain &lt;code&gt;make&lt;/code&gt; does. Then it
will generate several zip files in &lt;code&gt;out/dist&lt;/code&gt; that will be used in later stage
of release. Here are the files for Nexus 5 (hammerhead) of platform version 1.2,
the names may be slightly different in your case.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;aosp_hammerhead-target-files-1.2.zip&lt;/code&gt; contains all the target files (apk,
     binaries, libraries, etc.) that will go into the final release package. This
     is the most important file and will be used extensively later on.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aosp_hammerhead-apps-1.2.zip&lt;/code&gt; contains all the apks.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aosp_hammerhead-emulator-1.2.zip&lt;/code&gt; contains images that suitable for boot on
     a emulator.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aosp_hammerhead-img-1.2.zip&lt;/code&gt; contains image files for &lt;code&gt;system&lt;/code&gt;, &lt;code&gt;boot&lt;/code&gt;, and
     &lt;code&gt;recovery&lt;/code&gt;. Suitable for &lt;code&gt;fastboot update&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aosp_hammerhead-ota-1.2.zip&lt;/code&gt; is an OTA package that can be installed
     through recovery.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aosp_hammerhead-symbols-1.2.zip&lt;/code&gt; contains all files in
     &lt;code&gt;out/target/product/hammerhead/symbols&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Sign Target Files&lt;/h2&gt;
&lt;p&gt;Each APK in the final release has to be properly signed. In each Java project that
will finally generate an APK, developers can specify which key should be used to
sign this apk by defining &lt;code&gt;LOCAL_CERTIFICATE&lt;/code&gt;. For example, in &lt;code&gt;Android.mk&lt;/code&gt; file
of &lt;code&gt;packages/apps/Settings&lt;/code&gt;, there is this line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;LOCAL_CERTIFICATE&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; platform
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Which indicates that &lt;code&gt;Settings.apk&lt;/code&gt; should be signed using platform key. You can
also set &lt;code&gt;LOCAL_CERTIFICATE&lt;/code&gt; to be &lt;code&gt;PRESIGNED&lt;/code&gt;, which tells the signing script
(see below) that this APKs are already signed and should not be signed again.
This is usually the case when those APKs are provided as vendor blobs.&lt;/p&gt;
&lt;p&gt;There are four type of keys in AOSP, and the default keys are shipped in
&lt;code&gt;build/target/product/security&lt;/code&gt;. As you'll find in the &lt;code&gt;README&lt;/code&gt; file, they are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;testkey -- a generic key for packages that do not otherwise specify a key.&lt;/li&gt;
&lt;li&gt;platform -- a test key for packages that are part of the core platform.&lt;/li&gt;
&lt;li&gt;shared -- a test key for things that are shared in the home/contacts process.&lt;/li&gt;
&lt;li&gt;media -- a test key for packages that are part of the media/download system.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Actually, after first step (&lt;code&gt;make dist&lt;/code&gt;) the target APK files are signed with
this keys, which we should substitute to our own keys in this step. AOSP
provides a python script, &lt;code&gt;build/tools/releasetools/sign_target_file_apks&lt;/code&gt;, for
this purpose.&lt;/p&gt;
&lt;p&gt;You can take a look at the python doc at the head of that file for complete
usage. A typical usage will look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./build/tools/releasetools/sign_target_file_apks -o -d &lt;span class="nv"&gt;$KEY_DIR&lt;/span&gt; out/dist/aosp_hammerhead-target_files-1.2.zip /tmp/signed.zip
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In which:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-o&lt;/code&gt; tells the script to replace ota keys. This will make
     &lt;code&gt;system/etc/security/otacerts.zip&lt;/code&gt; in the final image contain your platform keys instead of
     the default one.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-d&lt;/code&gt; indicates that you're using default key mapping.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$KEY_DIR&lt;/code&gt; should be the directory that contains your private keys.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This script will first unpack the input target files, then sign each APKs using
proper keys, and repack them in to a new signed target files zip.&lt;/p&gt;
&lt;h2&gt;Generate Release File&lt;/h2&gt;
&lt;p&gt;This step depends on what kind of release file you want to generate. You can
either generate a full image file that suitable for &lt;code&gt;fastboot update&lt;/code&gt;, or you
can generate an OTA file that can be updated via recovery.&lt;/p&gt;
&lt;h3&gt;Full System Image&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./build/tools/releasetools/img_from_target_files /tmp/signed.zip /tmp/final-release.img
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This script will pack the signed target files into one image file that can be
flashed via &lt;code&gt;fastboot update&lt;/code&gt;. This is useful when you do your first release.&lt;/p&gt;
&lt;h3&gt;OTA Package&lt;/h3&gt;
&lt;p&gt;For OTA, you can choose from a full OTA or an incremental OTA. In
each case, you can reboot the device into recovery mode, and use &lt;code&gt;adb sideload&lt;/code&gt;
to flash the update for testing.&lt;/p&gt;
&lt;p&gt;To generate a full OTA package:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./build/tools/releasetools/ota_from_target_files -k &lt;span class="nv"&gt;$KEY_DIR&lt;/span&gt;/platform /tmp/signed.zip /tmp/final-full-ota.zip
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In which &lt;code&gt;-k&lt;/code&gt; option specify the key to sign the OTA package. The package
contains all the files needed by &lt;code&gt;system&lt;/code&gt;, &lt;code&gt;boot&lt;/code&gt; and &lt;code&gt;recovery&lt;/code&gt; partition.&lt;/p&gt;
&lt;h3&gt;Incremental OTA&lt;/h3&gt;
&lt;p&gt;The OTA package generated in last step is quite large (~380MB for KitKat). If the changes
since last release are not that many, then you may want to generate an
incremental OTA package, which only contains the different part.&lt;/p&gt;
&lt;p&gt;To do this, you need the signed target files from last time when you do a
release. Therefore, I strongly suggest you to check in the signed target files of each release
in your VCS, just in case in the future you want to do an incremental OTA.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./build/tools/releasetools/ota_from_target_files -k &lt;span class="nv"&gt;$KEY_DIR&lt;/span&gt;/platform -i /tmp/last-signed.zip /tmp/signed.zip /tmp/final-full-ota.zip
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The difference is that we specify the base target files, &lt;code&gt;/tmp/last-signed.zip&lt;/code&gt;.
The script will compare current target files with the one from last release, and
will generate binary diff if they're different.&lt;/p&gt;
&lt;p&gt;You may also check my previous post about
&lt;a href="/2013/12/13/how-to-apply-downloaded-ota-package/"&gt;how apply the OTA package programmingly&lt;/a&gt;.&lt;/p&gt;</summary><category term="incremental"></category><category term="ota"></category><category term="aosp"></category><category term="release"></category></entry><entry><title>Replicate Gem Installation</title><link href="http://jhshi.me/2014/11/08/replicate-gem-installation/index.html" rel="alternate"></link><updated>2014-11-08T23:48:11-05:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2014-11-08:2014/11/08/replicate-gem-installation/index.html</id><summary type="html">&lt;p&gt;I use Octopress to manage my blogs, which rely on correct ruby gem version to
work. Although Octopress use Bundler to manage the gem dependencies, sometimes a
simple &lt;code&gt;bundle install&lt;/code&gt; does not work out of box. Since everything works fine on
one of my machines, I decided to replicate the exact ruby/gem setup of that
machine.&lt;/p&gt;


&lt;h2&gt;Dump Gem list&lt;/h2&gt;
&lt;p&gt;First, dump all the gems and version to a text file on the machine that you want
to replicate.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gem list &lt;span class="p"&gt;|&lt;/span&gt; tail -n+1 &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;s/(/--version /&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;s/)//&amp;#39;&lt;/span&gt; &amp;gt; gemlist
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we first dump all the gem files using &lt;code&gt;gem list&lt;/code&gt;, then we remove the first
line of the output (&lt;code&gt;***LOCAL GEMS***&lt;/code&gt;), and replace left parenthesis with
&lt;code&gt;--version&lt;/code&gt; for later convenience, and remove right parenthesis.&lt;/p&gt;
&lt;p&gt;Suppose your app use Bundler, then you should use this command instead
of the above one, to make sure the we install exactly the same set of gems for
that app.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bundle &lt;span class="p"&gt;|&lt;/span&gt; head -n-2 &lt;span class="p"&gt;|&lt;/span&gt; cut -d&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt; -f2,3 &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;s/ / --version /&amp;#39;&lt;/span&gt; &amp;gt; gemlist
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here since the output of &lt;code&gt;bundle&lt;/code&gt; is a bit different with &lt;code&gt;gem list&lt;/code&gt;, we first
remove the last two lines of the output (see below), then we split each line
using white space and only get the second (gem name) and third (version) parts,
finally we substitute white space with &lt;code&gt;--version&lt;/code&gt;, similar as above.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;....
Using stringex 1.4.0
Using bundler 1.7.3
Your bundle is complete!
Use `bundle show [gemname]` to see where a bundled gem is installed.
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Install the Gems&lt;/h2&gt;
&lt;p&gt;Copy the &lt;code&gt;gemlist&lt;/code&gt; file to the machine that you want to install gems on, and use
this command to install the gems. To make sure we have a clean slate, we first
remove all Gems first.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gem list &lt;span class="p"&gt;|&lt;/span&gt; cut -d&lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt; -f1 &lt;span class="p"&gt;|&lt;/span&gt; xargs sudo gem uninstall -aIx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then install all the Gems, here we do not install document for sake of time.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cat gemlist &lt;span class="p"&gt;|&lt;/span&gt; xargs -L &lt;span class="m"&gt;1&lt;/span&gt; sudo gem install --no-ri --no-rdoc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we use &lt;code&gt;-L 1&lt;/code&gt; option to tell &lt;code&gt;xargs&lt;/code&gt; to treat each line as a separate
command.&lt;/p&gt;
&lt;p&gt;Finally, before you do &lt;code&gt;rake&lt;/code&gt; in your project, remember to delete the
&lt;code&gt;Gemfile.lock&lt;/code&gt; file, it may contain some obsolete gems and misleading bundler.&lt;/p&gt;</summary><category term="ruby"></category><category term="gem"></category><category term="cut"></category><category term="xargs"></category></entry><entry><title>Install Acrobat Reader on Ubuntu 14.04</title><link href="http://jhshi.me/2014/10/06/install-acrobat-reader-on-ubuntu-14-dot-04/index.html" rel="alternate"></link><updated>2014-10-06T18:43:45-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2014-10-06:2014/10/06/install-acrobat-reader-on-ubuntu-14-dot-04/index.html</id><summary type="html">&lt;p&gt;Recently I need to install Adobe Acrobat Reader on couple of my Ubuntu boxes.
The process is full of black magic that sometimes you can't find the documents
anywhere. Hopefully this post will make the process less a pain.&lt;/p&gt;


&lt;h3&gt;Install Dependencies&lt;/h3&gt;
&lt;p&gt;This is probably a &lt;em&gt;superset&lt;/em&gt; of all the dependencies. I used trial and error
in the process and I'm not quite sure which packages are really necessary...&lt;/p&gt;
&lt;p&gt;With these packages, if I run &lt;code&gt;acroread&lt;/code&gt; from command line:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There is no GTK warnings or whatsoever.&lt;/li&gt;
&lt;li&gt;Can open PDF with forms (like the ones for Canada VISA application).&lt;/li&gt;
&lt;li&gt;The icons and menus looks "normal".&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that since the Acrobat Reader is 32-bit application, so if you're on
64-bit system, remember to append a &lt;code&gt;:i386&lt;/code&gt; on whatever extra packages you want
to install besides the ones in this list.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install &lt;span class="se"&gt;\&lt;/span&gt;
    libgtk2.0-0:i386 &lt;span class="se"&gt;\&lt;/span&gt;
    libnss3-1d:i386 &lt;span class="se"&gt;\&lt;/span&gt;
    libnspr4-0d:i386 &lt;span class="se"&gt;\&lt;/span&gt;
    lib32nss-mdns &lt;span class="se"&gt;\&lt;/span&gt;
    libxml2:i386 &lt;span class="se"&gt;\&lt;/span&gt;
    libxslt1.1:i386 &lt;span class="se"&gt;\&lt;/span&gt;
    libstdc++6:i386 &lt;span class="se"&gt;\&lt;/span&gt;
    libcanberra-dev:i386 &lt;span class="se"&gt;\&lt;/span&gt;
    libcanberra-gtk-dev:i386 &lt;span class="se"&gt;\&lt;/span&gt;
    libcanberra-gtk-module:i386 &lt;span class="se"&gt;\&lt;/span&gt;
    gtk2-engines:i386 &lt;span class="se"&gt;\&lt;/span&gt;
    gtk2-engines-*:i386 &lt;span class="se"&gt;\&lt;/span&gt;
    gnome-themes-standard:i386 &lt;span class="se"&gt;\&lt;/span&gt;
    unity-gtk2-module:i386 &lt;span class="se"&gt;\&lt;/span&gt;
    libpangoxft-1.0.0:i386 &lt;span class="se"&gt;\&lt;/span&gt;
    libpangox-1.0.0:i386 &lt;span class="se"&gt;\&lt;/span&gt;
    libidn11:i386 &lt;span class="se"&gt;\&lt;/span&gt;
    dconf-gsettings-backend:i386
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Download the Deb Package&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/Downloads &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; wget -c http://ardownload.adobe.com/pub/adobe/reader/unix/9.x/9.5.5/enu/AdbeRdr9.5.5-1_i386linux_enu.deb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If the above link fails, try this one instead:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/Downloads &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; wget -c ftp://ftp.adobe.com/pub/adobe/reader/unix/9.x/9.5.5/enu/AdbeRdr9.5.5-1_i386linux_enu.deb
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Installation&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo dpkg -i ~/Downloads/AdbeRdr9.5.5-1_i386linux_enu.deb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This should complete without any problems if you installed all the packages in the
dependencies. But in case &lt;code&gt;dpkg&lt;/code&gt; still complains, run this command after &lt;code&gt;dpkt -i&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get -f install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This should fix any further missing dependencies.&lt;/p&gt;
&lt;h3&gt;Configuration&lt;/h3&gt;
&lt;p&gt;If you want to use Acrobat Reader to open PDF files by default. Run this command and choose Acrobat Reader from the list:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mimeopen -d *.pdf
Please choose a default application &lt;span class="k"&gt;for&lt;/span&gt; files of &lt;span class="nb"&gt;type &lt;/span&gt;application/pdf

    1&lt;span class="o"&gt;)&lt;/span&gt; Document Viewer  &lt;span class="o"&gt;(&lt;/span&gt;evince&lt;span class="o"&gt;)&lt;/span&gt;
    2&lt;span class="o"&gt;)&lt;/span&gt; Print Preview  &lt;span class="o"&gt;(&lt;/span&gt;evince-previewer&lt;span class="o"&gt;)&lt;/span&gt;
    3&lt;span class="o"&gt;)&lt;/span&gt; GIMP Image Editor  &lt;span class="o"&gt;(&lt;/span&gt;gimp&lt;span class="o"&gt;)&lt;/span&gt;
    4&lt;span class="o"&gt;)&lt;/span&gt; Adobe Reader &lt;span class="m"&gt;9&lt;/span&gt;  &lt;span class="o"&gt;(&lt;/span&gt;AdobeReader&lt;span class="o"&gt;)&lt;/span&gt;
    5&lt;span class="o"&gt;)&lt;/span&gt; Other...

use application &lt;span class="c"&gt;# 4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="acroread"></category><category term="ubuntu"></category><category term="adobe"></category><category term="acrobat"></category></entry><entry><title>Regular Expression Support in Android Logcat Tag Filters</title><link href="http://jhshi.me/2014/10/03/regular-expression-support-in-android-logcat-tag-filters/index.html" rel="alternate"></link><updated>2014-10-03T19:10:15-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2014-10-03:2014/10/03/regular-expression-support-in-android-logcat-tag-filters/index.html</id><summary type="html">&lt;p&gt;For a while I've been using &lt;code&gt;logcat&lt;/code&gt; command line tools to check
Android logs. Usually, the tags of my app consist of a common prefix and the
name of different sub-components (I guess that's also what most apps do). And I
have about a dozen of such tags. &lt;code&gt;logcat&lt;/code&gt;, however, does not support filtering
tags using regular expressions, which is a pain! After suffering for a long
time, I finally decide to tackle this.&lt;/p&gt;


&lt;h2&gt;Logcat Tag Filters&lt;/h2&gt;
&lt;p&gt;The basic &lt;code&gt;logcat&lt;/code&gt; options can be found in the &lt;a href="http://developer.android.com/tools/help/logcat.html"&gt;official document&lt;/a&gt;,
which also contains a brief explanation of &lt;a href="http://developer.android.com/tools/debugging/debugging-log.html#filteringOutput"&gt;&lt;code&gt;logcat&lt;/code&gt; filter format&lt;/a&gt;.
Basically, you provide a series of &lt;code&gt;logcat&lt;/code&gt; filters, each with the format
&lt;code&gt;TAG:LEVEL&lt;/code&gt;, where &lt;code&gt;TAG&lt;/code&gt; must be the &lt;em&gt;exact&lt;/em&gt; tags you want to filter, and
&lt;code&gt;LEVEL&lt;/code&gt; can be one of the characters listed in the document. So if you have a
bunch of similar tags, such as &lt;code&gt;MyApp-task1&lt;/code&gt;, &lt;code&gt;MyApp-Task2&lt;/code&gt;, etc., you'll have
to specify them all in full name. Although you can save a few key strokes by setting
the &lt;code&gt;ANDROID_LOG_TAGS&lt;/code&gt; environment variable, it still only solves part of the
pain.&lt;/p&gt;
&lt;p&gt;Note that the order of the filters matters. In short, &lt;code&gt;logcat&lt;/code&gt; will look at the
filters from left to right, and use the first one that matches the tag of
log line. For example, if you use &lt;code&gt;MyApp:V *:S&lt;/code&gt;, then only the log lines with
tag &lt;code&gt;MyApp&lt;/code&gt; will be printed, other log lines will be suppressed by the &lt;code&gt;*:S&lt;/code&gt;
filter. However, if you use &lt;code&gt;*:S MyApp:V&lt;/code&gt;, then no log lines will be printed,
because the first filter, &lt;code&gt;*:S&lt;/code&gt; matches all log line tags thus all log lines are
suppressed by this filter. For details, please refer to the
&lt;code&gt;android_log_shouldPrintLine&lt;/code&gt; function in &lt;a href="https://android.googlesource.com/platform/system/core/+/master/liblog/logprint.c"&gt;this file&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;My Logcat Wrapper&lt;/h2&gt;
&lt;p&gt;We can make &lt;code&gt;logcat&lt;/code&gt; support regular expression tag filters by two approaches.
One is modifying &lt;code&gt;logcat&lt;/code&gt; source code in AOSP tree and build a new &lt;code&gt;logcat&lt;/code&gt;
binary that support RE. Another approach is to filter the tags "offline" in the
host PCs where you run &lt;code&gt;adb logcat&lt;/code&gt; command, i.e., a &lt;code&gt;logcat&lt;/code&gt; wrapper.&lt;/p&gt;
&lt;p&gt;I adopted the second approach, since the first one has a few drawbacks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You'll have to match RE in cpp, which I assume is not quite enjoyable.&lt;/li&gt;
&lt;li&gt;You'll have to cross-compile the &lt;code&gt;logcat&lt;/code&gt; binary, which requires you to setup
   the whole AOSP develop environment.&lt;/li&gt;
&lt;li&gt;For each device that you want to run &lt;code&gt;logcat&lt;/code&gt; on, you'll have to replace the
   &lt;code&gt;logcat&lt;/code&gt; binary.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So here is my wrapper works. It calls &lt;code&gt;adb logcat&lt;/code&gt; command without any filters,
to get all the log lines. Then it parses the output log lines, and only prints
the lines whose tag matches the regular expression provided. It supports basic
&lt;code&gt;logcat&lt;/code&gt; options, such as &lt;code&gt;-b&lt;/code&gt;, &lt;code&gt;-c&lt;/code&gt;, &lt;code&gt;-g&lt;/code&gt;, etc. by just piping those options to
the real &lt;code&gt;logcat&lt;/code&gt;. It processes the log filters in the same order as &lt;code&gt;logcat&lt;/code&gt;
does to be as close as the original &lt;code&gt;logcat&lt;/code&gt; semantics.&lt;/p&gt;
&lt;p&gt;The idea is that you just run the wrapper in the save way you would as &lt;code&gt;logcat&lt;/code&gt;,
and it just does the magic RE tag filtering for you. You can find this tool on
&lt;a href="https://github.com/jhshi/tools.logcat"&gt;my github repo&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;View Logs&lt;/h2&gt;
&lt;p&gt;You can directly print those log lines to console. I personally prefer to
redirect them to a temporary file and use vim to view it, which give me features
like incremental highlight search, etc. There is a &lt;a href="http://vim.wikia.com/wiki/Have_Vim_check_automatically_if_the_file_has_changed_externally"&gt;sweet recipe&lt;/a&gt; which
tells vim to automatically refresh the buffer when it's modified outside. This
is a perfect fit in viewing log files.&lt;/p&gt;</summary><category term="logcat"></category><category term="python"></category><category term="regular expression"></category><category term="tag"></category></entry><entry><title>Get Packet Signal Strength of RTL8187 Dongle</title><link href="http://jhshi.me/2014/09/21/get-packet-signal-strength-of-rtl8187-dongle/index.html" rel="alternate"></link><updated>2014-09-21T15:35:39-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2014-09-21:2014/09/21/get-packet-signal-strength-of-rtl8187-dongle/index.html</id><summary type="html">&lt;p&gt;In one of my research projects, I used &lt;a href="https://www.kismetwireless.net/android-pcap/"&gt;Android PCAP Capture&lt;/a&gt; with
&lt;a href="http://www.amazon.com/Alfa-Network-Wireless-802-11g-AWUS036H/dp/B000WXSO76"&gt;ALFA RTL8187L&lt;/a&gt; dongles to capture Wi-Fi packets on Android phones. One
problem I encountered was that per packet RSSI is missing. After poking around
the source code for couple of days, I finally figured out how to get this
information. In short, the per packet RSSI information IS indeed reported by the
hardware, yet the current Android PCAP app doesn't collect it.&lt;/p&gt;


&lt;h3&gt;RTL8187 Rx Descriptor&lt;/h3&gt;
&lt;p&gt;Normally, the Wi-Fi chipset will report certain PHY layer information (RSSI,
AGC, etc.) along with the true 802.11 packet in the form of a vendor "header".
In the case of RTL8187L, it's a bit confusing because the "header" is actually
at the &lt;em&gt;end&lt;/em&gt; of the delivered packet. This is the detailed format of RTL8187 Rx
descriptor (p.25 of the &lt;a href="http://www.pc817.cn/File/DataSheet/RTL8187L-101213110313eae9fcbc-018b-4c1c-8b66-2e80392311df.pdf"&gt;datasheet&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/rtl8187_rx_desc.png"&gt;&lt;/p&gt;
&lt;p&gt;The most interesting part related to signal strength is AGC and RSSI. They all,
in a way, reflect the signal quality of the received packet. However, as per
the &lt;a href="https://github.com/torvalds/linux/blob/master/drivers/net/wireless/rtl818x/rtl8187/dev.c"&gt;Linux kernel rtl8187 driver&lt;/a&gt;, "none of these quantities show
qualitative agreement with AP signal strength, except for the AGC". We'll worry
about this later. For now, we focus on how to extract these values from the
packet.&lt;/p&gt;
&lt;h3&gt;Get the Values&lt;/h3&gt;
&lt;p&gt;In PCAP capture source code (&lt;a href="http://kismetwireless.net/gitweb/?p=android-pcap.git;a=blob;f=src/net/kismetwireless/android/pcapcapture/Rtl8187Card.java;h=b8e1a44bb3a32376876ae1ff169634d1355ad568;hb=HEAD"&gt;RTL8187Card.java&lt;/a&gt;), there is a &lt;code&gt;usbThread&lt;/code&gt;
which keep pulling data from the dongle. When got a packet, the last 16 or 20
bytes are trimmed depending on if it's RTL8187L or RTL8187B. That 16 or 20 bytes
are the Rx descriptor. So instead of truncating them, we'll save them in a
separate array.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gh"&gt;diff --git a/src/net/kismetwireless/android/pcapcapture/Rtl8187Card.java b/src/net/kismetwireless/android/pcapcapture/Rtl8187Card.java&lt;/span&gt;
&lt;span class="gh"&gt;index b8e1a44..7628446 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/src/net/kismetwireless/android/pcapcapture/Rtl8187Card.java&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/src/net/kismetwireless/android/pcapcapture/Rtl8187Card.java&lt;/span&gt;
&lt;span class="gu"&gt;@@ -1868,13 +1868,16 @@ public class Rtl8187Card extends UsbSource {&lt;/span&gt;
                // int sz = mBulkEndpoint.getMaxPacketSize();
                int sz = 2500;
                        byte[] buffer = new byte[sz];
&lt;span class="gi"&gt;+            byte[] header;&lt;/span&gt;

                        while (!stopped) {
                                int l = mConnection.bulkTransfer(mBulkEndpoint, buffer, sz, 1000);
                                int fcsofft = 0;
&lt;span class="gi"&gt;+                header = null;&lt;/span&gt;

                                if (l &amp;gt; 0) {
                                        if (is_rtl8187b == 0 &amp;amp;&amp;amp; l &amp;gt; 16)
&lt;span class="gi"&gt;+                        header = Arrays.copyOfRange(buffer, l-16, l);&lt;/span&gt;
                                                l = l - 16;
                                        else if (l &amp;gt; 20)
                                                l = l - 20;
&lt;span class="gu"&gt;@@ -1889,6 +1892,11 @@ public class Rtl8187Card extends UsbSource {&lt;/span&gt;
                                        if (mPacketHandler != null) {
                                                Packet p = new Packet(Arrays.copyOfRange(buffer, 0, l));
                                                p.setDlt(PcapLogger.DLT_IEEE80211);
&lt;span class="gi"&gt;+                        if (header != null) {&lt;/span&gt;
&lt;span class="gi"&gt;+                            int noise = header[4];&lt;/span&gt;
&lt;span class="gi"&gt;+                            int rssi = header[5] &amp;amp; 0x7f;&lt;/span&gt;
&lt;span class="gi"&gt;+                            int agc = header[6];&lt;/span&gt;
&lt;span class="gi"&gt;+                        }&lt;/span&gt;

                                                /*
                                                if (fcs)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, we save the RTL8187L header in a separate byte array, and get the relevant
fields from it.&lt;/p&gt;
&lt;h3&gt;Meaningful RSSI&lt;/h3&gt;
&lt;p&gt;Although the Linux kernel driver shed some light on how to get a meaningful RSSI
out of the RTL8187L header, in my experiment, I found that &lt;code&gt;RSSI-100&lt;/code&gt; is a fair
enough approximation of the real RSSI in &lt;code&gt;dBm&lt;/code&gt;. For example, if the RSSI field
value is 15, then the actual RSSI is 15-100=-75dBm. Sometimes this approach will
give you some strange RSSI values (e.g., positive), yet most of the time the
calculated values are quite meaningful, and the RSSI of beacon frames calculated
this way are consistent with what you'll get from Android scan results.&lt;/p&gt;</summary><category term="rtl8187"></category><category term="rssi"></category><category term="pcapcapture"></category><category term="kismet"></category></entry><entry><title>Signing Issues related to OTA Update</title><link href="http://jhshi.me/2014/08/28/sign-issues-related-to-ota-update/index.html" rel="alternate"></link><updated>2014-08-28T15:37:50-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2014-08-28:2014/08/28/sign-issues-related-to-ota-update/index.html</id><summary type="html">&lt;p&gt;In my previous posts, I explained 
&lt;a href="/2013/12/02/how-to-create-and-sign-ota-package/"&gt;how to create a properly signed OTA package&lt;/a&gt; that will pass recovery's
signature check,
and &lt;a href="/2013/12/13/how-to-apply-downloaded-ota-package/"&gt;how to verify the signed OTA package before apply it&lt;/a&gt;. Here, we'll
discuss, &lt;em&gt;when building an production AOSP platform&lt;/em&gt;, how to sign the platform and
recovery image properly to match those signature checks.&lt;/p&gt;


&lt;p&gt;In following discussions, we assume you have a key pairs: &lt;code&gt;platform.x509.pem&lt;/code&gt;
and &lt;code&gt;platform.pk&lt;/code&gt;, which you'll use to sign the OTA package. Suppose the keys
are stored in a directory with path &lt;code&gt;$KEYS&lt;/code&gt;. I'm using Nexus 5 (hammerhead) as
an example below but the practice should be easy to apply to other devices.&lt;/p&gt;
&lt;h3&gt;Platform OTA Certificates&lt;/h3&gt;
&lt;p&gt;When verify a OTA package's signature using Android's
&lt;code&gt;RecoverySystem.verifyPackage&lt;/code&gt; utility, that function actually checks against the
certificates stored in &lt;code&gt;/system/etc/security/otacerts.zip&lt;/code&gt;. So if you want to
push OTA updates later, you'll have to generate the proper certificates when building
the platform.&lt;/p&gt;
&lt;p&gt;You can accomplish this by specifying &lt;code&gt;PRODUCT_OTA_PUBLIC_KEYS&lt;/code&gt; in your device's
Makefile (&lt;code&gt;device/lge/hammerhead/full_hammerhead.mk&lt;/code&gt; in my case).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;PRODUCT_OTA_PUBLIC_KEYS := &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;KEYS&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then the building process will store this location in &lt;code&gt;META/otakeys.txt&lt;/code&gt; in
unsigned zip file. When you sign the target files using &lt;code&gt;sign_target_files_apks&lt;/code&gt;
tool, it will generate the proper ota certificates based on the otakeys
provided. If &lt;code&gt;PRODUCT_OTA_PUBLIC_KEYS&lt;/code&gt; is not defined, it will just use the
release key, which is probably not what you used to sign the OTA packages.&lt;/p&gt;
&lt;h3&gt;Recovery Signature Verification&lt;/h3&gt;
&lt;p&gt;When you programmingly apply a OTA package using &lt;code&gt;RecoverySystem.installPackage&lt;/code&gt;
function, it will boot the device into recovery mode and let the recovery do the
update. The recovery will first check the signature of the OTA package. So when
building the platform, you'll also need to specify the extra recovery keys by
defining &lt;code&gt;PRODUCT_EXTRA_RECOVERY_KEYS&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;PRODUCT_EXTRA_RECOVERY_KEYS := &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;KEYS&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After setting &lt;code&gt;PRODUCT_OTA_PUBLIC_KEYS&lt;/code&gt; and &lt;code&gt;PRODUCT_EXTRA_RECOVERY_KEYS&lt;/code&gt;, you
should be able to pass all signature verifications and successfully apply the
OTA update.&lt;/p&gt;</summary><category term="aosp"></category><category term="ota"></category><category term="sign"></category><category term="keys"></category></entry><entry><title>Print uint64_t Properly In C</title><link href="http://jhshi.me/2014/07/11/print-uint64-t-properly-in-c/index.html" rel="alternate"></link><updated>2014-07-11T18:02:37-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2014-07-11:2014/07/11/print-uint64-t-properly-in-c/index.html</id><summary type="html">&lt;p&gt;&lt;code&gt;stdint.h&lt;/code&gt; provides various machine-independent integer types that are very
handy to use, especially the &lt;code&gt;uint64_t&lt;/code&gt; family. You would assume it's something
like &lt;code&gt;long long unsigned int&lt;/code&gt; and tempted to use &lt;code&gt;%llu&lt;/code&gt; in &lt;code&gt;printf&lt;/code&gt;, which, however, will be
reported as a warning by any decent compiler.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;warning&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%llu&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;expects&lt;/span&gt; &lt;span class="n"&gt;argument&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;long long unsigned int&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="n"&gt;argument&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;uint64_t&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;[-&lt;/span&gt;&lt;span class="n"&gt;Wformat&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;




&lt;h3&gt;The Right Way&lt;/h3&gt;
&lt;p&gt;The right way to print &lt;code&gt;uint64_t&lt;/code&gt; in &lt;code&gt;printf&lt;/code&gt;/&lt;code&gt;snprintf&lt;/code&gt; family
functions is this (&lt;a href="http://stackoverflow.com/questions/8132399/how-to-printf-uint64-t"&gt;source&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#define __STDC_FORMAT_MACROS&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;inttypes.h&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;uint64_t&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;PRIu64&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;PRIU64&lt;/code&gt; is a macro introduced in C99, and are supposed to mitigate platform
differences and "just print the thing". More macros for &lt;code&gt;printf&lt;/code&gt; family can be
found &lt;a href="http://en.cppreference.com/w/c/types/integer"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;The Story&lt;/h3&gt;
&lt;p&gt;In my case, I mistakenly use &lt;code&gt;%lu&lt;/code&gt; to print a &lt;code&gt;uint64_t&lt;/code&gt; integer. Of course, the
compiler gave warning on this. But...you know, it's "just warnings", should be no big deal.
Well, 80% of the time it is fine. Yet this time, it's not.
Since &lt;code&gt;uint64_t&lt;/code&gt; takes 8 bytes but &lt;code&gt;%lu&lt;/code&gt; will only eat 4 bytes, so my next print
argument, &lt;code&gt;%s&lt;/code&gt; comes in and happily print who knows what...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Never ignore warnings, NEVER.&lt;/strong&gt;&lt;/p&gt;</summary><category term="printf"></category><category term="format"></category><category term="c"></category></entry><entry><title>Fix ADB Permissions</title><link href="http://jhshi.me/2014/07/02/fix-adb-permissions/index.html" rel="alternate"></link><updated>2014-07-02T14:17:47-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2014-07-02:2014/07/02/fix-adb-permissions/index.html</id><summary type="html">&lt;p&gt;I've been bothered by this message for a while when the device is in recovery
mode.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;adb devices
List of devices attached
????????????    no permissions
&lt;/pre&gt;&lt;/div&gt;




&lt;p&gt;The thing is, I've set up my udev rules according to 
&lt;a href="https://source.android.com/source/initializing.html#configuring-usb-access"&gt;official AOSP building guide&lt;/a&gt;, and it works fine in normal mode. Yet the
above message shows up when the device is put in recovery mode. There are some
solutions online saying that restarting ADB as root, which I don't think is a
very good idea.&lt;/p&gt;
&lt;p&gt;Then I figured if it has to do with my udev rules, maybe it didn't contain the
device I used (Nexus 5 from LG). A &lt;code&gt;lsusb&lt;/code&gt; with device in recovery mode gives me this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;lsusb
Bus &lt;span class="m"&gt;002&lt;/span&gt; Device 010: ID 18d1:d001 Google Inc.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first part of the ID (18d1) is supposed to be the vendor ID, and second part
(d001) is product ID. However, from &lt;a href="http://developer.android.com/tools/device.html#VendorIds"&gt;Google's vendor list&lt;/a&gt;, LG's vendor
ID should be 1004, where as Google's vendor ID is 18d1.&lt;/p&gt;
&lt;p&gt;What the hell, just add them to the udev rules:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# adb protocol on recovery for Nexus 5
SUBSYSTEM==&amp;quot;usb&amp;quot;, ATTR{idVendor}==&amp;quot;18d1&amp;quot;, ATTR{idProduct}==&amp;quot;d001&amp;quot;, MODE=&amp;quot;0600&amp;quot;, OWNER=&amp;quot;&amp;lt;YOUR_USER_NAME&amp;gt;&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After that, unplug the device and plug it in again. It should be
recognized, like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;adb devices
List of devices attached
060fb526f0eca244        recovery
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And this approach can be extended to any cases where either adb or fastboot has
permission issues. Just do a &lt;code&gt;lsusb&lt;/code&gt; and find out the actual vendor and product
ID, and add them to your udev rules.&lt;/p&gt;</summary><category term="adb"></category><category term="permission"></category><category term="udev"></category></entry><entry><title>Stop Android Logcat from Truncating Log Line</title><link href="http://jhshi.me/2014/06/30/stop-android-logcat-from-truncating-log-line/index.html" rel="alternate"></link><updated>2014-06-30T18:17:29-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2014-06-30:2014/06/30/stop-android-logcat-from-truncating-log-line/index.html</id><summary type="html">&lt;p&gt;When analyzing the logcat data from Android devices, I found that sometimes the
log line get truncated, especially when it's quite long. This causes trouble
because the logged information are in JSON format, which gets broken after (even
one character) truncated. In this post, I'll explain how did the truncation
happen, and how to fix it.&lt;/p&gt;


&lt;h3&gt;Android Logging&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://elinux.org/Android_Logging_System"&gt;This page&lt;/a&gt; gives an detailed explanation of Android logging system. In
short, three parts are working together to make Android logcat work.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;logger&lt;/code&gt; device driver in kernel (&lt;code&gt;kernel/drivers/stagging/android&lt;/code&gt;). Which serves read/write request from user
   space and also buffer the log content.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;android.util.Log&lt;/code&gt; class (&lt;code&gt;framework/base/core/java/android/util/Log.java&lt;/code&gt;), a Java wrapper to write to &lt;code&gt;logger&lt;/code&gt; device.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;logcat&lt;/code&gt; (&lt;code&gt;system/core/log&lt;/code&gt;), a native tool to read logs from &lt;code&gt;logger&lt;/code&gt; device.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Truncating&lt;/h3&gt;
&lt;p&gt;Let's follow the flow when &lt;code&gt;Log.v&lt;/code&gt; is called with a log message, and find out
who truncated the log message (if it's too long).&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;framework/base/core/java/android/util/Log.java&lt;/code&gt;, when &lt;code&gt;Log.v&lt;/code&gt; is called, it
just call the native method called &lt;code&gt;println_native&lt;/code&gt; with to extra arguments,
&lt;code&gt;LOG_ID_MAIN&lt;/code&gt; and &lt;code&gt;VERBOSE&lt;/code&gt;. The first specify the log device to write to, and
the second tells the log level.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;println_native&lt;/code&gt;, defined in &lt;code&gt;framework/base/core/jni/android_util_Log.cpp&lt;/code&gt;,
it just calls the function named &lt;code&gt;__android_log_buf_write&lt;/code&gt;. So far, nobody
changed the log message yet.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__android_log_buf_write&lt;/code&gt; is defined in &lt;code&gt;system/core/liblog/logd_write.c&lt;/code&gt;, it
first detect a few special tags to redirect them to &lt;code&gt;radio&lt;/code&gt; log device, and then
it packs the log message in to &lt;code&gt;struct iovec&lt;/code&gt; data structures and passes them on
to &lt;code&gt;write_to_log&lt;/code&gt;, which is initialized as &lt;code&gt;_write_to_log_kernel&lt;/code&gt;. Eventually,
these &lt;code&gt;iovec&lt;/code&gt; go to &lt;code&gt;writev&lt;/code&gt; in &lt;code&gt;system/core/liblog/uio.c&lt;/code&gt;, which call syscall
&lt;code&gt;write&lt;/code&gt; on the log device.&lt;/p&gt;
&lt;p&gt;Thus, log line content is still sane before entering kernel space.&lt;/p&gt;
&lt;p&gt;Next, the write request will be directed to &lt;code&gt;logger_aio_write&lt;/code&gt; function defined
in &lt;code&gt;kernel/drivers/staging/android/logger.c&lt;/code&gt;. One line (462) raised my
attention:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;min_t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;iocb&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ki_left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LOGGER_ENTRY_MAX_PAYLOAD&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is where the truncating happens! &lt;/p&gt;
&lt;h3&gt;How to Fix&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;LOGGER_ENTRY_MAX_PAYLOAD&lt;/code&gt; is defined in
&lt;code&gt;kernel/drivers/stagging/android/logger.h&lt;/code&gt; as &lt;code&gt;4076&lt;/code&gt;, which I guess is
(4096-20), where 20 is the log header structure size.&lt;/p&gt;
&lt;p&gt;We can not actually eliminate truncating completely, the buffer size is limited
after all. But we can enlarge the payload limit a bit to prevent some
unnecessary truncating. I changed it to 65516 (65536-20), which should be large
enough.&lt;/p&gt;
&lt;p&gt;Also, &lt;code&gt;logger&lt;/code&gt; device maintains a ring buffer for each log device, which are
defined in &lt;code&gt;kernel/drivers/stagging/android/logger.c&lt;/code&gt;. The default buffer size
is 256K. I changed the buffer size for &lt;code&gt;main&lt;/code&gt; device to 4MB, while leave
others unchanged. (I also tried 32MB, yet apparently it's far too large and the
kernel refused to boot up.)&lt;/p&gt;
&lt;h2&gt;UPDATE&lt;/h2&gt;
&lt;p&gt;To make Android logcat tool working properly, we'll also need to modify
&lt;code&gt;system/core/include/log/logger.h&lt;/code&gt; in AOSP source tree, which is a mirror to the
&lt;code&gt;logger.h&lt;/code&gt; in kernel. &lt;code&gt;LOGGER_ENTRY_MAX_PAYLOAD&lt;/code&gt; needs to be the same with the
one in kernel, and &lt;code&gt;LOGGER_ENTRY_MAX_LEN&lt;/code&gt; needs to be a bit larger than
&lt;code&gt;LOGGER_ENTRY_MAX_PAYLOAD&lt;/code&gt;. In my case, I set the former to 65516 and latter to
&lt;code&gt;(64*1024)&lt;/code&gt;.&lt;/p&gt;</summary><category term="logcat"></category><category term="truncate"></category></entry><entry><title>Build Kernel In Tree with AOSP for Nexus 5 Hammerhead</title><link href="http://jhshi.me/2014/06/30/build-kernel-in-tree-with-aosp-for-nexus-5-hammerhead/index.html" rel="alternate"></link><updated>2014-06-30T17:22:29-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2014-06-30:2014/06/30/build-kernel-in-tree-with-aosp-for-nexus-5-hammerhead/index.html</id><summary type="html">&lt;p&gt;Google has a fair document for &lt;a href="https://source.android.com/source/building-kernels.html"&gt;building kernel for Android&lt;/a&gt;. Yet it
didn't cover how to integrate the kernel with AOSP source tree so that kernel
gets built along with whole platform, which I'll explain in this post. Here I'll
mainly focus on &lt;code&gt;android-4.4.4_r1&lt;/code&gt; (Kitkat) for Nexus 5 (&lt;code&gt;hammerhead&lt;/code&gt;).
The instructions should be easy to adapt to other models or AOSP releases.&lt;/p&gt;


&lt;h3&gt;Determine Kernel Version&lt;/h3&gt;
&lt;p&gt;The best and safest way to determine the right kernel version you need is to
examine the pre-included kernel image. For hammerhead, it's in
&lt;code&gt;device/lge/hammerhead-kernel/&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bzgrep -a &lt;span class="s1"&gt;&amp;#39;Linux version&amp;#39;&lt;/span&gt; device/lge/hammerhead-kernel/vmlinux.bz2
Linux version 3.4.0-gd59db4e &lt;span class="o"&gt;(&lt;/span&gt;android-build@vpbs1.mtv.corp.google.com&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;gcc version 4.7 &lt;span class="o"&gt;(&lt;/span&gt;GCC&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c"&gt;#1 SMP PREEMPT Mon Mar 17 15:16:36 PDT 2014&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As per &lt;a href="http://stackoverflow.com/questions/21574066/unable-to-checkout-msm-source-code-for-android-hammerhead-kernel"&gt;this stackoverflow thread&lt;/a&gt;, the commit hash you want is &lt;code&gt;d59db4e&lt;/code&gt;
part from the version name, without leading &lt;code&gt;g&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Download the Sources&lt;/h3&gt;
&lt;p&gt;For hammerhead, the kernel sources lie in &lt;code&gt;msm&lt;/code&gt; tree. After cloning it into
&lt;code&gt;kernel&lt;/code&gt; directory, checkout the commit hash you found in above step.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://android.googlesource.com/kernel/msm.git kernel
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;kernel
&lt;span class="nv"&gt;$ &lt;/span&gt;git checkout d59db4e
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Adapt kernel/AndroidKernel.mk&lt;/h3&gt;
&lt;p&gt;Two changes need to be made for kernel to be successfully built in-tree.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;zImage-dtb&lt;/code&gt; instead of &lt;code&gt;zImage&lt;/code&gt; as target. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;First, change &lt;code&gt;TARGET_PREBUILT_INT_KERNEL&lt;/code&gt; (~line 8).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gd"&gt;-TARGET_PREBUILT_INT_KERNEL := $(KERNEL_OUT)/arch/arm/boot/zImage&lt;/span&gt;
&lt;span class="gi"&gt;+TARGET_PREBUILT_INT_KERNEL := $(KERNEL_OUT)/arch/arm/boot/zImage-dtb&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then change corresponding make rule (~line 47).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$(TARGET_PREBUILT_INT_KERNEL): $(KERNEL_OUT) $(KERNEL_CONFIG) $(KERNEL_HEADERS_INSTALL)
&lt;span class="gd"&gt;-       $(MAKE) -C kernel O=../$(KERNEL_OUT) ARCH=arm CROSS_COMPILE=arm-eabi-&lt;/span&gt;
&lt;span class="gi"&gt;+       $(MAKE) -C kernel O=../$(KERNEL_OUT) ARCH=arm CROSS_COMPILE=arm-eabi- zImage-dtb&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Do not build modules (~line 48-51).&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gd"&gt;-       $(MAKE) -C kernel O=../$(KERNEL_OUT) ARCH=arm CROSS_COMPILE=arm-eabi- modules&lt;/span&gt;
&lt;span class="gd"&gt;-       $(MAKE) -C kernel O=../$(KERNEL_OUT) INSTALL_MOD_PATH=../../$(KERNEL_MODULES_INSTALL) INSTALL_MOD_STRIP=1 ARCH=arm CROSS_COMPILE=arm-eabi- modules_install&lt;/span&gt;
&lt;span class="gd"&gt;-       $(mv-modules)&lt;/span&gt;
&lt;span class="gd"&gt;-       $(clean-module-folder)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Adapt device/lge/hammerhead Project&lt;/h3&gt;
&lt;p&gt;Next we need to tell the device to build kernel, instead of copying the
pre-built one. &lt;a href="https://github.com/jamesonwilliams/device_lge_hammerhead/commit/fe714801e33b38af4a81ddc3f40c3fdc53583f66"&gt;This patch&lt;/a&gt; should do the trick. Basically, a new
&lt;code&gt;AndroidBoard.mk&lt;/code&gt; file is added to include the rules to build and copy kernel.
And some lines in &lt;code&gt;device.mk&lt;/code&gt; related to kernel are removed, since it's already
taken care of in &lt;code&gt;AndroidBoard.mk&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Build It!&lt;/h3&gt;
&lt;p&gt;After all above changes, &lt;strong&gt;do a &lt;code&gt;make clobber&lt;/code&gt; to make sure we have a clean
slate&lt;/strong&gt;, otherwise, some strange errors may strike you.  Then just build AOSP in
normal way and kernel should get built on the fly.&lt;/p&gt;
&lt;p&gt;Here is a snapshot of the kernel version I built. The version name is no longer
&lt;code&gt;d59db4e&lt;/code&gt; because I made some changes.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/kernel.png" class="center"&gt;&lt;/p&gt;
&lt;h3&gt;Credits&lt;/h3&gt;
&lt;p&gt;Thanks to &lt;a href="http://nosemaj.org/howto-build-android-kitkat-nexus-5"&gt;this blog from Jameson&lt;/a&gt; for describing most of it.&lt;/p&gt;
&lt;h2&gt;UPDATE&lt;/h2&gt;
&lt;p&gt;The above setup works fine as long as you didn't
&lt;a href="https://source.android.com/source/initializing.html#using-a-separate-output-directory"&gt;specify a separate output directory&lt;/a&gt;, since we assume the kernel output
directory is &lt;code&gt;../$(KERNEL_OUT)&lt;/code&gt; in &lt;code&gt;make&lt;/code&gt; options. Apparently, it will fail if the
&lt;code&gt;out&lt;/code&gt; directory is not the default one.&lt;/p&gt;
&lt;p&gt;The kernel &lt;a href="https://android.googlesource.com/kernel/msm/+/android-msm-hammerhead-3.4-kitkat-mr1/Makefile"&gt;Makefile&lt;/a&gt; support two ways of specify output directory
(see comments starting from line 79). One is to use &lt;code&gt;O=&lt;/code&gt; command line option,
another is to set the &lt;code&gt;KBUILD_OUTPUT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Since we use &lt;code&gt;-C&lt;/code&gt; option to first switch working directory, &lt;code&gt;O=&lt;/code&gt; options is a
bit tricky to use, so we leverage the &lt;code&gt;KBUILD_OUT&lt;/code&gt; variable.&lt;/p&gt;
&lt;p&gt;We first figure out the absolute path of the &lt;code&gt;KERNEL_OUT&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;FULL_KERNEL_OUT&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;shell readlink -e &lt;span class="k"&gt;$(&lt;/span&gt;KERNEL_OUT&lt;span class="k"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then we set &lt;code&gt;KBUILD_OUT&lt;/code&gt; before calling &lt;code&gt;make&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;$(KERNEL_CONFIG)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;KERNEL_OUT&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
    env &lt;span class="nv"&gt;KBUILD_OUTPUT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;FULL_KERNEL_OUT&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;MAKE&lt;span class="k"&gt;)&lt;/span&gt; -C kernel &lt;span class="nv"&gt;ARCH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;arm &lt;span class="nv"&gt;CROSS_COMPILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;arm-eabi- &lt;span class="k"&gt;$(&lt;/span&gt;KERNEL_DEFCONFIG&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This way will work no matter where the actual AOSP output directory is.&lt;/p&gt;
&lt;h2&gt;UPDATE (09/03/2015)&lt;/h2&gt;
&lt;p&gt;As &lt;a href="https://github.com/jhshi/blog_source/issues/3"&gt;Ryan pointed out&lt;/a&gt;, for Mac users, you may need to install GNU
&lt;code&gt;readlink&lt;/code&gt;, instead of the built-in one.&lt;/p&gt;</summary><category term="kernel"></category><category term="hammerhead"></category><category term="aosp"></category></entry><entry><title>Fix Data Connection for Nexus 5 Hammerhead on Android 4.4.4 Kitkat</title><link href="http://jhshi.me/2014/06/27/fix-data-connection-for-nexus-5-hammerhead-on-android-4-dot-4-4-kitkat/index.html" rel="alternate"></link><updated>2014-06-27T16:57:15-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2014-06-27:2014/06/27/fix-data-connection-for-nexus-5-hammerhead-on-android-4-dot-4-4-kitkat/index.html</id><summary type="html">&lt;p&gt;Recently, I need to build a working ROM for Nexus 5 from LG (hammerhead,
here-forth). There are variety of tutorials and guide all over the web on the
general steps needed to compile AOSP from scratch, which I do not intend to
repeat here. Instead, I'll mostly focus on how to make the data connection
(3G/LTE) working on Sprint phones.&lt;/p&gt;


&lt;p&gt;I choose the latest AOSP release as of writing this post, &lt;code&gt;android-4.4.4_r1&lt;/code&gt; as
per the &lt;a href="https://source.android.com/source/build-numbers.html"&gt;official Android build numbers page&lt;/a&gt;, and followed the 
&lt;a href="https://source.android.com/source/building.html"&gt;official build instructions from Android&lt;/a&gt;. Everything went smoothly, except that
after flashing to device, I found there was no data connection (3G/LTE). Of
course Google apps were also missing but it should be easy to fix.&lt;/p&gt;
&lt;p&gt;After banging my head for a while, I came across &lt;a href="http://nosemaj.org/howto-build-android-kitkat-nexus-5"&gt;this post from Jameson&lt;/a&gt;
and &lt;a href="https://groups.google.com/forum/?fromgroups#!topic/android-building/SjdAhFHYj-Q"&gt;this thread&lt;/a&gt;, which shed some light on what's happening.
Apparently, the vendor binaries from &lt;a href="https://developers.google.com/android/nexus/drivers#hammerheadktu84p"&gt;Google's driver page&lt;/a&gt; do not work
properly out of the box. Some was missing, such as &lt;code&gt;OmaDmclient.apk&lt;/code&gt;, and others
were different from those in factory image. So based on Jameson's vendor binary
repos (&lt;a href="https://github.com/jamesonwilliams/vendor_lge_hammerhead"&gt;lge&lt;/a&gt;, &lt;a href="https://github.com/jamesonwilliams/vendor_qcom_hammerhead"&gt;qcom&lt;/a&gt;), I updated them with the binaries from 
&lt;a href="https://developers.google.com/android/nexus/images#hammerheadktu84p"&gt;factory image&lt;/a&gt; of Android 4.4.4 (KTU84P). Yet still no luck.&lt;/p&gt;
&lt;p&gt;Finally, one of the comments in that post led me to this &lt;a href="http://forum.xda-developers.com/google-nexus-5/general/fix-sprint-data-to-custom-roms-t2541924"&gt;xda thread&lt;/a&gt;
talking about APN fixes for Sprint users, which seems to be just I missed. So I
used the &lt;code&gt;apns-conf.xml&lt;/code&gt; file from there and va-la, LTE is working! One tiny
glitch though, on first boot, activating data connection took far longer than it
should be, so once you saw the LTE icon, it's safe to hit skip.&lt;/p&gt;
&lt;p&gt;&lt;img width="180" height="320" class="center" src="/images/data-activate.png"&gt;
&lt;img width="180" height="320" class="center" src="/images/about-phone.png"&gt;&lt;/p&gt;
&lt;h2&gt;UPDATE (Jun 28, 2014)&lt;/h2&gt;
&lt;p&gt;To be able to sign the added vendor apks properly, I've added corresponding
&lt;code&gt;Android.mk&lt;/code&gt; in each proprietary directory. Also, &lt;code&gt;TimeService.apk&lt;/code&gt; from qcom
should override the one from gapps.&lt;/p&gt;
&lt;h2&gt;UPDATE (Oct 3, 2015)&lt;/h2&gt;
&lt;p&gt;To extract the files from factory image:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Download the factory image, uncompress it.&lt;/li&gt;
&lt;li&gt;Unzip the image files (&lt;code&gt;images-hammerhead-xxxxxx.zip&lt;/code&gt;) inside it.&lt;/li&gt;
&lt;li&gt;Uncompress the &lt;code&gt;system.img&lt;/code&gt; file:
     &lt;code&gt;$ simg2img system.img system.img.raw&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Mount the system image (assuming you already have a mount point).
     &lt;code&gt;$ mount -t ext4 -o loop system.img.raw /mnt/system.img/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More instructions can be found &lt;a href="http://omappedia.org/wiki/Android_eMMC_Booting#Modifying_.IMG_Files"&gt;here&lt;/a&gt;.&lt;/p&gt;</summary><category term="aosp"></category><category term="hammerhead"></category><category term="sprint"></category><category term="data"></category><category term="apn"></category></entry><entry><title>Performance Tips about Django ORM</title><link href="http://jhshi.me/2014/06/18/performance-tips-about-django-orm/index.html" rel="alternate"></link><updated>2014-06-18T14:41:00-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2014-06-18:2014/06/18/performance-tips-about-django-orm/index.html</id><summary type="html">&lt;p&gt;Django provides an friendly Object Relational Mapping (ORM) framework. In
several of my data analysis projects, I used Django ORM to process millions of
logcat data generated by hundreds of Android phones. Here are some of the
experiences and tips that helps making the processing just a bit faster. &lt;/p&gt;


&lt;h3&gt;&lt;code&gt;DEBUG&lt;/code&gt; Flag&lt;/h3&gt;
&lt;p&gt;First of all, set &lt;code&gt;DEBUG&lt;/code&gt; to &lt;code&gt;False&lt;/code&gt; in &lt;code&gt;settings.py&lt;/code&gt;. With &lt;code&gt;DEBUG&lt;/code&gt; as &lt;code&gt;True&lt;/code&gt;,
Django will keep in memory the DB queries it has run so far, which lead to
memory leak if you have a large batch of importing work.&lt;/p&gt;
&lt;h3&gt;Control Transaction Manually&lt;/h3&gt;
&lt;p&gt;By default, Django will wrap each database operation a separate transaction, and
commit them automatically. Accessing database frequently definitely will slow you
down, especially when all you want to do is just to insert (a large amount of)
data. Django's &lt;a href="https://docs.djangoproject.com/en/dev/topics/db/transactions/"&gt;transaction&lt;/a&gt; module provides several functions to let
you control when to commit the transaction. My favorite one is to use
&lt;code&gt;transaction.commit_on_success&lt;/code&gt; to wrap the function that import data for a
individual device. An addition benefit is, now you know the data importing for
each device either finished completely, or didn't get imported at all. So if
something wrong happens during the importing, or you have to stop it in the
middle for some reason. Next time when you rerun the importing, you won't get
duplicate rows!&lt;/p&gt;
&lt;h3&gt;Bulk Create Rows&lt;/h3&gt;
&lt;p&gt;When you have lots of data that you want to import into the database, instead of
call each objects &lt;code&gt;save&lt;/code&gt; function individually, you can store them in a list and
use the object manager's &lt;code&gt;bulk_create&lt;/code&gt; function. It'll insert the list of
objects into the database "in an efficient manner". Use this technique together
with the &lt;code&gt;transaction.commite_on_success&lt;/code&gt; mentioned above, the data importing
should be fast enough.&lt;/p&gt;
&lt;h3&gt;Iterator&lt;/h3&gt;
&lt;p&gt;Now all the raw data is imported into database, the next thing you want to do
is probably run second pass of processing, filtering, or whatever. When the data
size is large, it's unlikely that you need to use them again and again. Most of
the time, you just want to iterate through each log line, get some statistical
information, or some simple computation. So after you construct your (crazy)
query set, you want to add an &lt;code&gt;.iterator()&lt;/code&gt; function after it, so Django knows
you just want to iterate the data once, and will not bother to cache them.
Otherwise, Django will cache the query results, and soon you will find your
system freezes, and the kernel does nothing but swapping...&lt;/p&gt;
&lt;h3&gt;Reset Queries And Garbage Collection&lt;/h3&gt;
&lt;p&gt;Every now and then you can also reset Django queries manually with the
&lt;code&gt;reset_queries&lt;/code&gt; function, and trigger garbage collection using &lt;code&gt;gc.collect()&lt;/code&gt;.
They'll help you to further reduce memory usage.&lt;/p&gt;
&lt;h3&gt;Resources&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.djangoproject.com/en/dev/topics/db/optimization/"&gt;Database access optimization&lt;/a&gt;&lt;/p&gt;</summary><category term="python"></category><category term="performance"></category></entry><entry><title>How Android Wifi State Machine Works</title><link href="http://jhshi.me/2014/04/25/how-android-wifi-state-machine-works/index.html" rel="alternate"></link><updated>2014-04-25T10:39:00-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2014-04-25:2014/04/25/how-android-wifi-state-machine-works/index.html</id><summary type="html">&lt;p&gt;Recently, I studied how Android Wi-Fi subsystem works. I was more specifically
interested to learn the scan behavior. The source code related to this is mainly
in &lt;code&gt;framework/base/wifi/java/android/net/wifi/&lt;/code&gt; within AOSP source tree.&lt;/p&gt;


&lt;h3&gt;The Big Picture&lt;/h3&gt;
&lt;p&gt;&lt;img src="/images/android_wifi.png" class="center"&gt;&lt;/p&gt;
&lt;p&gt;Android uses a customized wpa_supplicant to perform AP authentication and
association, and also communicate with underlying driver. The &lt;code&gt;WifiNative&lt;/code&gt; class
is used to send various commands to wpa_supplicant ,and the &lt;code&gt;WifiMonitor&lt;/code&gt; class
is used to monitor wpa_supplicant status change and notify Android framework.&lt;/p&gt;
&lt;p&gt;wpa_supplicant communicates with underlying driver using new
&lt;a href="http://wireless.kernel.org/en/developers/Documentation/cfg80211"&gt;CFG80211/NL80211&lt;/a&gt; interface.&lt;/p&gt;
&lt;h3&gt;Basics of Hierarchical State Machine&lt;/h3&gt;
&lt;p&gt;Android framework uses a Hierarchical State Machine (HSM) to maintain the
different states of Wi-Fi connection. As the name indicates, all states are
organized in a tree, and there is one special initial state. The interface of
each state is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;enter()&lt;/code&gt;: called when entering this state.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exit()&lt;/code&gt;: called when exiting this state.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;processMessage()&lt;/code&gt;: called when message arrives.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The most import property of HSM is that when transitioning between states, we
first found the common ancestor state that's closest to current state, the we
exit from current state and all its ancestor state &lt;strong&gt;up to but not include&lt;/strong&gt; the
closest common ancestor, then enter all of the new states below the closet
common ancestor down to the new state. &lt;/p&gt;
&lt;p&gt;Here is a simple example HSM. &lt;/p&gt;
&lt;p&gt;&lt;img src="/images/hsm_example.png" class="center"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;S4&lt;/code&gt; is the initial state. When we first start the HSM, &lt;code&gt;S0.enter()&lt;/code&gt;,
&lt;code&gt;S1.enter()&lt;/code&gt; and &lt;code&gt;S4.enter()&lt;/code&gt; will be called in sequence. Suppose we want to
transit from &lt;code&gt;S0&lt;/code&gt; to &lt;code&gt;S7&lt;/code&gt;, since the closet common ancestor is &lt;code&gt;S0&lt;/code&gt;, &lt;code&gt;S4.exit()&lt;/code&gt;
&lt;code&gt;S1.exit()&lt;/code&gt;, &lt;code&gt;S2.enter()&lt;/code&gt;, &lt;code&gt;S5.enter()&lt;/code&gt; and &lt;code&gt;S7.enter()&lt;/code&gt; will be called in
sequence.&lt;/p&gt;
&lt;p&gt;More details about HSM can be found in the comments of
&lt;code&gt;frameworks/base/core/java/com/android/internal/util/StateMachin.java&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Wifi State Machine&lt;/h3&gt;
&lt;p&gt;Here is a subset of the whole Android Wifi HSM, states about P2P connections are
omitted.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/android_wifi_hsm.png" class="center"&gt;&lt;/p&gt;
&lt;p&gt;So in Initial state's &lt;code&gt;enter()&lt;/code&gt; function, we check if the driver is loaded, and
transit to Driver Loaded state if yes. Then we start wpa_supplicant and transit&lt;/p&gt;
&lt;p&gt;When we receive &lt;code&gt;SUP_CONNECTED_EVENT&lt;/code&gt;, we switch to Driver Started state. &lt;strong&gt;But
before that, we need to first enter Supplicant Started state first.&lt;/strong&gt; In the
&lt;code&gt;enter()&lt;/code&gt; function of Supplicant Started state, we set the supplicant scan
interval, which,  by default, is 15 seconds defined in
&lt;code&gt;frameworks/base/core/res/res/values/config.xml&lt;/code&gt; as
&lt;code&gt;config_wifi_supplicant_scan_interval&lt;/code&gt;. So the first fact of Android scan
behavior is that &lt;strong&gt;it'll do scan every 15 seconds as long as the wpa_supplicant
is started, no matter what the Wi-Fi condition is.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Then we come to Driver Started State, if we're not in scan mode, then we switch
to Disconnected Mode state. Scan mode means that Wi-Fi will be kept active, but
the only operation that will be supported is initiation of scans, and the
subsequent reporting of scan results. No attempts will be made to automatically
connect to remembered access points, nor will periodic scans be automatically
performed looking for remembered access points.&lt;/p&gt;
&lt;p&gt;In Disconnected Mode state's &lt;code&gt;enter()&lt;/code&gt; function, if the chipset does not support
background scan, then we enable framework periodic scan. The default interval is
300 seconds (5 mins), defined in &lt;code&gt;framworks/base/core/res/res/values/config.xml&lt;/code&gt;
as &lt;code&gt;config_wifi_framework_scan_interval&lt;/code&gt;. So the second behavior of Android scan
is that, &lt;strong&gt;in disconnected mode, it'll issue scan every 5 mins.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Then if received &lt;code&gt;NETWORK_CONNECTION_EVENT&lt;/code&gt; event from &lt;code&gt;WifiMonitor&lt;/code&gt;, we switch
to Obtaining IP state, which will initiate the DHCP process if needed. Then we
go through Veifying Link and Captive Portal Check state, and finally reach
Connected state.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;WifiWatchdogStateMachine&lt;/code&gt; will continuously monitor the link quality and packet
loss event, and will send out &lt;code&gt;POOR_LINK_DETECTED&lt;/code&gt; or &lt;code&gt;GOOD_LINK_DETECTED&lt;/code&gt;
event.&lt;/p&gt;
&lt;h3&gt;Android Scan Interval&lt;/h3&gt;
&lt;p&gt;Here is the statistics of scan interval distribution collected on 129 Nexus S
phones for about 5 months.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/scan_interval_stats.png" class="center"&gt;&lt;/p&gt;
&lt;p&gt;We can see that there are 4 peaks in the distribution. The peak around 15
seconds is due to wpa_supplicant scan interval, and the peak around 300 is due
to framework periodic scan. The peak around 60 seconds is not much clear yet,
probably due to the scan interval when P2P is connected.&lt;/p&gt;
&lt;p&gt;The interesting fact is actually the peak within 2 seconds. It seems most of the
scan results are clustered together in a small time windows (1~2 seconds).  This
is because when the driver is scanning, it'll report every time it detects one
AP. So in one scan, multiple scan result event will be triggered. And every time
when there is a low level scan result event, Android will report the complete
updated scan result list.&lt;/p&gt;</summary><category term="android"></category><category term="wifi"></category><category term="state machine"></category><category term="wpa_supplicant"></category></entry><entry><title>OS161 Debug Tips</title><link href="http://jhshi.me/2014/04/08/os161-debug-tips/index.html" rel="alternate"></link><updated>2014-04-08T20:45:00-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2014-04-08:2014/04/08/os161-debug-tips/index.html</id><summary type="html">&lt;p&gt;In doing OS161 assignments, if you don't know how to use GDB and how to use it
efficiently, you're screwed, and will die very ugly. It's a very important skill
to use GDB to identify what's wrong with your code. That's the first step
towards to fix the bug.&lt;/p&gt;


&lt;h3&gt;db: Connect to sys161 with less key strokes&lt;/h3&gt;
&lt;p&gt;The canonical way in GDB to connect to sys161 is using this command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;target remote unix:.sockets/gdb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You really don't want to type that every time you restart sys161. You may
wondered: &lt;strong&gt;there got be a better way to do this&lt;/strong&gt;. YES, there is.&lt;/p&gt;
&lt;p&gt;Create a file named &lt;code&gt;.gdbinit&lt;/code&gt; inside your &lt;code&gt;~/root&lt;/code&gt; directory, or wherever you
launch GDB. In that file, put these code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def db
    target remote unix:.sockets/gdb
end
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then in GDB, a simple &lt;code&gt;db&lt;/code&gt; command will connect GDB to sys161.&lt;/p&gt;
&lt;p&gt;How it works? Well, we defined a custom command called &lt;code&gt;db&lt;/code&gt;, which does the
dirty work. When GDB starts, it'll read the file named &lt;code&gt;.gdbinit&lt;/code&gt; in current
working directory if it exists. So GDB will recognize the &lt;code&gt;db&lt;/code&gt; command and know
what to do when we type &lt;code&gt;db&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;backtrace: WTF just happened?&lt;/h3&gt;
&lt;p&gt;Have you ever seen the kernel panic out of nowhere and you got no clue what just
happened? One of the purposes of the &lt;code&gt;panic&lt;/code&gt; function is to provide an universal
endpoint of all kinds of messy errors. So when your kernel does panic, you know
where to back trace the bug.&lt;/p&gt;
&lt;p&gt;So whenever your kernel panics, you don't panic. Just set a breakpoint at the
&lt;code&gt;panic&lt;/code&gt; function and do a &lt;code&gt;backtrace&lt;/code&gt; when your kernel got there. You'll find
out exactly which line of code trigger the panic. Then you can fix it.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/panic.png" alt="center" title="center"&gt;&lt;/p&gt;
&lt;h3&gt;until: Jump out of the loop&lt;/h3&gt;
&lt;p&gt;Have you ever try to jump out of a loop and just want to see the suspicious part
after a loop? For example, you use a &lt;code&gt;for&lt;/code&gt; loop to initialize the file table, or
process table, or whatever table. And you're pretty sure the loop is OK. But
when you step into that function, you may need to hopelessly press &lt;code&gt;next&lt;/code&gt; N
times to pass the loop.&lt;/p&gt;
&lt;p&gt;Of course there is a better way to do this! You can use the &lt;code&gt;until&lt;/code&gt; command of
GDB, which, as per GDB help message, "execute until the program reaches a source line greater than the current
or a specified location (same args as break command) within the current frame."&lt;/p&gt;
&lt;p&gt;Basically, it'll set a one-time breakpoint at the line you specified, and
execute until the CPU reach that line of code. &lt;/p&gt;
&lt;h3&gt;finish: Get the hell out of here&lt;/h3&gt;
&lt;p&gt;In short, this command will let GDB keep executing until current function
returns. It's useful when you accidentally step into a function which you know
works well. Or at the end of the function is a &lt;code&gt;for&lt;/code&gt; loop which you're sure is
OK.&lt;/p&gt;
&lt;h3&gt;display: Show me this, period.&lt;/h3&gt;
&lt;p&gt;You may know how to use &lt;code&gt;print&lt;/code&gt; command to print out variable values to make
sure everything is as expected. But there're some variables you want to examine
every time you hit a break point. For example, you may want to show the
process's pid whenever you hit &lt;code&gt;sys_fork&lt;/code&gt; or &lt;code&gt;sys_waitpid&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So, instead of type the &lt;code&gt;print&lt;/code&gt; command every time, you can use the &lt;code&gt;display&lt;/code&gt;
command. Basically, the usage is the same with &lt;code&gt;print&lt;/code&gt;, just that every time you
hit a breakpoint, GDB will display the variable's value.&lt;/p&gt;
&lt;h3&gt;condition: Only stop here if...&lt;/h3&gt;
&lt;p&gt;So you know how to set breakpoint, but some times you only want to hit that
breakpoint when certain things happens. For example, when you debug &lt;code&gt;sys_lseek&lt;/code&gt;
using &lt;code&gt;/testbin/fileonlytest&lt;/code&gt;, you may want to also check your &lt;code&gt;sys_write&lt;/code&gt; as
well, because it also updates the file handle offset. But if you set a break
point at &lt;code&gt;sys_write&lt;/code&gt;, you'll hit it every time the user program print something,
i.e., write stdout, which is not very interesting, and kind of annoying because
you don't really care about it.&lt;/p&gt;
&lt;p&gt;The solution is to use &lt;code&gt;condition&lt;/code&gt; command. Basically it allows you to set a
conditional breakpoint so GDB will only stop at the breakpoint if the condition
is true.&lt;/p&gt;
&lt;p&gt;For example, I only want to step into &lt;code&gt;sys_write&lt;/code&gt; when the &lt;code&gt;fd&lt;/code&gt; is 3. I can do
this:&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/condition.png" alt="center" title="center"&gt;&lt;/p&gt;
&lt;p&gt;If you have any other GDB tricks that you think is really awesome, welcome to
comment below and I'd be happy to include them here.&lt;/p&gt;</summary><category term="gdb"></category><category term="debugging"></category></entry><entry><title>Get Package Usage Statistics in Android</title><link href="http://jhshi.me/2014/04/02/get-package-usage-statistics-in-android/index.html" rel="alternate"></link><updated>2014-04-02T13:00:00-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2014-04-02:2014/04/02/get-package-usage-statistics-in-android/index.html</id><summary type="html">&lt;p&gt;In developing PhoneLab Conductor, I need to get various statistics about a
installed package to determine if a app is actively used by participant. For
example, for interactive apps, I'd like to know how many times the user launches
the app, and how long user actively interact with the app. For background apps
(e.g., data collection), I'd like to know how long the background service has
been running.&lt;/p&gt;


&lt;p&gt;There is this &lt;a href="http://source.android.com/devices/tech/input/dumpsys.html"&gt;dumpsys&lt;/a&gt; tool in Android which will provide various
information about the status of the system, including package statistics.&lt;/p&gt;
&lt;p&gt;Here is the sample output.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;root@android:/ &lt;span class="c"&gt;# dumpsys usagestats&lt;/span&gt;
Date: 20140402
  com.android.launcher: &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="nb"&gt;times&lt;/span&gt;, &lt;span class="m"&gt;43748&lt;/span&gt; ms
    com.android.launcher2.Launcher: &lt;span class="m"&gt;2&lt;/span&gt; starts
  com.tencent.mm: &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="nb"&gt;times&lt;/span&gt;, &lt;span class="m"&gt;167750&lt;/span&gt; ms
    com.tencent.mm.ui.chatting.ChattingUI: &lt;span class="m"&gt;4&lt;/span&gt; starts, 1000-1500ms&lt;span class="o"&gt;=&lt;/span&gt;2, 4000-5000ms&lt;span class="o"&gt;=&lt;/span&gt;1
    com.tencent.mm.ui.tools.ImageGalleryUI: &lt;span class="m"&gt;1&lt;/span&gt; starts, 250-500ms&lt;span class="o"&gt;=&lt;/span&gt;1
    com.tencent.mm.ui.LauncherUI: &lt;span class="m"&gt;4&lt;/span&gt; starts, 2000-3000ms&lt;span class="o"&gt;=&lt;/span&gt;1
    com.tencent.mm.ui.friend.FMessageConversationUI: &lt;span class="m"&gt;1&lt;/span&gt; starts, 250-500ms&lt;span class="o"&gt;=&lt;/span&gt;1
  com.android.settings: &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="nb"&gt;times&lt;/span&gt;, &lt;span class="m"&gt;93065&lt;/span&gt; ms
    com.android.settings.Settings: &lt;span class="m"&gt;2&lt;/span&gt; starts
    com.android.settings.SubSettings: &lt;span class="m"&gt;2&lt;/span&gt; starts, 250-500ms&lt;span class="o"&gt;=&lt;/span&gt;1, 500-750ms&lt;span class="o"&gt;=&lt;/span&gt;2
  com.google.android.gm: &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="nb"&gt;times&lt;/span&gt;, &lt;span class="m"&gt;11396&lt;/span&gt; ms
    com.google.android.gm.ConversationListActivityGmail: &lt;span class="m"&gt;1&lt;/span&gt; starts, 500-750ms&lt;span class="o"&gt;=&lt;/span&gt;1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At first glance, this is a perfect fit for my purpose. But there're two
problems.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This command needs to be run in shell. How can I get these information
   programatically using Java code? I definitely don't want to execute this
   shell command and then parse its output.&lt;/li&gt;
&lt;li&gt;Only interactive apps' statistics are included. What about background apps
   which may don't have an activity?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;IUsageStats Service&lt;/h3&gt;
&lt;p&gt;After poking around Android Settings app's source code, I found there is one
internal interface called &lt;code&gt;IUsageStats&lt;/code&gt;. It's defined in
&lt;code&gt;framework/base/core/java/com/android/internal/app/IUsageStats.aidl&lt;/code&gt; inside AOSP
tree. You can find it &lt;a href="https://android.googlesource.com/platform/frameworks/base.git/+/android-4.3_r2.1/core/java/com/android/internal/app/IUsageStats.aidl"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.android.internal.app&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.content.ComponentName&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.android.internal.os.PkgUsageStats&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;IUsageStats&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;noteResumeComponent&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ComponentName&lt;/span&gt; &lt;span class="n"&gt;componentName&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;notePauseComponent&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ComponentName&lt;/span&gt; &lt;span class="n"&gt;componentName&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;noteLaunchTime&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ComponentName&lt;/span&gt; &lt;span class="n"&gt;componentName&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;millis&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;PkgUsageStats&lt;/span&gt; &lt;span class="nf"&gt;getPkgUsageStats&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ComponentName&lt;/span&gt; &lt;span class="n"&gt;componentName&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;PkgUsageStats&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="nf"&gt;getAllPkgUsageStats&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Where &lt;code&gt;PkgUsageStats&lt;/code&gt; class is defined in 
&lt;code&gt;framework/base/core/java/com/android/internal/os/PkgUsageStats.java&lt;/code&gt;
&lt;a href="https://android.googlesource.com/platform/frameworks/base.git/+/android-4.2.2_r1/core/java/com/android/internal/os/PkgUsageStats.java"&gt;link&lt;/a&gt;. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PkgUsageStats&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Parcelable&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;packageName&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;launchCount&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;usageTime&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;componentResumeTimes&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// other stuff...&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It contains all the information I need about foreground apps!&lt;/p&gt;
&lt;p&gt;Now is the problem of how to access the internal class and interface of Android.
There's plenty way to do this. Since I have aosp source tree at hand, I just
copy those two files into my project. For &lt;code&gt;PkgUsageStats&lt;/code&gt;, I also need to copy
the aidl file
(&lt;code&gt;framework/base/core/java/com/android/internal/os/PkgUsageStats.aidl&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Here is the final directory structure of my &lt;code&gt;src&lt;/code&gt; folder.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;src/
|-- com
|   `-- android
|       `-- internal
|           |-- app
|           |   `-- IUsageStats.aidl
|           `-- os
|               |-- PkgUsageStats.aidl
|               `-- PkgUsageStats.java
`-- other stuff
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here is the code snippet that get the &lt;code&gt;IUsageStats&lt;/code&gt; service.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;SERVICE_MANAGER_CLASS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;android.os.ServiceManager&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Class&lt;/span&gt; &lt;span class="n"&gt;serviceManager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Class&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;forName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SERVICE_MANAGER_CLASS&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Method&lt;/span&gt; &lt;span class="n"&gt;getService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;serviceManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getDeclaredMethod&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;getService&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Class&lt;/span&gt;&lt;span class="o"&gt;[]{&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;});&lt;/span&gt;
    &lt;span class="n"&gt;mUsageStatsService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;IUsageStats&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Stub&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;asInterface&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;IBinder&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;getService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;invoke&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;usagestats&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;e&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TAG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Failed to get service manager class: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;mUsageStatsService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here I use Java reflection to get the class of &lt;code&gt;android.os.ServiceManager&lt;/code&gt;,
which is also internal interface.&lt;/p&gt;
&lt;p&gt;After that, you just get all the package statistics like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PkgUsageStats&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;stats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PkgUsageStats&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;();&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mUsageStatsService&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;PkgUsageStats&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;pkgUsageStats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mUsageStatsService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAllPkgUsageStats&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PkgUsageStats&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pkgUsageStats&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;stats&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;packageName&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;e&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TAG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Failed to get package usage stats: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Background Service Running Time&lt;/h3&gt;
&lt;p&gt;It seems that Settings-&amp;gt;Apps-&amp;gt;Running Apps are already showing the information
that how long a process or service has been running.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/running.png" class="center"&gt;&lt;/p&gt;
&lt;p&gt;After inspecting the source code of Settings app, I found that information is
coming from &lt;code&gt;ActivityManager.RunningServiceInfo&lt;/code&gt;. There is a field named
&lt;code&gt;activeSince&lt;/code&gt;, which is the time when the service was first made active.&lt;/p&gt;
&lt;h2&gt;=== UPDATE ===&lt;/h2&gt;
&lt;p&gt;It seems the reflection need system permission (I haven't tested yet). Since we
build our own platform, it's not a problem--we just sign our apk with the platform
key and declare our app's user as system in &lt;code&gt;AndroidManifest.xml&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;android:sharedUserId=&amp;quot;android.uid.system&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But if you don't have the platform key, then this approach probably won't work.
The other way I can think of is you run the &lt;code&gt;dumpsys&lt;/code&gt; command and parse the
output, but it still requites root permission.&lt;/p&gt;</summary><category term="dumpsys"></category><category term="usagestats"></category></entry><entry><title>Switch Channel Without Breaking TCP Connection in OpenWrt</title><link href="http://jhshi.me/2014/03/21/switch-channel-without-breaking-tcp-connection-in-openwrt/index.html" rel="alternate"></link><updated>2014-03-21T12:46:00-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2014-03-21:2014/03/21/switch-channel-without-breaking-tcp-connection-in-openwrt/index.html</id><summary type="html">&lt;p&gt;Recently, I've been working on dynamic channel selection based on channel
utilization. One problem I encountered is: how to switch both AP and devices'
channel without interrupting existing TCP connection.&lt;/p&gt;


&lt;h2&gt;First Intuitive Solution&lt;/h2&gt;
&lt;p&gt;I have a router (&lt;a href="http://wiki.openwrt.org/toh/tp-link/tl-wdr3500"&gt;TP-LINK TL-WDR3500&lt;/a&gt;) running &lt;a href="https://openwrt.org/"&gt;OpenWrt&lt;/a&gt;.
Wireless configurations, e.g., SSID, channel, tx power, are managed in Openwrt's
UCI system. More specifically, all Wifi configurations are stored in file
located in &lt;code&gt;/etc/config/wireless&lt;/code&gt;. In my case, the file looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;config wifi-device &amp;#39;radio0&amp;#39;
    option type &amp;#39;mac80211&amp;#39;
    option hwmode &amp;#39;11g&amp;#39;
    option path &amp;#39;platform/ar934x_wmac&amp;#39;
    option htmode &amp;#39;HT20&amp;#39;
    list ht_capab &amp;#39;LDPC&amp;#39;
    list ht_capab &amp;#39;SHORT-GI-20&amp;#39;
    list ht_capab &amp;#39;SHORT-GI-40&amp;#39;
    list ht_capab &amp;#39;TX-STBC&amp;#39;
    list ht_capab &amp;#39;RX-STBC1&amp;#39;
    list ht_capab &amp;#39;DSSS_CCK-40&amp;#39;
    option txpower &amp;#39;27&amp;#39;
    option channel &amp;#39;11&amp;#39;

config wifi-iface
    option device &amp;#39;radio0&amp;#39;
    option network &amp;#39;lan&amp;#39;
    option mode &amp;#39;ap&amp;#39;
    option ssid &amp;#39;PocketSniffer&amp;#39;
    option encryption &amp;#39;psk2&amp;#39;
    option key &amp;#39;XXXX&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;OpenWrt provides a command called &lt;code&gt;wifi&lt;/code&gt;, that can reload these configurations.
So my first solution is to &lt;code&gt;uci&lt;/code&gt; command to change the configuration and use
&lt;code&gt;wifi&lt;/code&gt; command to reload them.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_channel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;uci&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;set&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;wireless.radio0.channel=&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;wireless.radio1.channel=&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

  &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;uci&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;commit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;wifi&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will work in the sense that it can change the AP's channel. But the problem
is, the &lt;code&gt;wifi&lt;/code&gt; command will actually shut down the interface completely and
restart it. So any devices that connected to this AP will be de-associated.&lt;/p&gt;
&lt;h2&gt;What's the Problem?&lt;/h2&gt;
&lt;p&gt;From client's side of view, when the AP switches to another channel, here is
what happend:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Receive de-authentication frame from AP (ops, this AP is gone)&lt;/li&gt;
&lt;li&gt;Do active scan on every channel (probe-wait)&lt;/li&gt;
&lt;li&gt;Figure out a best AP to associate&lt;/li&gt;
&lt;li&gt;Send authentication and association request to newly selected AP&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is much like a typical handover process where a device switches between two
geographically co-located APs. Just that in this case, the two APs are actually
the same physical AP with different channel.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.cs.umd.edu/~waa/pubs/handoff-lat-acm.pdf"&gt;A. Mishra et al&lt;/a&gt; provides a thorough study on the handover process. In
short, the process can take up to a few hundred milliseconds, and any on-going
TCP connections will lost.&lt;/p&gt;
&lt;p&gt;This is undesired because the channel switch cost (extra latency and breaking
TCP connection) may neutralize the benefit of switching channel itself.&lt;/p&gt;
&lt;p&gt;Ideally, after channel switch, any authentication info at AP side should remain,
so that clients don't have to re-authenticate, and any established TCP
connection should also be kept. These requirements make sense because, after
all, channel is just medium to exchange data. Channel switch should NOT affect
any up layer state.&lt;/p&gt;
&lt;h2&gt;The Final Solution&lt;/h2&gt;
&lt;p&gt;After a bit research, I found that IEEE 802.11 standard (section 10.9.8 in 2012
standard) actually already defined the
mechanism to let AP announce the channel switch event and also let clients
switch channel accordingly - all happened in MAC layer. This feature quite fits
our needs.&lt;/p&gt;
&lt;p&gt;And the good new is that this feature has already been implemented in most
recent driver that adopting CFG80211 interface, and is exposed to user space
tools, such as hostapd or wpa_supplicant.&lt;/p&gt;
&lt;p&gt;The OpenWrt running on our router use hostapd as user space authenticator. And
it provides a command line tool called &lt;code&gt;hostapd_cli&lt;/code&gt; to interact with the
hostapd daemon. There is a command in &lt;code&gt;hostapd_cli&lt;/code&gt; called &lt;code&gt;chan_swtich&lt;/code&gt; that
does precisely what we wanted.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_channel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;

  &lt;span class="c"&gt;# do not use the wifi command to switch channel, but still maintain the&lt;/span&gt;
  &lt;span class="c"&gt;# channel coheraence of the configuration file&lt;/span&gt;

  &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;uci&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;set&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;wireless.radio0.channel=&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;wireless.radio1.channel=&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

  &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;uci&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;commit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

  &lt;span class="c"&gt;# this is the command that actually switches channel&lt;/span&gt;

  &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;devnull&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;chan_switch 1 &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;channel2freq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;hostapd_cli&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kill&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we still update the configuration file to maintain consistence between it
and the hostapd daemon. But instead of using &lt;code&gt;wifi&lt;/code&gt; command to reload the
configuration, we use the &lt;code&gt;chan_swtich&lt;/code&gt; command to change the channel.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;chan_switch&lt;/code&gt; takes a minimum of two arguments. The first is a &lt;code&gt;cs_count&lt;/code&gt;,
meaning switch channel after how many beacon frames. The second is frequency.
More usage info can be obtained by typing &lt;code&gt;chan_switch&lt;/code&gt; without any arguments in
&lt;code&gt;hostapd_cli&lt;/code&gt;.&lt;/p&gt;</summary><category term="openwrt"></category><category term="channel"></category><category term="wifi"></category><category term="hostapd"></category></entry><entry><title>OS161: Unknown syscall -1</title><link href="http://jhshi.me/2014/03/06/os161-unknown-syscall-1/index.html" rel="alternate"></link><updated>2014-03-06T16:50:00-05:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2014-03-06:2014/03/06/os161-unknown-syscall-1/index.html</id><summary type="html">&lt;p&gt;When working on OS161 system calls, you'll probably see a bunch of this error,
especially you haven't implemented &lt;code&gt;_exit&lt;/code&gt; syscall and try to do some basic user
programs, e.g., &lt;code&gt;p /bin/true&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note, this problem has been fixed in OS/161 version 1.99.07.&lt;/p&gt;


&lt;p&gt;The code for &lt;code&gt;/bin/true&lt;/code&gt; is as follows.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* Just exit with success. */&lt;/span&gt;
    &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It does nothing but just exit with 0. Because at this point, you may don't
have &lt;code&gt;exit&lt;/code&gt; syscall implemented, so it'll fail, so you'll see one error message
saying "Unknown syscall 3", in which 3 is just &lt;code&gt;SYS__exit&lt;/code&gt;. Then what happens?
Why are there a bunch of "Unknown syscall -1" following that?&lt;/p&gt;
&lt;p&gt;To understand this, you need to know about a bit of GCC optimization and also several
&lt;a href="http://www.mrc.uidaho.edu/mrc/people/jff/digital/MIPSir.html"&gt;MIPS instructions&lt;/a&gt;, especially &lt;code&gt;jal&lt;/code&gt; and &lt;code&gt;jr&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;MIPS Function Call and Return&lt;/h3&gt;
&lt;p&gt;Here is the MIPS assembly instruction that "calls" a function &lt;code&gt;foo&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;jal foo
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;jal&lt;/code&gt; stands for "Jump And Link", it will first save &lt;code&gt;$epc+8&lt;/code&gt; into register
&lt;code&gt;$ra&lt;/code&gt; (return address), and set &lt;code&gt;$epc&lt;/code&gt; to whatever address &lt;code&gt;foo&lt;/code&gt; are, to "jump"
to that function.&lt;/p&gt;
&lt;p&gt;Now you may wonder why &lt;code&gt;$ra&lt;/code&gt; is &lt;code&gt;$epc+8&lt;/code&gt;, since a natural next instruction
would be &lt;code&gt;$epc+4&lt;/code&gt;. That's because &lt;code&gt;$epc+4&lt;/code&gt; is in &lt;code&gt;jal&lt;/code&gt;'s &lt;a href="http://en.wikipedia.org/wiki/Delay_slot"&gt;delay slot&lt;/a&gt;,
which means the instruction will get executed &lt;strong&gt;before&lt;/strong&gt; the &lt;code&gt;jal&lt;/code&gt; instruction.
So the real &lt;strong&gt;next&lt;/strong&gt; instruction after the function call should be &lt;code&gt;$epc+8&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And when &lt;code&gt;foo&lt;/code&gt; is done and about to return, it just does this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;jr ra
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;jr&lt;/code&gt; stands for "Jump Register". It just set &lt;code&gt;$epc&lt;/code&gt; to whatever value in that
register. In this case, since &lt;code&gt;$ra&lt;/code&gt; contains the value of return address, the
&lt;code&gt;foo&lt;/code&gt; functions "returns" to the next instruction after &lt;code&gt;jal&lt;/code&gt; in callee.&lt;/p&gt;
&lt;h3&gt;GCC Optimization&lt;/h3&gt;
&lt;p&gt;As per the comments in &lt;code&gt;$OS161_SRC/user/lib/libc/stdlib/exit.c&lt;/code&gt;, GCC is way too
smart to know, without being explicitly told, that &lt;code&gt;exit&lt;/code&gt; doesn't return. So it
actually omit the &lt;code&gt;jr&lt;/code&gt; instruction at the end of &lt;code&gt;exit&lt;/code&gt;. That is, if &lt;code&gt;exit&lt;/code&gt;
&lt;em&gt;does&lt;/em&gt; return, the CPU will continue to execute whatever the following
instructions.&lt;/p&gt;
&lt;h3&gt;What really happened?&lt;/h3&gt;
&lt;p&gt;Here is the assembly code of &lt;code&gt;/bin/true&lt;/code&gt;. You can obtain it by doing this in the
&lt;code&gt;root&lt;/code&gt; directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;os161-objdump -d bin/true &amp;gt; true.S
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;00400100 &amp;lt;main&amp;gt;:
  400100:   27bdffe8    addiu   sp,sp,-24
  400104:   afbf0010    sw  ra,16(sp)
  400108:   0c10004d    jal 400134 &amp;lt;exit&amp;gt;
  40010c:   00002021    move    a0,zero

00400110 &amp;lt;__exit_hack&amp;gt;:
  400110:   27bdfff8    addiu   sp,sp,-8
  400114:   24020001    li  v0,1
  400118:   afa20000    sw  v0,0(sp)
  40011c:   8fa20000    lw  v0,0(sp)
  400120:   00000000    nop
  400124:   1440fffd    bnez    v0,40011c &amp;lt;__exit_hack+0xc&amp;gt;
  400128:   00000000    nop
  40012c:   03e00008    jr  ra
  400130:   27bd0008    addiu   sp,sp,8

00400134 &amp;lt;exit&amp;gt;:
  400134:   27bdffe8    addiu   sp,sp,-24
  400138:   afbf0010    sw  ra,16(sp)
  40013c:   0c100063    jal 40018c &amp;lt;_exit&amp;gt;
  400140:   00000000    nop
    ...

00400150 &amp;lt;__syscall&amp;gt;:
  400150:   0000000c    syscall
  400154:   10e00005    beqz    a3,40016c &amp;lt;__syscall+0x1c&amp;gt;
  400158:   00000000    nop
  40015c:   3c010044    lui at,0x44
  400160:   ac220430    sw  v0,1072(at)
  400164:   2403ffff    li  v1,-1
  400168:   2402ffff    li  v0,-1
  40016c:   03e00008    jr  ra
  400170:   00000000    nop
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So &lt;code&gt;main&lt;/code&gt; calls &lt;code&gt;exit&lt;/code&gt; (0x400108), &lt;code&gt;exit&lt;/code&gt; calls &lt;code&gt;_exit&lt;/code&gt; (0x40013c). &lt;strong&gt;Note that
at this point, &lt;code&gt;$ra=$epc+8=0x400144&lt;/code&gt;&lt;/strong&gt;. &lt;code&gt;_exit&lt;/code&gt; fails (because we haven't
implemented it yet), &lt;code&gt;$v0&lt;/code&gt; is set to -1, and
returns to &lt;code&gt;$ra&lt;/code&gt;. The memory between 0x400140 and 0x400150 are filled by 0,
which is &lt;code&gt;nop&lt;/code&gt; instruction in MIPS. So the CPU get all the way down to the
&lt;code&gt;__syscall&lt;/code&gt; function at 0x400150, and execute the &lt;code&gt;syscall&lt;/code&gt; instruction. At this
point, the value of &lt;code&gt;$v0&lt;/code&gt; is -1. That's why we see the first &lt;code&gt;Unknown syscall
-1&lt;/code&gt; error message.&lt;/p&gt;
&lt;p&gt;And after the syscall fails, the CPU will continue execution at 0x400154, and
finally do &lt;code&gt;jr ra&lt;/code&gt; (0x40016c). Since &lt;code&gt;$ra&lt;/code&gt; is still 0x400144, the whole process
repeats again. That's why you keep seeing &lt;code&gt;Unknown syscall -1&lt;/code&gt; error.&lt;/p&gt;
&lt;h3&gt;How to fix?&lt;/h3&gt;
&lt;p&gt;The problem is, GCC assumes &lt;code&gt;exit&lt;/code&gt; does not return, thus doesn't generate the
&lt;code&gt;jr ra&lt;/code&gt; instruction for &lt;code&gt;exit&lt;/code&gt;. But before we implement &lt;code&gt;_exit&lt;/code&gt; syscall, &lt;code&gt;exit&lt;/code&gt;
&lt;em&gt;does&lt;/em&gt; return. Then we lose control and things get messy.&lt;/p&gt;
&lt;p&gt;Then how to fix this? Well, the easiest way to fix this is...implement &lt;code&gt;_exit&lt;/code&gt;,
of course. After all, that's what you suppose to do in ASST2 anyway.&lt;/p&gt;
&lt;p&gt;In terms of the problem itself, the latest version of OS/161 (1.99.07) has fixed
this. Here is how:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt;
&lt;span class="nf"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;     * In a more complicated libc, this would call functions registered&lt;/span&gt;
&lt;span class="cm"&gt;     * with atexit() before calling the syscall to actually exit.&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;

&lt;span class="cp"&gt;#ifdef __mips__&lt;/span&gt;
    &lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;     * Because gcc knows that _exit doesn&amp;#39;t return, if we call it&lt;/span&gt;
&lt;span class="cm"&gt;     * directly it will drop any code that follows it. This means&lt;/span&gt;
&lt;span class="cm"&gt;     * that if _exit *does* return, as happens before it&amp;#39;s&lt;/span&gt;
&lt;span class="cm"&gt;     * implemented, undefined and usually weird behavior ensues.&lt;/span&gt;
&lt;span class="cm"&gt;     *&lt;/span&gt;
&lt;span class="cm"&gt;     * As a hack (this is quite gross) do the call by hand in an&lt;/span&gt;
&lt;span class="cm"&gt;     * asm block. Then gcc doesn&amp;#39;t know what it is, and won&amp;#39;t&lt;/span&gt;
&lt;span class="cm"&gt;     * optimize the following code out, and we can make sure&lt;/span&gt;
&lt;span class="cm"&gt;     * that exit() at least really does not return.&lt;/span&gt;
&lt;span class="cm"&gt;     *&lt;/span&gt;
&lt;span class="cm"&gt;     * This asm block violates gcc&amp;#39;s asm rules by destroying a&lt;/span&gt;
&lt;span class="cm"&gt;     * register it doesn&amp;#39;t declare ($4, which is a0) but this&lt;/span&gt;
&lt;span class="cm"&gt;     * hopefully doesn&amp;#39;t matter as the only local it can lose&lt;/span&gt;
&lt;span class="cm"&gt;     * track of is &amp;quot;code&amp;quot; and we don&amp;#39;t use it afterwards.&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="kr"&gt;__asm&lt;/span&gt; &lt;span class="k"&gt;volatile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;jal _exit;&amp;quot;&lt;/span&gt; &lt;span class="cm"&gt;/* call _exit */&lt;/span&gt;
               &lt;span class="s"&gt;&amp;quot;move $4, %0&amp;quot;&lt;/span&gt;    &lt;span class="cm"&gt;/* put code in a0 (delay slot) */&lt;/span&gt;
               &lt;span class="o"&gt;:&lt;/span&gt;        &lt;span class="cm"&gt;/* no outputs */&lt;/span&gt;
               &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;r&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;   &lt;span class="cm"&gt;/* code is an input */&lt;/span&gt;
    &lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;     * Ok, exiting doesn&amp;#39;t work; see if we can get our process&lt;/span&gt;
&lt;span class="cm"&gt;     * killed by making an illegal memory access. Use a magic&lt;/span&gt;
&lt;span class="cm"&gt;     * number address so the symptoms are recognizable and&lt;/span&gt;
&lt;span class="cm"&gt;     * unlikely to occur by accident otherwise.&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="kr"&gt;__asm&lt;/span&gt; &lt;span class="k"&gt;volatile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;li $2, 0xeeeee00f;&amp;quot;&lt;/span&gt; &lt;span class="cm"&gt;/* load magic addr into v0 */&lt;/span&gt;
               &lt;span class="s"&gt;&amp;quot;lw $2, 0($2)&amp;quot;&lt;/span&gt;       &lt;span class="cm"&gt;/* fetch from it */&lt;/span&gt;
               &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;            &lt;span class="cm"&gt;/* no args */&lt;/span&gt;
&lt;span class="cp"&gt;#else&lt;/span&gt;
    &lt;span class="n"&gt;_exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
    &lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;     * We can&amp;#39;t return; so if we can&amp;#39;t exit, the only other choice&lt;/span&gt;
&lt;span class="cm"&gt;     * is to loop.&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So if &lt;code&gt;_exit&lt;/code&gt; returns for any reason, we just access an address we know is
invalid, thus trigger an exception, and the kernel just panics.&lt;/p&gt;</summary><category term="syscall"></category></entry><entry><title>Tap Notification To Send Email</title><link href="http://jhshi.me/2014/01/06/tap-notification-to-send-email/index.html" rel="alternate"></link><updated>2014-01-06T13:14:00-05:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2014-01-06:2014/01/06/tap-notification-to-send-email/index.html</id><summary type="html">&lt;p&gt;In developing &lt;a href="https://play.google.com/store/apps/details?id=edu.buffalo.cse.phonelab.conductor"&gt;PhoneLab Conductor&lt;/a&gt; app, I need to provide user a way
to give us feedback after applying OTA update. Although this feature was
disabled in release, I thought it's worthwhile to record how to implement that
functionality anyway.&lt;/p&gt;


&lt;h3&gt;The Scenario&lt;/h3&gt;
&lt;p&gt;After the phone received and OTA update and rebooted to apply it, the conductor
app will pop up an notification, saying something like "You've updated your
platform, if there's any question, please tap to email for help.". So when user
tap the notification, a selection alert should pop up to let user select which
email client to use. Then open that email client with proper recipient, subject,
and email body (e.g., some extra debug information).&lt;/p&gt;
&lt;h3&gt;The Overall Flow&lt;/h3&gt;
&lt;p&gt;When we post an notification using &lt;a href="http://developer.android.com/reference/android/app/Notification.Builder.html"&gt;Notification.Builder&lt;/a&gt;, we can optionally
set an &lt;a href="http://developer.android.com/reference/android/app/PendingIntent.html"&gt;PendingIntent&lt;/a&gt; about what action to take when user tap that
notification. This is done via the &lt;code&gt;setContentIntent&lt;/code&gt; function. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setContentIntent&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reportProblemPendingIntent&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;notificationManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;notify&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PLATFORM_UPDATE_NOTIFICATION_ID&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And that
&lt;code&gt;PendingIntent&lt;/code&gt; will broadcast an custom intent so our &lt;code&gt;BoradcastReceiver&lt;/code&gt; will
be called and handle that tap event.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;reportProblemIntentName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getClass&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.ReportProblem&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;IntentFilter&lt;/span&gt; &lt;span class="n"&gt;reportProblemIntentFilter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;IntentFilter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reportProblemIntentName&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;PendingIntent&lt;/span&gt; &lt;span class="n"&gt;reportProblemPendingIntent&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;BroadcastReceiver&lt;/span&gt; &lt;span class="n"&gt;reportProblemReceiver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BroadcastReceiver&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onReceive&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Intent&lt;/span&gt; &lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// to be filled&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// in initilization function&lt;/span&gt;
&lt;span class="n"&gt;reportProblemPendingIntent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PendingIntent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getBroadcast&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; 
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Intent&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reportProblemIntentName&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PendingIntent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;FLAG_UPDATE_CURRENT&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;registerReceiver&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reportProblemReceiver&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reportProblemIntentFilter&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Launch Email App&lt;/h3&gt;
&lt;p&gt;Now when user tap the notification, the &lt;code&gt;onReceive&lt;/code&gt; handler will be called.&lt;/p&gt;
&lt;p&gt;First, we need to cancel the notification.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;NotificationManager&lt;/span&gt; &lt;span class="n"&gt;notificationManager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NotificationManager&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSystemService&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;NOTIFICATION_SERVICE&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;notificationManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cancel&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PLATFORM_UPDATE_NOTIFICATION_ID&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then we prepare the intent for launch email app.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Intent&lt;/span&gt; &lt;span class="n"&gt;emailIntent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Intent&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Intent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ACTION_SENDTO&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;emailIntent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setType&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/plain&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;messageBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;========================\n&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;  Optional debug info   \n&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;========================\n&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;Please describe your problems here.\n\n&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;uriText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;mailto:&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Uri&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;encode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PHONELAB_HELP_EMAIL&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;?subject=&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Uri&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;encode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;OTA Update Problem&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;amp;body=&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Uri&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;encode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;messageBody&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;emailIntent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setData&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Uri&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uriText&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that in order to actually launch the email chooser, we need another intent.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Intent&lt;/span&gt; &lt;span class="n"&gt;actualIntent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Intent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createChooser&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;emailIntent&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Send email to PhoneLab&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;actualIntent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addFlags&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Intent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;FLAG_ACTIVITY_NEW_TASK&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;startActivity&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actualIntent&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="notification"></category><category term="email"></category><category term="intent"></category></entry><entry><title>Sum of N Largest Numbers in Google Spreadsheet</title><link href="http://jhshi.me/2013/12/17/sum-of-n-largest-numbers-in-google-spreadsheet/index.html" rel="alternate"></link><updated>2013-12-17T15:52:00-05:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2013-12-17:2013/12/17/sum-of-n-largest-numbers-in-google-spreadsheet/index.html</id><summary type="html">&lt;p&gt;I encountered this problem when trying to get the final grades for 
&lt;a href="http://www.cse.buffalo.edu/~bina/cse241/fall2013/index.html"&gt;an course&lt;/a&gt; I TAed for this semester. There were 10 homework assignments
throughout the semester, and we're supposed to only count the 8 highest grades. 
So, how to accomplish this in Google Spreadsheet?&lt;/p&gt;


&lt;h3&gt;First Try&lt;/h3&gt;
&lt;p&gt;After poking around Google search results a little bit, I found this solution,
which &lt;em&gt;seems&lt;/em&gt; to work.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;=ceiling(sum(filter(E2:N2,E2:N2&amp;gt;=large(E2:N2, 8)))/8,1)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Where &lt;code&gt;E2:N2&lt;/code&gt; contains the 10 grades. The &lt;a href="https://support.google.com/drive/answer/3094008"&gt;&lt;code&gt;large&lt;/code&gt;&lt;/a&gt; function will return
the 8th highest grade of the 10, and then we only sum the grades that larger
than or equal to that grade.&lt;/p&gt;
&lt;p&gt;This seems all fine until I accidentally found that some students got more than
100 pts, which is impossible because all our grades are 100 based!&lt;/p&gt;
&lt;h3&gt;The Problem&lt;/h3&gt;
&lt;p&gt;Well, what's wrong with the previous formula? Suppose a student's 10 grades look
like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;94  97  92  94  98  100 100 100 100 100
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sort them in descending order&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; 1   2   3   4   5   6   7   8   9   10
100 100 100 100 100  98  97  94  94  92
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So in this case the 8th largest number is 94, yet there are two 94, and we
really just need one of them.&lt;/p&gt;
&lt;h3&gt;The Solution&lt;/h3&gt;
&lt;p&gt;After struggling in &lt;a href="https://support.google.com/drive/table/25273?hl=en"&gt;Google Spreadsheet function list&lt;/a&gt;, I found that we
can actually do &lt;a href="https://developers.google.com/chart/interactive/docs/querylanguage"&gt;SQL-like queries&lt;/a&gt; within the spreadsheet! This leads to
the final solution.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;=ceiling(sum(query(sort(transpose(E2:N2), 1, FALSE), &amp;quot;select * limit 8&amp;quot;))/8,1)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we first transpose the row data into column, then sort them in descending
order, then we just take the first 8 grades when calculating the average.&lt;/p&gt;</summary><category term="query"></category><category term="sort"></category><category term="spreadsheet"></category></entry><entry><title>OS161 Tool Chain Setup</title><link href="http://jhshi.me/2013/12/15/os161-tool-chain-setup/index.html" rel="alternate"></link><updated>2013-12-15T18:01:00-05:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2013-12-15:2013/12/15/os161-tool-chain-setup/index.html</id><summary type="html">&lt;p&gt;This post shows how to install os161 toolchain, including &lt;code&gt;bmake&lt;/code&gt;, &lt;code&gt;sys161&lt;/code&gt;,
etc. on your local machine.&lt;/p&gt;


&lt;h3&gt;Why Even Bother?&lt;/h3&gt;
&lt;p&gt;Some instructors [setup the environment on public machines][canada] that students can
share; some &lt;a href="http://www.ops-class.org"&gt;distribute the whole os161 develop environment in a VM appliance&lt;/a&gt;, 
in which the tool chain is already set up for you.  In both cases, students can 
start working on the OS itself immediately, instead of taking down by the
tool chain setting up process and loss confidence even before starting.&lt;/p&gt;
&lt;p&gt;However, I think it's still beneficial that we setup the tool chain on our local
machine by ourselves:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Virtual Machines typically suffer from performance degradation, especially when your
   machine is not that high-end (4 or 8 cores, 8 or 16 Gig RAM, etc.). And most
   people experienced video driver issues after accidentally upgrade the guest VM.&lt;/li&gt;
&lt;li&gt;The setting up process can help us understand at least how each tools interact.&lt;/li&gt;
&lt;li&gt;The cross-compiling experience could potentially useful in future projects/assignments.&lt;/li&gt;
&lt;li&gt;You can gain some confidence if you can set up the tool chain successfully.
   And confidence is the key to survive later assignments.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following instructions are tested under &lt;code&gt;Ubuntu 13.10 x86_64&lt;/code&gt; with gcc
version 4.8.1, they should, however, also work on other distros.&lt;/p&gt;
&lt;h3&gt;Directory Setup&lt;/h3&gt;
&lt;p&gt;Suppose you want to place the os161 related stuff in &lt;code&gt;~/projects/courses/os161&lt;/code&gt;,
then you would have to set up the directory structure like this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir -p ~/projects/courses/os161
mkdir -p ~/projects/courses/os161/toolbuild
mkdir -p ~/projects/courses/os161/tools/bin
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Eventually the &lt;code&gt;os161&lt;/code&gt; directory will be the top level directory for all our os161
stuff. And &lt;code&gt;toolbuild&lt;/code&gt; will contain all the downloaded and extracted packages,
and &lt;code&gt;tools&lt;/code&gt; will contain all the os161 environments, like the compiler, debugger, 
simulator, etc.&lt;/p&gt;
&lt;p&gt;To simplify further steps, we set up a few environment variables.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/projects/courses/os161/tools
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;BUILD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/projects/courses/os161/toolbuild
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;:&lt;span class="nv"&gt;$PREFIX&lt;/span&gt;/bin
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Of course you can install os161 tool chain anywhere you like, just make sure the
directory structure is right. Note that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In the whole process of doing this, you don't need to touch any file outside
   our &lt;code&gt;os161&lt;/code&gt; directory (unless explicitly stated). So if you must use &lt;code&gt;sudo&lt;/code&gt; 
   to copy some stuff, then you probably typed something wrong.&lt;/li&gt;
&lt;li&gt;If you choose to install the tool chain somewhere else, you need to adjust
   the variables accordingly.&lt;/li&gt;
&lt;li&gt;The environment variables (e.g., &lt;code&gt;PREFIX&lt;/code&gt;, &lt;code&gt;BUILD&lt;/code&gt;) are &lt;em&gt;only valid in current
   session&lt;/em&gt;, so in case you want to take a break(e.g., play guitar) during the
   process, make sure you still have those variables. You can do that by do
   &lt;code&gt;echo $PREFIX&lt;/code&gt;, make sure it's &lt;code&gt;~/projects/courses/os161/tools&lt;/code&gt;. If they
   disappear somehow, just redo the &lt;code&gt;export&lt;/code&gt; commands.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Download And Extract the Packages&lt;/h3&gt;
&lt;p&gt;You can download all the required packages in &lt;a href="http://www.eecs.harvard.edu/~dholland/os161/download/"&gt;this page&lt;/a&gt;. As of writing
this post, the latest packages are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.eecs.harvard.edu/~dholland/os161/download/binutils-2.17+os161-2.0.1.tar.gz"&gt;binutils-2.17+os161-2.0.1.tar.gz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.eecs.harvard.edu/~dholland/os161/download/gcc-4.1.2+os161-2.0.tar.gz"&gt;gcc-4.1.2+os161-2.0.tar.gz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.eecs.harvard.edu/~dholland/os161/download/gdb-6.6+os161-2.0.tar.gz"&gt;gdb-6.6+os161-2.0.tar.gz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.eecs.harvard.edu/~dholland/os161/download/bmake-20101215.tar.gz"&gt;bmake-20101215.tar.gz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.eecs.harvard.edu/~dholland/os161/download/mk-20100612.tar.gz"&gt;mk-20100612.tar.gz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.eecs.harvard.edu/~dholland/os161/download/sys161-1.99.06.tar.gz"&gt;sys161-1.99.06.tar.gz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Download the above packages and put them in the &lt;code&gt;toolbuild&lt;/code&gt; directory we just
created.&lt;/p&gt;
&lt;p&gt;Extract the packages as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$BUILD&lt;/span&gt;
tar xvf binutils-2.17+os161-2.0.1.tar.gz
tar xvf gcc-4.1.2+os161-2.0.tar.gz
tar xvf gdb-6.6+os161-2.0.tar.gz
tar xvf sys161-1.99.0.tar.gz
tar xvf bmake.tar.gz
&lt;span class="nb"&gt;cd &lt;/span&gt;bmake
tar xvf ../mk.tar.gz
&lt;span class="nb"&gt;cd&lt;/span&gt; ..
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that &lt;em&gt;we have to extract the &lt;code&gt;mk.tar.gz&lt;/code&gt; package &lt;em&gt;inside&lt;/em&gt; &lt;code&gt;bmake&lt;/code&gt; directory&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;Binutils&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;binutils-2.17+os161-2.0.1
./configure --nfp --disable-werror --target&lt;span class="o"&gt;=&lt;/span&gt;mips-harvard-os161 --prefix&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$PREFIX&lt;/span&gt;
find . -name &lt;span class="s1"&gt;&amp;#39;*.info&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; xargs touch
make
make install
&lt;span class="nb"&gt;cd&lt;/span&gt; ..
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note how we set the &lt;code&gt;--prefix&lt;/code&gt; when configure. That option is to tell the
Makefile where the generated binary or library files should go.&lt;/p&gt;
&lt;p&gt;Also, we fool the &lt;code&gt;make&lt;/code&gt; command by touching all the &lt;code&gt;texinfo&lt;/code&gt; files to make 
the &lt;code&gt;make&lt;/code&gt; think those files doesn't need to be rebuilt. Because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;They really don't need to be regenerated.&lt;/li&gt;
&lt;li&gt;We don't want to rebuilt them since it's highly possible that &lt;code&gt;makeinfo&lt;/code&gt; will
   yell out some annoying errors on those doc files.&lt;/li&gt;
&lt;li&gt;And we don't really care the docs...&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Checkpoint&lt;/h4&gt;
&lt;p&gt;After this step, you should have some &lt;code&gt;mips-harvard-os161-*&lt;/code&gt; binary files in the
&lt;code&gt;tools/bin&lt;/code&gt; directory.&lt;/p&gt;
&lt;h3&gt;GCC&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;gcc-4.1.2+os161-2.0
./configure --nfp --disable-shared --disable-threads --disable-libmudflap&lt;span class="se"&gt;\&lt;/span&gt;
        --disable-libssp --target&lt;span class="o"&gt;=&lt;/span&gt;mips-harvard-os161 --prefix&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$PREFIX&lt;/span&gt;
make -j 8
make install
&lt;span class="nb"&gt;cd&lt;/span&gt; ..
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The backslash in the &lt;code&gt;configure&lt;/code&gt; command is just to tell our shell that we
   haven't done typing, so do not execute the command just yet. If you type the
   whole command in one line, you don't need backslash.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make -j 8&lt;/code&gt; means use 8 threads when compile. Usually this will speed up the
   compilation process quite a little bit.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Checkpoint&lt;/h4&gt;
&lt;p&gt;After this step, you should see &lt;code&gt;mips-harvard-os161-gcc&lt;/code&gt; in the &lt;code&gt;tools/bin&lt;/code&gt;
directory.&lt;/p&gt;
&lt;h3&gt;GDB&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;gdb-6.6+os161-2.0
./configure --target&lt;span class="o"&gt;=&lt;/span&gt;mips-harvard-os161 --disable-werror --prefix&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$PREFIX&lt;/span&gt;
find . -name &lt;span class="s1"&gt;&amp;#39;*.info&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; xargs touch
make
make install
&lt;span class="nb"&gt;cd&lt;/span&gt; ..
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We need to &lt;code&gt;--disable-werror&lt;/code&gt; when configure. Because later version of gcc
   will report warnings that older version of gcc will not.&lt;/li&gt;
&lt;li&gt;Same as &lt;code&gt;binutils&lt;/code&gt;, we avoid rebuilding doc files here.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you see this error when do configure.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;configure&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;termcap&lt;/span&gt; &lt;span class="n"&gt;library&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You probably need to install the &lt;code&gt;libncurses5-dev&lt;/code&gt; package.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install libncurses5-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Checkpoint&lt;/h4&gt;
&lt;p&gt;After this step, you should see &lt;code&gt;mips-harvard-os161-gdb&lt;/code&gt; in the &lt;code&gt;tools/bin&lt;/code&gt;
directory.&lt;/p&gt;
&lt;h3&gt;SYS161&lt;/h3&gt;
&lt;p&gt;Sys161 is the simulator that our os161 will be running in.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;sys161-1.99.06
./configure --prefix&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$PREFIX&lt;/span&gt; mipseb
make
make install
&lt;span class="nb"&gt;cd&lt;/span&gt; ..
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Checkpoint&lt;/h4&gt;
&lt;p&gt;After this step, you should see &lt;code&gt;sys161&lt;/code&gt;, &lt;code&gt;hub161&lt;/code&gt;, &lt;code&gt;stat161&lt;/code&gt; and &lt;code&gt;trace161&lt;/code&gt;
symlinks in the &lt;code&gt;tools/bin&lt;/code&gt; directory. &lt;/p&gt;
&lt;h3&gt;Bmake&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;bmake
./boot-strap --prefix&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$PREFIX&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At the end of &lt;code&gt;boot-strap&lt;/code&gt; command output, you should see instructions on how to
install &lt;code&gt;bmake&lt;/code&gt; properly. In our case, it look like these:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir -p /home/jhshi/projects/courses/os161/tools/bin
cp /home/jhshi/projects/courses/os161/toolbuild/bmake/Linux/bmake /home/jhshi/projects/courses/os161/tools/bin/bmake-20101215
rm -f /home/jhshi/projects/courses/os161/tools/bin/bmake
ln -s bmake-20101215 /home/jhshi/projects/courses/os161/tools/bin/bmake
mkdir -p /home/jhshi/projects/courses/os161/tools/share/man/cat1
cp /home/jhshi/projects/courses/os161/toolbuild/bmake/bmake.cat1 /home/jhshi/projects/courses/os161/tools/share/man/cat1/bmake.1
sh /home/jhshi/projects/courses/os161/toolbuild/bmake/mk/install-mk /home/jhshi/projects/courses/os161/tools/share/mk
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Just do the commands &lt;em&gt;one by one&lt;/em&gt; in the order given.&lt;/p&gt;
&lt;h4&gt;Checkpoint&lt;/h4&gt;
&lt;p&gt;After this step, you should see &lt;code&gt;bmake&lt;/code&gt; symlink in &lt;code&gt;tools/bin&lt;/code&gt; directory. And a
bunch of &lt;code&gt;*.mk&lt;/code&gt; files in &lt;code&gt;tools/share/mk&lt;/code&gt; directory.&lt;/p&gt;
&lt;h3&gt;Create Symbolic Links&lt;/h3&gt;
&lt;p&gt;Now if you take a look at &lt;code&gt;$PREFIX/bin&lt;/code&gt;, you will see a list of executables
named like &lt;code&gt;mips-harvard-os161-*&lt;/code&gt;, it's convenient to give them shorter name so
that we can save a few keystrokes later.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$PREFIX&lt;/span&gt;/bin
sh -c &lt;span class="s1"&gt;&amp;#39;for i in mips-*; do ln -s $i os161-`echo $i | cut -d- -f4-`; done&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that the symbol around &lt;code&gt;echo $i $ cut -d- -f4-&lt;/code&gt; is the key that under 
{%key Esc %} (the same key with tilde (&lt;code&gt;~&lt;/code&gt;)).&lt;/p&gt;
&lt;h4&gt;Checkpoint&lt;/h4&gt;
&lt;p&gt;After this step, you should see a bunch of &lt;code&gt;os161-*&lt;/code&gt; symlinks in &lt;code&gt;tools/bin&lt;/code&gt;
directory. &lt;/p&gt;
&lt;h3&gt;PATH Setup&lt;/h3&gt;
&lt;p&gt;Now we've set up all required tools to build and run os161. &lt;/p&gt;
&lt;p&gt;In the first step, we change our &lt;code&gt;PATH&lt;/code&gt; environment variable to include the
&lt;code&gt;tools/bin&lt;/code&gt; directory. Now is the time to make it permanent so that we won't
need to type &lt;code&gt;export PATH=$PATH:~/projects/courses/os161/tools/bin&lt;/code&gt; every time we open terminal.
Add this line to your &lt;code&gt;.bashrc&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;:~/projects/courses/os161/tools/bin
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Checkpoint&lt;/h4&gt;
&lt;p&gt;Close current terminal and open an new one. Type this commands, and check if the
output matches.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;which sys161
&lt;span class="c"&gt;# should be something like /home/jhshi/projects/courses/os161/tools/bin&lt;/span&gt;
which bmake
&lt;span class="c"&gt;# should be something like /home/jhshi/projects/courses/os161/tools/bin&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Configure OS161&lt;/h3&gt;
&lt;p&gt;Now let's get to real business. Obtain a copy of the os161 source tree according
to your course's instruction. In this case, we'll use the one from
&lt;a href="http://www.ops-class.org"&gt;ops-class.org&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Suppose you've registered an account on &lt;a href="http://www.ops-class.org"&gt;ops-class.org&lt;/a&gt; and uploaded your 
public key. Then you can clone the source tree and configure as follows.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/projects/courses/os161
mkdir root
git clone ssh://src@src.ops-class.org/src/os161 src
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you encounter errors like this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cloning into &lt;span class="s1"&gt;&amp;#39;src&amp;#39;&lt;/span&gt;...
Permission denied &lt;span class="o"&gt;(&lt;/span&gt;publickey&lt;span class="o"&gt;)&lt;/span&gt;.
fatal: Could not &lt;span class="nb"&gt;read &lt;/span&gt;from remote repository.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then you probably didn't set up your key right. Make sure you put the private
key (normally &lt;code&gt;id_rsa&lt;/code&gt;) inside &lt;code&gt;~/.ssh/&lt;/code&gt;, and copy the content of &lt;code&gt;id_rsa.pub&lt;/code&gt;
to &lt;a href="http://www.ops-class.org"&gt;ops-class.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now we have the source tree, let's move on and configure it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;src
./configure --ostree&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/projects/courses/os161/root
bmake
bmake install
&lt;span class="nb"&gt;cd&lt;/span&gt; ..
cp tools/share/examples/sys161/sys161.conf.sample root/sys161.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We create an &lt;code&gt;root&lt;/code&gt; directory under &lt;code&gt;os161&lt;/code&gt;, this will be where the
   compiled user space binaries, and also the compiled kernel image will go.&lt;/li&gt;
&lt;li&gt;When configure the os, we specify the &lt;code&gt;--ostree&lt;/code&gt; argument, so that the
   binaries will be copied to the &lt;code&gt;root&lt;/code&gt; directory we just created. The default
   location is &lt;code&gt;~/root&lt;/code&gt;, which is probably not what you want.&lt;/li&gt;
&lt;li&gt;We must use &lt;code&gt;$HOME/projects/courses/os161/root&lt;/code&gt;, instead of
   &lt;code&gt;~/projects/courses/os161/root&lt;/code&gt;. Otherwise, &lt;code&gt;bmake&lt;/code&gt; will complain.&lt;/li&gt;
&lt;li&gt;We copy the sys161 configuration example to the &lt;code&gt;root&lt;/code&gt; directory. This
   configuration file is needed by &lt;code&gt;sys161&lt;/code&gt; - the simulator.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Checkpoint&lt;/h4&gt;
&lt;p&gt;Go to &lt;code&gt;~/projects/courses/os161/root&lt;/code&gt;, you should see some directories there, e.g.,
&lt;code&gt;bin&lt;/code&gt;, &lt;code&gt;hostbin&lt;/code&gt;, &lt;code&gt;lib&lt;/code&gt;, &lt;code&gt;man&lt;/code&gt;, etc.&lt;/p&gt;
&lt;h3&gt;Compile and Run the Kernel&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/projects/courses/os161/src/kern/conf
./config ASST0
&lt;span class="nb"&gt;cd&lt;/span&gt; ../compile/ASST0
bmake depend
bmake &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; bmake install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now let's fire up the kernel.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/projects/courses/os161/root
sys161 kernel
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Checkpoint&lt;/h4&gt;
&lt;p&gt;You should see outputs like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sys161: System/161 release 1.99.06, compiled Dec &lt;span class="m"&gt;15&lt;/span&gt; &lt;span class="m"&gt;2013&lt;/span&gt; 17:42:02

OS/161 base system version 1.99.05
Copyright &lt;span class="o"&gt;(&lt;/span&gt;c&lt;span class="o"&gt;)&lt;/span&gt; 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
President and Fellows of Harvard College.  All rights reserved.

Put-your-group-name-here&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s system version &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;ASST0 &lt;span class="c"&gt;#7)&lt;/span&gt;

320k physical memory available
Device probe...
lamebus0 &lt;span class="o"&gt;(&lt;/span&gt;system main bus&lt;span class="o"&gt;)&lt;/span&gt;
emu0 at lamebus0
ltrace0 at lamebus0
ltimer0 at lamebus0
beep0 at ltimer0
rtclock0 at ltimer0
lrandom0 at lamebus0
random0 at lrandom0
lhd0 at lamebus0
lhd1 at lamebus0
lser0 at lamebus0
con0 at lser0

cpu0: MIPS r3000
OS/161 kernel &lt;span class="o"&gt;[&lt;/span&gt;? &lt;span class="k"&gt;for&lt;/span&gt; menu&lt;span class="o"&gt;]&lt;/span&gt;:
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Resources&lt;/h3&gt;
&lt;p&gt;You can find more instructions on tool chain setup and os161 configuration in these pages.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.student.cs.uwaterloo.ca/~cs350/common/Install161NonCS.html"&gt;Installing OS/161 On Your Own Machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.eecs.harvard.edu/~dholland/os161/resources/setup.html"&gt;OS/161 Toolchain Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cs.hmc.edu/~geoff/classes/hmc.cs134.201209/buildos161.html"&gt;Building System/161 and the OS/161 Toolchain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ops-class.org/asst/0"&gt;ASST0: Introduction to OS/161&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="toolchain"></category><category term="bmake"></category><category term="sys161"></category><category term="texinfo"></category><category term="binutils"></category><category term="gcc"></category><category term="gdb"></category></entry><entry><title>Simulate Random MAC Protocol in NS2 (Part IV)</title><link href="http://jhshi.me/2013/12/15/simulate-random-mac-protocol-in-ns2-part-iv/index.html" rel="alternate"></link><updated>2013-12-15T13:01:00-05:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2013-12-15:2013/12/15/simulate-random-mac-protocol-in-ns2-part-iv/index.html</id><summary type="html">&lt;p&gt;Now we have &lt;a href="/2013/12/13/simulate-random-mac-protocol-in-ns2-part-i/"&gt;designed the simulator&lt;/a&gt;, &lt;a href="/2013/12/15/simulate-random-mac-protocol-in-ns2-part-ii/"&gt;add a new MAC protocol to NS2&lt;/a&gt;,
and &lt;a href="/2013/12/15/simulate-random-mac-protocol-in-ns2-part-iii/"&gt;implement the Random Resend MAC protocol&lt;/a&gt;, the final part will be
analyze the trace file to measure the performance of our new protocol.&lt;/p&gt;


&lt;h3&gt;Format of the Trance Entry&lt;/h3&gt;
&lt;p&gt;One line in the trace file may look like this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;s 0.010830867 _70_ MAC  --- 27 cbr 148 [0 46000000 8 0] ------- [70:0 0:0 32 0] [0] 0 0
|      |        |   |        |  |   |
|      |        |   |        |  |   +----- Packet Size
|      |        |   |        |  +--------- Traffic Type
|      |        |   |        +------------ Packet UID
|      |        |   +--------------------- Layer
|      |        +------------------------- Node ID
|      +---------------------------------- Time
+----------------------------------------- Event Type
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can find more details about the trace format &lt;a href="http://nsnam.isi.edu/nsnam/index.php/NS-2_Trace_Formats"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Trace Filtering&lt;/h3&gt;
&lt;p&gt;In this project, we're only interested the traces that&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;From MAC layer, and&lt;/li&gt;
&lt;li&gt;With CBR traffic type&lt;/li&gt;
&lt;li&gt;With Event Type in "Send"(s), "Receive"(r) and "Drop"(D)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So we first filter those not-so-interesting traces out.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trace_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trace_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;raw_lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; raw traces found.&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;raw_lines&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

  &lt;span class="n"&gt;traces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;raw_lines&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;s&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;D&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;continue&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;MAC&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;continue&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;cbr&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;continue&lt;/span&gt;

    &lt;span class="n"&gt;traces&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;action&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;node&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;pid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;])})&lt;/span&gt;


  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; filtered traces found.&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;traces&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;traces&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Delivery Probability&lt;/h3&gt;
&lt;p&gt;To calculate the delivery probability, we need to know&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How many unique packets are sent out by all source nodes?&lt;/li&gt;
&lt;li&gt;How many unique packets received by the sink node?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These two metrics can be easily obtained as following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;node&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;traces&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; nodes found.&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="n"&gt;sent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;pid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;traces&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;recv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;pid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;traces&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;node&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;SINK_NODE&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;action&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sent: &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;, recv: &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;, P: &lt;/span&gt;&lt;span class="si"&gt;%.2f%%&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sent&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Remember that we use &lt;code&gt;LossMonitor&lt;/code&gt; as sink? Now is the time to cross-reference
the results here with the ones from the stats file. The total received packets
number should match.&lt;/p&gt;
&lt;p&gt;The final delivery probability w.s.t the repeat count &lt;code&gt;X&lt;/code&gt; is somehow like this
in my case (packet size is 16 bytes).&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/prob.png"&gt;&lt;/p&gt;
&lt;p&gt;Note that somehow this is not the ideal probability distribution. Please refer
to this paper for theoretical analysis and also simulation results.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://ieeexplore.ieee.org/xpl/login.jsp?tp=&amp;amp;arnumber=4300816&amp;amp;url=http%3A%2F%2Fieeexplore.ieee.org%2Fxpls%2Fabs_all.jsp%3Farnumber%3D4300816"&gt;QoMOR: A QoS-aware MAC protocol using Optimal Retransmission for Wireless
Intra-Vehicular Sensor Networks&lt;/a&gt;&lt;/p&gt;</summary><category term="ns2"></category><category term="mac"></category><category term="trace"></category><category term="python"></category></entry><entry><title>Simulate Random MAC Protocol in NS2 (Part III)</title><link href="http://jhshi.me/2013/12/15/simulate-random-mac-protocol-in-ns2-part-iii/index.html" rel="alternate"></link><updated>2013-12-15T12:11:00-05:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2013-12-15:2013/12/15/simulate-random-mac-protocol-in-ns2-part-iii/index.html</id><summary type="html">&lt;p&gt;Now we have the &lt;a href="/2013/12/13/simulate-random-mac-protocol-in-ns2-part-i/"&gt;simulation script&lt;/a&gt;, and also
&lt;a href="/2013/12/15/simulate-random-mac-protocol-in-ns2-part-ii/"&gt;added our protocol to the NS2 simulator&lt;/a&gt;, which is still a placeholder.
Now we're going the actually implement our own random MAC protocol.&lt;/p&gt;


&lt;h3&gt;Protocol Description&lt;/h3&gt;
&lt;p&gt;According to the project specification, when sending out an packet, our protocol
is supposed to send out &lt;code&gt;X&lt;/code&gt; copies of the packet at random time before sending
out next packet. As long as the receiver receive at least one of the &lt;code&gt;X&lt;/code&gt;
duplicates, we say this packet was successfully delivered.&lt;/p&gt;
&lt;h3&gt;Protocol Parameters&lt;/h3&gt;
&lt;p&gt;From the protocol description, it's obvious that we need to know:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How many copies to send for one packet? I.e., the &lt;code&gt;X&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The interval of sending packet from up layer, so that we can schedule
   resending before up layer pass down the next packet.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So we add two class variables in &lt;code&gt;mac/rmac.h&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;repeatTx_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;interval_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And in the constructor function of &lt;code&gt;RMAC&lt;/code&gt; class, we need to bind the variables
through TCL so that we can pass values in TCL script.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;repeatTx_&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;repeatTx_&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;interval_&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;interval_&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;TCL Object Binding&lt;/h3&gt;
&lt;p&gt;We also need to let TCL runtime to &lt;em&gt;know&lt;/em&gt; our protocol. That is, when we
write this in TCL script.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;set&lt;/span&gt; val&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;mac&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; Mac&lt;span class="o"&gt;/&lt;/span&gt;RMAC
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;TCL runtime would have to know the corresponding class of the &lt;code&gt;Mac/RMAC&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Since we copied code from &lt;code&gt;mac-simple.cc&lt;/code&gt; and also made the changes, this part
has been done, but let's just review the code snippet that does the binding.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RMACClass&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;TclClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;RMACClass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;TclClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Mac/RMAC&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
        &lt;span class="n"&gt;TclObject&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;RMAC&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;class_rmac&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here the &lt;code&gt;Mac/RMAC&lt;/code&gt; string will be our protocol name.&lt;/p&gt;
&lt;h3&gt;Interaction with Adjacent Layer&lt;/h3&gt;
&lt;p&gt;The most important function in any NS2 MAC protocol is the &lt;code&gt;recv&lt;/code&gt; function. It's
the interface to upper (Network Layer) and also lower (Physical Layer) layers.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;recv&lt;/code&gt; of our MAC protocol will look like this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt;
&lt;span class="n"&gt;RMAC&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Packet&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Handler&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;hdr_cmn&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;hdr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HDR_CMN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="cm"&gt;/* let RMAC::send handle the outgoing packets */&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hdr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;hdr_cmn&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;DOWN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;sendDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;sendUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we first get the header of the packet, and check it's directory.
&lt;code&gt;hdr_cmn::DOWN&lt;/code&gt; means this packet is from upper layer, and we need to send it
out. &lt;code&gt;hdr_cmn::UP&lt;/code&gt; means this packet is from lower layer (received packet), we 
need to deliver it to upper layer.&lt;/p&gt;
&lt;h3&gt;Repeat Sending&lt;/h3&gt;
&lt;p&gt;The key part of our MAC protocol is to repeated send multiple copies when
sending out a packet. So we need to mainly modify the &lt;code&gt;sendDown&lt;/code&gt; function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;max_delay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// generate repeatTx_ number of random delays&lt;/span&gt;
&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;delays&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;repeatTx_&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;repeatTx_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;delays&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;100.0&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;interval_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delays&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;max_delay&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;max_delay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;delays&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// use dummy tx handler for first repeatTx_-1 packets&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;repeatTx_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delays&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;max_delay&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Scheduler&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;schedule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;resendHandler_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;delays&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="n"&gt;delays&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;waitTimer&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;restart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_delay&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rx_state_&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;MAC_IDLE&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// we&amp;#39;re idle, so start sending now&lt;/span&gt;
    &lt;span class="n"&gt;sendTimer&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;restart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_delay&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;txtime&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// we&amp;#39;re currently receiving, so schedule it after&lt;/span&gt;
    &lt;span class="c1"&gt;// we finish receiving&lt;/span&gt;
    &lt;span class="n"&gt;sendTimer&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;restart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_delay&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;txtime&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;HDR_CMN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pktRx_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;txtime&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We first generate &lt;code&gt;repeatTx_&lt;/code&gt; number of delays before next interval. Except for
the &lt;code&gt;max_delay&lt;/code&gt;, which will be the last copy to send, we use the &lt;code&gt;Scheduler&lt;/code&gt; to
resend the duplicated packets, and for last packet, we just use the timer
scheme of &lt;code&gt;SimpleMac&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here is the &lt;code&gt;resendHander_&lt;/code&gt; looks like.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt;
&lt;span class="n"&gt;RMACResendHandler&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;mac_&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;resend&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;Packet&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;
&lt;span class="n"&gt;RMAC&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;resend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Packet&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;downtarget_&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can find the complete code for &lt;code&gt;rmac.cc&lt;/code&gt; and &lt;code&gt;rmac.h&lt;/code&gt; &lt;a href="https://github.com/jhshi/course.network.ns2"&gt;here&lt;/a&gt;.&lt;/p&gt;</summary><category term="mac"></category><category term="ns2"></category></entry><entry><title>Simulate Random MAC Protocol in NS2 (Part II)</title><link href="http://jhshi.me/2013/12/15/simulate-random-mac-protocol-in-ns2-part-ii/index.html" rel="alternate"></link><updated>2013-12-15T11:37:00-05:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2013-12-15:2013/12/15/simulate-random-mac-protocol-in-ns2-part-ii/index.html</id><summary type="html">&lt;p&gt;In &lt;a href="/2013/12/13/simulate-random-mac-protocol-in-ns2-part-i/"&gt;previous post&lt;/a&gt;, we wrote an NS2 simulation program that fits the
project specification, except that we're using the standard 802.11 MAC protocol.
In this post, we'll discuss how to add our own MAC protocol to NS2.&lt;/p&gt;


&lt;h3&gt;Compile NS2 from Source&lt;/h3&gt;
&lt;p&gt;To add an new protocol to NS2, we actually need to download the whole NS2 source
tree and add some extra CPP files there, which is embarrassingly inconvenient.
But for now, we have to live with it.&lt;/p&gt;
&lt;p&gt;Anyways, download the NS2 all-in-one package from &lt;a href="http://sourceforge.net/projects/nsnam/files/allinone/ns-allinone-2.35/ns-allinone-2.35.tar.gz/download"&gt;here&lt;/a&gt;, put the
tarball somewhere in your home, say &lt;code&gt;~/projects/&lt;/code&gt;, then extract it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/projects
tar xvf ns2-allinone-2.35.tar.gz
&lt;span class="nb"&gt;cd &lt;/span&gt;ns2-allinone-2.35
./install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The install script will only generate the binaries in current directory, and
will NOT actually copy them to anywhere. After the compilation is done, you'll
will find the &lt;code&gt;ns&lt;/code&gt; executable in the &lt;code&gt;ns-2.35&lt;/code&gt; subdirectory.&lt;/p&gt;
&lt;p&gt;Suppose you put your project files (e.g., the TCL file we wrote) in
&lt;code&gt;~/projects/network/ns2&lt;/code&gt;, then it's convenient to have an symbol link to the
&lt;code&gt;ns&lt;/code&gt; binary. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/projects/network/ns2
ln -svf ~/projects/ns2-allinone-2.35/ns-2.35/ns myns
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The you'll have an symbol link called &lt;code&gt;myns&lt;/code&gt;, which points the actual
executable. Then you can run your simulation this way.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;myns random_mac.tcl
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In which the &lt;code&gt;random_mac.tcl&lt;/code&gt; is the TCL file we wrote in last post.&lt;/p&gt;
&lt;h3&gt;Add a New Mac Protocol&lt;/h3&gt;
&lt;p&gt;To add a new MAC protocol, say &lt;code&gt;RMAC&lt;/code&gt;, we need to do the following. Suppose
you're in the &lt;code&gt;ns2-allinone-2.35/ns-2.35&lt;/code&gt; directory.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Create &lt;code&gt;rmac.cc&lt;/code&gt; and &lt;code&gt;rmac.h&lt;/code&gt; file in the &lt;code&gt;mac&lt;/code&gt; subdirectory, for now, just
   leave them empty.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Edit &lt;code&gt;Makefile&lt;/code&gt;, find the line contains &lt;code&gt;mac/smac.o&lt;/code&gt; (around line 249), add one line like this&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    .....
    mac/mac-802_3.o mac/mac-tdma.o mac/smac.o &lt;span class="se"&gt;\&lt;/span&gt;
    mac/rmac.o&lt;span class="se"&gt;\&lt;/span&gt;
    .....
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So now, when you do &lt;code&gt;make&lt;/code&gt; inside the &lt;code&gt;ns-2.35&lt;/code&gt; directory, our source
file &lt;code&gt;rmac.cc&lt;/code&gt; and &lt;code&gt;rmac.h&lt;/code&gt; will be compiled. Of course, at this point, there is
no content at those two files, which we'll add later.&lt;/p&gt;
&lt;h3&gt;Adapt the &lt;code&gt;SimpleMac&lt;/code&gt; Protocol&lt;/h3&gt;
&lt;p&gt;The NS2 source contains a simple MAC protocol called &lt;code&gt;SimpleMac&lt;/code&gt;, which is a
good start point for us to adapt.&lt;/p&gt;
&lt;p&gt;Just copy all the contents in &lt;code&gt;mac/mac-simple.h&lt;/code&gt; to &lt;code&gt;mac/rmac.h&lt;/code&gt;, and
&lt;code&gt;mac/mac-simple.cc&lt;/code&gt; to &lt;code&gt;mac/rmac.cc&lt;/code&gt;. Then change &lt;code&gt;Mac/Simple&lt;/code&gt; to &lt;code&gt;Mac/RMAC&lt;/code&gt; 
line 60 of the &lt;code&gt;rmac.cc&lt;/code&gt; file. You should be able to compile using the &lt;code&gt;make&lt;/code&gt;
command in &lt;code&gt;ns-2.35&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;If everything is OK, go back to the project directory &lt;code&gt;~/projects/network/ns2&lt;/code&gt;,
change the MAC protocol to &lt;code&gt;Mac/RMAC&lt;/code&gt; (previously &lt;code&gt;Mac/802.11&lt;/code&gt;), you should be
able to run the simulation using &lt;code&gt;myns&lt;/code&gt;, which points to the &lt;code&gt;ns&lt;/code&gt; binary we just
compiled.&lt;/p&gt;</summary><category term="ns2"></category><category term="tcl"></category><category term="mac"></category><category term="c++"></category></entry><entry><title>Simulate Random MAC Protocol in NS2 (Part I)</title><link href="http://jhshi.me/2013/12/13/simulate-random-mac-protocol-in-ns2-part-i/index.html" rel="alternate"></link><updated>2013-12-13T12:54:00-05:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2013-12-13:2013/12/13/simulate-random-mac-protocol-in-ns2-part-i/index.html</id><summary type="html">&lt;p&gt;In this network project, we would need to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Write an simulator using TCL&lt;/li&gt;
&lt;li&gt;Add an new MAC protocol to NS2&lt;/li&gt;
&lt;li&gt;Analyze the simulation results&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's tackle them one by one. In this post, we'll mainly focus on the simulator
part.&lt;/p&gt;


&lt;h3&gt;Get Familiar with TCL&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Tcl"&gt;TCL&lt;/a&gt; is actually a quite simple language. It's designed for fast
scripting and glue things together. You can find many tutorials online. I found
&lt;a href="http://users.belgacom.net/bruno.champagne/tcl.html"&gt;this one&lt;/a&gt; especially clean, and straightforward.&lt;/p&gt;
&lt;h3&gt;Simulator Parameters&lt;/h3&gt;
&lt;p&gt;First, let's define some parameters that we'll use later.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# ======================================================================&lt;/span&gt;
&lt;span class="c"&gt;# Project parameters&lt;/span&gt;
&lt;span class="c"&gt;# ======================================================================&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; val&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;node_num&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;       &lt;span class="mi"&gt;101&lt;/span&gt; 
set val&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;duration&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;       &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; val&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;packetsize&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;     &lt;span class="mi"&gt;16&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; val&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;repeatTx&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;       &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; val&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;interval&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;       &lt;span class="mf"&gt;0.02&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; val&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;dimx&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;           &lt;span class="mi"&gt;50&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; val&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;dimy&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;           &lt;span class="mi"&gt;50&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; val&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;nam_file&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;       &lt;span class="s2"&gt;&amp;quot;jinghaos_pa3.nam&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; val&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;trace_file&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;     &lt;span class="s2"&gt;&amp;quot;jinghaos_pa3.tr&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; val&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;stats_file&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;     &lt;span class="s2"&gt;&amp;quot;jinghaos_pa3.stats&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; val&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;node_size&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;      &lt;span class="mi"&gt;5&lt;/span&gt;

&lt;span class="c"&gt;# ======================================================================&lt;/span&gt;
&lt;span class="c"&gt;# Node options&lt;/span&gt;
&lt;span class="c"&gt;# ======================================================================&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; val&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;chan&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;           Channel&lt;span class="o"&gt;/&lt;/span&gt;WirelessChannel    &lt;span class="k"&gt;;&lt;/span&gt;&lt;span class="c"&gt;# channel type&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; val&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;prop&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;           Propagation&lt;span class="o"&gt;/&lt;/span&gt;TwoRayGround   &lt;span class="k"&gt;;&lt;/span&gt;&lt;span class="c"&gt;# radio-propagation model&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; val&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;netif&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;          Phy&lt;span class="o"&gt;/&lt;/span&gt;WirelessPhy            &lt;span class="k"&gt;;&lt;/span&gt;&lt;span class="c"&gt;# network interface type&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; val&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;mac&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;            Mac&lt;span class="o"&gt;/&lt;/span&gt;RMAC                 &lt;span class="k"&gt;;&lt;/span&gt;&lt;span class="c"&gt;# MAC type&lt;/span&gt;
&lt;span class="c"&gt;#set val(mac)            Mac/802_11                 ;# MAC type&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; val&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ifq&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;            Queue&lt;span class="o"&gt;/&lt;/span&gt;DropTail&lt;span class="o"&gt;/&lt;/span&gt;PriQueue    &lt;span class="k"&gt;;&lt;/span&gt;&lt;span class="c"&gt;# interface queue type&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; val&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ll&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;             LL                         &lt;span class="k"&gt;;&lt;/span&gt;&lt;span class="c"&gt;# link layer type&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; val&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ant&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;            Antenna&lt;span class="o"&gt;/&lt;/span&gt;OmniAntenna        &lt;span class="k"&gt;;&lt;/span&gt;&lt;span class="c"&gt;# antenna model&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; val&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ifqlen&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;         &lt;span class="mi"&gt;50&lt;/span&gt;                         &lt;span class="k"&gt;;&lt;/span&gt;&lt;span class="c"&gt;# max packet in ifq&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; val&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;nn&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;             &lt;span class="nv"&gt;$val&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;node_num&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;                          &lt;span class="k"&gt;;&lt;/span&gt;&lt;span class="c"&gt;# number of mobilenodes&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; val&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;rp&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;             DSDV                       &lt;span class="k"&gt;;&lt;/span&gt;&lt;span class="c"&gt;# routing protocol&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first part is parameters from the project specification. Here we have 101
nodes (100 source node plus 1 sink node), simulation duration, packet rate,
terrain size, etc.&lt;/p&gt;
&lt;p&gt;The second part is for node configuration. Here we use &lt;code&gt;WirelessChannel&lt;/code&gt; with
&lt;code&gt;DSDV&lt;/code&gt; routing protocol. Note that for MAC protocol, we use &lt;code&gt;Mac/RMAC&lt;/code&gt;, which
stands for the random MAC protocol we'll add to NS2. Of course, at this point,
we don't have our RMAC protocol yet, so you can substitute it with &lt;code&gt;Mac/802_11&lt;/code&gt;
for the moment.&lt;/p&gt;
&lt;h3&gt;Simulator Configuration&lt;/h3&gt;
&lt;p&gt;We can obtain an instance of the simulator, and configure it this way.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# ======================================================================&lt;/span&gt;
&lt;span class="c"&gt;# Global variables&lt;/span&gt;
&lt;span class="c"&gt;# ======================================================================&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; ns                      &lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;new&lt;/span&gt; Simulator&lt;span class="k"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; tracefd                 &lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt; &lt;span class="nv"&gt;$val&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;trace_file&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; w&lt;span class="k"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; nam                     &lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt; &lt;span class="nv"&gt;$val&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;nam_file&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; w&lt;span class="k"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; stats                   &lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt; &lt;span class="nv"&gt;$val&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;stats_file&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; w&lt;span class="k"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;$ns&lt;/span&gt; &lt;span class="nv"&gt;namtrace-all-wireless&lt;/span&gt;   &lt;span class="nv"&gt;$nam&lt;/span&gt; &lt;span class="nv"&gt;$val&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;dimx&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;$val&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;dimy&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;$ns&lt;/span&gt; &lt;span class="k"&gt;trace&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;all               &lt;span class="nv"&gt;$tracefd&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; topo                    &lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;new&lt;/span&gt; Topography&lt;span class="k"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;$topo&lt;/span&gt; &lt;span class="nv"&gt;load_flatgrid&lt;/span&gt;         &lt;span class="nv"&gt;$val&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;dimx&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;$val&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;dimy&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we set up various global variables, including trace and stats file fd, and
also the topology.&lt;/p&gt;
&lt;p&gt;The we configure the node.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# Create God&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="nv"&gt;create-god&lt;/span&gt; &lt;span class="nv"&gt;$val&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;nn&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;#Mac/RMAC set repeatTx_ $val(repeatTx)&lt;/span&gt;
&lt;span class="c"&gt;#Mac/RMAC set interval_ $val(interval)&lt;/span&gt;

&lt;span class="nv"&gt;$ns&lt;/span&gt; &lt;span class="nv"&gt;node-config&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;
        &lt;span class="nv"&gt;-adhocRouting&lt;/span&gt; &lt;span class="nv"&gt;$val&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;rp&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;
        &lt;span class="nv"&gt;-llType&lt;/span&gt; &lt;span class="nv"&gt;$val&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ll&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;
        &lt;span class="nv"&gt;-macType&lt;/span&gt; &lt;span class="nv"&gt;$val&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;mac&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;
        &lt;span class="nv"&gt;-ifqType&lt;/span&gt; &lt;span class="nv"&gt;$val&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ifq&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;
        &lt;span class="nv"&gt;-ifqLen&lt;/span&gt; &lt;span class="nv"&gt;$val&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ifqlen&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;
        &lt;span class="nv"&gt;-antType&lt;/span&gt; &lt;span class="nv"&gt;$val&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ant&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;
        &lt;span class="nv"&gt;-propType&lt;/span&gt; &lt;span class="nv"&gt;$val&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;prop&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;
        &lt;span class="nv"&gt;-phyType&lt;/span&gt; &lt;span class="nv"&gt;$val&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;netif&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;
        &lt;span class="nv"&gt;-channelType&lt;/span&gt; &lt;span class="nv"&gt;$val&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;chan&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;
        &lt;span class="nv"&gt;-topoInstance&lt;/span&gt; &lt;span class="nv"&gt;$topo&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;
        &lt;span class="nv"&gt;-agentTrace&lt;/span&gt; ON &lt;span class="err"&gt;\&lt;/span&gt;
        &lt;span class="nv"&gt;-routerTrace&lt;/span&gt; ON &lt;span class="err"&gt;\&lt;/span&gt;
        &lt;span class="nv"&gt;-macTrace&lt;/span&gt; ON &lt;span class="err"&gt;\&lt;/span&gt;
        &lt;span class="nv"&gt;-movementTrace&lt;/span&gt; OFF          
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we first create an General Operations Director(GOD) object to track the
nodes' position in the topology grid. Then we configure the nodes using the
parameters we set up earlier.&lt;/p&gt;
&lt;p&gt;Note that, again at this point we don't have a RMAC protocol, so we can just
comment out the two lines that configure RMAC for now.&lt;/p&gt;
&lt;h3&gt;The Only Sink Node&lt;/h3&gt;
&lt;p&gt;Next, we're going to create the sink node.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# The only sink node&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; sink_node &lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$ns&lt;/span&gt; &lt;span class="nv"&gt;node&lt;/span&gt;&lt;span class="k"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;$sink_node&lt;/span&gt; &lt;span class="nv"&gt;random-motion&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="nv"&gt;$sink_node&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; X_ &lt;span class="k"&gt;[expr&lt;/span&gt; &lt;span class="nv"&gt;$val&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;dimx&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="k"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;$sink_node&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; Y_ &lt;span class="k"&gt;[expr&lt;/span&gt; &lt;span class="nv"&gt;$val&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;dimy&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="k"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;$sink_node&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; Z_ &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="nv"&gt;$ns&lt;/span&gt; &lt;span class="nv"&gt;initial_node_pos&lt;/span&gt; &lt;span class="nv"&gt;$sink_node&lt;/span&gt; &lt;span class="nv"&gt;$val&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;node_size&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;set&lt;/span&gt; sink &lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;new&lt;/span&gt; Agent&lt;span class="o"&gt;/&lt;/span&gt;LossMonitor&lt;span class="k"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;$ns&lt;/span&gt; &lt;span class="nv"&gt;attach-agent&lt;/span&gt; &lt;span class="nv"&gt;$sink_node&lt;/span&gt; &lt;span class="nv"&gt;$sink&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we place the sink node at the center of the terrain, and attach an
&lt;code&gt;LossMonitor&lt;/code&gt; to it, so that we can get the packet statistics. Although the
project specification requires us to get the packet statistics from the trace
file, we can use the results from &lt;code&gt;LossMonitor&lt;/code&gt; to verify that analysis results.&lt;/p&gt;
&lt;h3&gt;The Source Nodes&lt;/h3&gt;
&lt;p&gt;We need to create 100 source nodes, they should scatter the whole terrain
randomly, also, they should start transmission also randomly, which has two
benefits:
 - In practice, they're highly unlikable to synchronize perfectly, so we can
   simulator real world better.
 - By starting randomly, we're minimizing the chances they have collision.&lt;/p&gt;
&lt;p&gt;So we'll have two random number generators, one for the position, and one for
the starting time.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# Set up random number generator, to scatter the source nodes&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; rng &lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;new&lt;/span&gt; RNG&lt;span class="k"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;$rng&lt;/span&gt; &lt;span class="nv"&gt;seed&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="k"&gt;set&lt;/span&gt; xrand &lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;new&lt;/span&gt; RandomVariable&lt;span class="o"&gt;/&lt;/span&gt;Uniform&lt;span class="k"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;$xrand&lt;/span&gt; &lt;span class="nv"&gt;use-rng&lt;/span&gt; &lt;span class="nv"&gt;$rng&lt;/span&gt;
&lt;span class="nv"&gt;$xrand&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; min_ &lt;span class="k"&gt;[expr&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;$val&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;dimx&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="k"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;$xrand&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; max_ &lt;span class="k"&gt;[expr&lt;/span&gt; &lt;span class="nv"&gt;$val&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;dimx&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="k"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;set&lt;/span&gt; yrand &lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;new&lt;/span&gt; RandomVariable&lt;span class="o"&gt;/&lt;/span&gt;Uniform&lt;span class="k"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;$yrand&lt;/span&gt; &lt;span class="nv"&gt;use-rng&lt;/span&gt; &lt;span class="nv"&gt;$rng&lt;/span&gt;
&lt;span class="nv"&gt;$yrand&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; min_ &lt;span class="k"&gt;[expr&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;$val&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;dimy&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="k"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;$yrand&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; max_ &lt;span class="k"&gt;[expr&lt;/span&gt; &lt;span class="nv"&gt;$val&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;dimy&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="k"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;set&lt;/span&gt; trand &lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;new&lt;/span&gt; RandomVariable&lt;span class="o"&gt;/&lt;/span&gt;Uniform&lt;span class="k"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;$trand&lt;/span&gt; &lt;span class="nv"&gt;use-rng&lt;/span&gt; &lt;span class="nv"&gt;$rng&lt;/span&gt;
&lt;span class="nv"&gt;$trand&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; min_ &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="nv"&gt;$trand&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; max_ &lt;span class="nv"&gt;$val&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;interval&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Also note that we set the seed to the Random Number Generator (RNG) to a
constant value &lt;code&gt;0&lt;/code&gt;, so that in each simulation we can get the same results, easy
for debug and also analyzing.&lt;/p&gt;
&lt;p&gt;Then we create all the source nodes in a &lt;code&gt;for&lt;/code&gt; loop.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# Create all the source nodes&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;{set&lt;/span&gt; i &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="k"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nv"&gt;$val&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;nn&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;-1&lt;/span&gt; &lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="k"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;incr&lt;/span&gt; i&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="k"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; src_node&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$ns&lt;/span&gt; &lt;span class="nv"&gt;node&lt;/span&gt;&lt;span class="k"&gt;]&lt;/span&gt; 
    &lt;span class="nv"&gt;$src_node&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; random-motion &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; x &lt;span class="k"&gt;[expr&lt;/span&gt; &lt;span class="nv"&gt;$val&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;dimx&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$xrand&lt;/span&gt; &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="k"&gt;]]&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; y &lt;span class="k"&gt;[expr&lt;/span&gt; &lt;span class="nv"&gt;$val&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;dimx&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$xrand&lt;/span&gt; &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="k"&gt;]]&lt;/span&gt;
    &lt;span class="nv"&gt;$src_node&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; X_ &lt;span class="nv"&gt;$x&lt;/span&gt;
    &lt;span class="nv"&gt;$src_node&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; Y_ &lt;span class="nv"&gt;$y&lt;/span&gt;
    &lt;span class="nv"&gt;$src_node&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; Z_ &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="nv"&gt;$ns&lt;/span&gt; &lt;span class="nv"&gt;initial_node_pos&lt;/span&gt; &lt;span class="nv"&gt;$src_node&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;$val&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;node_size&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;set&lt;/span&gt; udp&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;new&lt;/span&gt; Agent&lt;span class="o"&gt;/&lt;/span&gt;UDP&lt;span class="k"&gt;]&lt;/span&gt;
    &lt;span class="nv"&gt;$udp&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; class_ &lt;span class="nv"&gt;$i&lt;/span&gt;
    &lt;span class="nv"&gt;$ns&lt;/span&gt; &lt;span class="nv"&gt;attach-agent&lt;/span&gt; &lt;span class="nv"&gt;$src_node&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;$udp&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;$ns&lt;/span&gt; &lt;span class="nv"&gt;connect&lt;/span&gt; &lt;span class="nv"&gt;$udp&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;$sink&lt;/span&gt;

    &lt;span class="k"&gt;set&lt;/span&gt; cbr&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;new&lt;/span&gt; Application&lt;span class="o"&gt;/&lt;/span&gt;Traffic&lt;span class="o"&gt;/&lt;/span&gt;CBR&lt;span class="k"&gt;]&lt;/span&gt;
    &lt;span class="nv"&gt;$cbr&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; packet_size_ &lt;span class="nv"&gt;$val&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;packetsize&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;$cbr&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; interval_ &lt;span class="nv"&gt;$val&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;interval&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;$cbr&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;attach-agent&lt;/span&gt; &lt;span class="nv"&gt;$udp&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; start &lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$trand&lt;/span&gt; &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="k"&gt;]&lt;/span&gt;
    &lt;span class="nv"&gt;$ns&lt;/span&gt; &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;$start&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$cbr($i) start&amp;quot;&lt;/span&gt; 
    &lt;span class="nv"&gt;$ns&lt;/span&gt; at &lt;span class="nv"&gt;$val&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;duration&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$cbr($i) stop&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that we use UDP here instead of TCP, since we don't need any reliable
transfer or congestion control from up layer. Also, we attach an Constant Bit
Generator (CBR) as the application.&lt;/p&gt;
&lt;h3&gt;Simulator Control&lt;/h3&gt;
&lt;p&gt;We first define the actions to take when the simulator stops.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;proc&lt;/span&gt; stop &lt;span class="k"&gt;{}&lt;/span&gt; &lt;span class="k"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; ns tracefd nam stats val sink

    &lt;span class="k"&gt;set&lt;/span&gt; bytes &lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$sink&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; bytes_&lt;span class="k"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; losts  &lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$sink&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; nlost_&lt;span class="k"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; pkts &lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$sink&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; npkts_&lt;span class="k"&gt;]&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="nv"&gt;$stats&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bytes losts pkts&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="nv"&gt;$stats&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$bytes $losts $pkts&amp;quot;&lt;/span&gt;

    &lt;span class="nv"&gt;$ns&lt;/span&gt; &lt;span class="nb"&gt;flush&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;trace
    &lt;span class="nb"&gt;close&lt;/span&gt; &lt;span class="nv"&gt;$nam&lt;/span&gt;
    &lt;span class="nb"&gt;close&lt;/span&gt; &lt;span class="nv"&gt;$tracefd&lt;/span&gt;
    &lt;span class="nb"&gt;close&lt;/span&gt; &lt;span class="nv"&gt;$stats&lt;/span&gt;
&lt;span class="k"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we first get the packet statistics from &lt;code&gt;LossMonitor&lt;/code&gt;, and write them to
the stats file, then we flush ns trace and close all the files.&lt;/p&gt;
&lt;p&gt;Finally, we start the simulator.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Starting Simulation...&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$ns&lt;/span&gt; &lt;span class="nv"&gt;run&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="tcl"></category><category term="ns2"></category></entry><entry><title>How to Apply Downloaded OTA Package</title><link href="http://jhshi.me/2013/12/13/how-to-apply-downloaded-ota-package/index.html" rel="alternate"></link><updated>2013-12-13T12:24:00-05:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2013-12-13:2013/12/13/how-to-apply-downloaded-ota-package/index.html</id><summary type="html">&lt;p&gt;Suppose you've 
&lt;a href="/2013/12/02/how-to-use-downloadmanager/"&gt;downloaded the OTA package using Android's &lt;code&gt;DownloadManager&lt;/code&gt;&lt;/a&gt;, this post
discusses how to verify it, and how to apply it at client's side.&lt;/p&gt;


&lt;h3&gt;Copy the Package to Internal Storage&lt;/h3&gt;
&lt;p&gt;By default, &lt;code&gt;DownloadManager&lt;/code&gt; will save the downloaded file in external storage,
say, &lt;code&gt;/sdcard&lt;/code&gt;. To make sure that this package is still accessible after the
phone reboots into recovery, we need to copy the package into internal storage.
In this case, we will use the &lt;code&gt;/cache&lt;/code&gt; partition.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="n"&gt;packageFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Environment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getDownloadCacheDirectory&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/update.zip&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;packageFile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exists&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;packageFile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;delete&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;FileChannel&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;FileChannel&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FileInputStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;downloadedFile&lt;/span&gt;&lt;span class="o"&gt;)).&lt;/span&gt;&lt;span class="na"&gt;getChannel&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;dest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FileOutputStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;packageFile&lt;/span&gt;&lt;span class="o"&gt;)).&lt;/span&gt;&lt;span class="na"&gt;getChannel&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;transferFrom&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;e&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TAG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Failed to copy update file into internal storage: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;e&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TAG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Failed to close file channels: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we use &lt;code&gt;FileChannel&lt;/code&gt; from &lt;code&gt;java.nio&lt;/code&gt; instead of the native
&lt;code&gt;FileOutputStream&lt;/code&gt;, for some performance boost. You can find more discussions
about &lt;code&gt;java.nio&lt;/code&gt; vs. &lt;code&gt;java.io&lt;/code&gt; in this &lt;a href="http://stackoverflow.com/questions/1605332/java-nio-filechannel-versus-fileoutputstream-performance-usefulness"&gt;stackoverflow thread&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;UPDATE 2015-11-03&lt;/h4&gt;
&lt;p&gt;Another way to copy the package is to use &lt;code&gt;IOUtils.copy&lt;/code&gt; function from &lt;a href="https://commons.apache.org/proper/commons-io/"&gt;Apache
Common library&lt;/a&gt;. Put the downloaded &lt;code&gt;commons-io-x.y.jar&lt;/code&gt; in your
project's &lt;code&gt;lib&lt;/code&gt; directory, then:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.commons.io.IOUtils&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;IOUtils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FileInputStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;packageFile&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FileOutputStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/cache/update.zip&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Verify the Signature&lt;/h3&gt;
&lt;p&gt;For security concern, we need to verify that the downloaded OTA package was
signed properly with the platform key. You can refer to &lt;a href="/2013/12/02/how-to-create-and-sign-ota-package/"&gt;this post&lt;/a&gt; on how
to sign the OTA package.&lt;/p&gt;
&lt;p&gt;We can use the &lt;code&gt;verifyPackage&lt;/code&gt; call provided by &lt;a href="http://developer.android.com/reference/android/os/RecoverySystem.html"&gt;&lt;code&gt;RecoverySystem&lt;/code&gt; class&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="n"&gt;packageFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;URI&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;otaPackageUriString&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;RecoverySystem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;verifyPackage&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;packageFile&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// Log.v(TAG, &amp;quot;Successfuly verified ota package.&amp;quot;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;e&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TAG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Corrupted package: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will verify the package against the platform key stored in
&lt;code&gt;/system/etc/security/otacerts.zip&lt;/code&gt;. You can also provide your own certs file,
of course. But in this case, the default platform key will do.&lt;/p&gt;
&lt;h3&gt;Reboot into Recovery and Apply the Package&lt;/h3&gt;
&lt;p&gt;OK, now we're pretty confident that the downloaded package is in sanity. Let's
reboot the phone into recovery and apply it. This is done by the
&lt;code&gt;installPackage&lt;/code&gt; call.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="n"&gt;packageFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;URI&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;otaPackageUriString&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;RecoverySystem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;installPackage&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;packageFile&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;e&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TAG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Error while install OTA package: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;e&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TAG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Will retry download&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;startDownload&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If everything is OK, the &lt;code&gt;installPackage&lt;/code&gt; call won't return, and the phone will
be rebooted into recovery.&lt;/p&gt;</summary><category term="DownloadManager"></category><category term="RecoverySystem"></category><category term="FileChannel"></category></entry><entry><title>Remove the Figure Prefix of Caption in Beamer</title><link href="http://jhshi.me/2013/12/02/remove-the-figure-prefix-of-caption-in-beamer/index.html" rel="alternate"></link><updated>2013-12-02T21:52:00-05:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2013-12-02:2013/12/02/remove-the-figure-prefix-of-caption-in-beamer/index.html</id><summary type="html">&lt;p&gt;Sometimes it's annoying to have a "Figure" prefix when you add caption to a
figure in beamer. Here is a way of how to eliminate that.&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;caption&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\captionsetup&lt;/span&gt;&lt;span class="na"&gt;[figure]&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;labelformat=empty&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Before
&lt;img src="/images/caption_before.png"&gt;&lt;/p&gt;
&lt;p&gt;After
&lt;img src="/images/caption_after.png"&gt;&lt;/p&gt;</summary><category term="beamer"></category><category term="caption"></category></entry><entry><title>Place Logo Properly in Beamer</title><link href="http://jhshi.me/2013/12/02/place-logo-properly-in-beamer/index.html" rel="alternate"></link><updated>2013-12-02T21:17:00-05:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2013-12-02:2013/12/02/place-logo-properly-in-beamer/index.html</id><summary type="html">&lt;p&gt;It's stylish to place an low-profile yet charming logo in some corner of your
slides. Here we use the &lt;code&gt;pgf&lt;/code&gt; package to accomplish this.&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;pgf&lt;span class="nb"&gt;}&lt;/span&gt;  
&lt;span class="k"&gt;\logo&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\pgfputat&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\pgfxy&lt;/span&gt;(9.45,1.5)&lt;span class="nb"&gt;}{&lt;/span&gt;&lt;span class="k"&gt;\pgfbox&lt;/span&gt;&lt;span class="na"&gt;[center,base]&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\includegraphics&lt;/span&gt;&lt;span class="na"&gt;[width=1.7cm]&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;logo.png&lt;span class="nb"&gt;}}}}&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You probably need to tweak the coordinates a little bit to fit the logo to your
slides.&lt;/p&gt;
&lt;p&gt;Also, to hide logo and also page number on title page, you'll need to this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;document&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;{&lt;/span&gt;
&lt;span class="c"&gt;% no page #, no logo on title page&lt;/span&gt;
&lt;span class="k"&gt;\setbeamertemplate&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;footline&lt;span class="nb"&gt;}{}&lt;/span&gt;
&lt;span class="k"&gt;\setbeamertemplate&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;logo&lt;span class="nb"&gt;}{}&lt;/span&gt;
&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;frame&lt;span class="nb"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;\titlepage&lt;/span&gt;
&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;frame&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;% other frames&lt;/span&gt;
&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;document&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here is how they look like.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/title_page.png"&gt;
&lt;img src="/images/first_page.png"&gt;&lt;/p&gt;</summary><category term="logo"></category><category term="beamer"></category><category term="pgf"></category></entry><entry><title>Remove the Navigation Bar of Beamer</title><link href="http://jhshi.me/2013/12/02/remove-the-navigation-bar-of-beamer/index.html" rel="alternate"></link><updated>2013-12-02T21:11:00-05:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2013-12-02:2013/12/02/remove-the-navigation-bar-of-beamer/index.html</id><summary type="html">&lt;p&gt;Honestly, I never clicked the navigation bar in beamer slides, and I really
wondered whether anyone has used it or not. I suspect that most people keep it just
to show the pride that he's using beamer...&lt;/p&gt;


&lt;p&gt;Anyways, the navigation bar can be annoying sometimes, especially when you have
some long foot notes that overlap it. Put this line in the preamble to remove
the navigation bar.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;\beamertemplatenavigationsymbolsempty&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="beamer"></category><category term="navigation"></category></entry><entry><title>How to Use Android DownloadManager</title><link href="http://jhshi.me/2013/12/02/how-to-use-downloadmanager/index.html" rel="alternate"></link><updated>2013-12-02T20:42:00-05:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2013-12-02:2013/12/02/how-to-use-downloadmanager/index.html</id><summary type="html">&lt;p&gt;&lt;tt class="docutils literal"&gt;DownloadManager&lt;/tt&gt; is a service provided by Android that can conduct
long-running HTTP downloads, typically for large files. So we do not need to
worry about connection loss connection, system reboots, etc.&lt;/p&gt;

&lt;div class="section" id="listen-for-download-complete-event"&gt;
&lt;h2&gt;Listen for Download Complete Event&lt;/h2&gt;
&lt;p&gt;Before we start downloading, make sure we already listen for the
broadcast of &lt;tt class="docutils literal"&gt;Downloadmanager&lt;/tt&gt;, so that we won't miss anything.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;downloadCompleteIntentName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DownloadManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ACTION_DOWNLOAD_COMPLETE&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;IntentFilter&lt;/span&gt; &lt;span class="n"&gt;downloadCompleteIntentFilter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;IntentFilter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;downloadCompleteIntentName&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;BroadcastReceiver&lt;/span&gt; &lt;span class="n"&gt;downloadCompleteReceiver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BroadcastReceiver&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onReceive&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Intent&lt;/span&gt; &lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// TO BE FILLED&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;// when initialize&lt;/span&gt;
&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;registerReceiver&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;downloadCompleteReceiver&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;downloadCompleteIntentFilter&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class="section" id="request-download"&gt;
&lt;h2&gt;Request Download&lt;/h2&gt;
&lt;p&gt;We an get an instance of &lt;tt class="docutils literal"&gt;DownloadManager&lt;/tt&gt; using this call.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;DownloadManager&lt;/span&gt; &lt;span class="n"&gt;downloadManager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DownloadManager&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSystemService&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;DOWNLOAD_SERVICE&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;&lt;tt class="docutils literal"&gt;DownloadManager&lt;/tt&gt; has a subclass called &lt;tt class="docutils literal"&gt;Request&lt;/tt&gt;, which we will use
to request for an download action. Here is the code snippet that
initiate a download.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://example.com/large.zip&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;DownloadManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Request&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;DownloadManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Request&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Uri&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;// only download via WIFI&lt;/span&gt;
&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setAllowedNetworkTypes&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DownloadManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;NETWORK_WIFI&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setTitle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Example&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setDescription&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Downloading a very large zip&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// we just want to download silently&lt;/span&gt;
&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setVisibleInDownloadsUi&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setNotificationVisibility&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DownloadManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;VISIBILITY_HIDDEN&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setDestinationInExternalFilesDir&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;large.zip&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// enqueue this request&lt;/span&gt;
&lt;span class="n"&gt;DownloadManager&lt;/span&gt; &lt;span class="n"&gt;downloadManager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DownloadManager&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSystemService&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;DOWNLOAD_SERVICE&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;downloadID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;downloadManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;enqueue&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Please refer to &lt;a class="reference external" href="http://developer.android.com/reference/android/app/DownloadManager.Request.html"&gt;the
doc&lt;/a&gt;
on more configurations of the request object. So now we have an
&lt;tt class="docutils literal"&gt;downloadID&lt;/tt&gt;, which we'll use to query the state of downloading.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="download-complete-handler"&gt;
&lt;h2&gt;Download Complete Handler&lt;/h2&gt;
&lt;p&gt;Now we already started downloading, in the above
&lt;tt class="docutils literal"&gt;downloadCompleteReceiver&lt;/tt&gt;, what we need to do?&lt;/p&gt;
&lt;p&gt;First, we need to check if it's for our download, since it's an
broadcast event.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getLongExtra&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DownloadManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;EXTRA_DOWNLOAD_ID&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0L&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;downloadID&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;v&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TAG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Ingnoring unrelated download &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Then we need to query the state of downloading. This is done via the
&lt;tt class="docutils literal"&gt;Query&lt;/tt&gt; subclass of &lt;tt class="docutils literal"&gt;DownloadManager&lt;/tt&gt;.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;DownloadManager&lt;/span&gt; &lt;span class="n"&gt;downloadManager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DownloadManager&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSystemService&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;DOWNLOAD_SERVICE&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;DownloadManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Query&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;DownloadManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Query&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setFilterById&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;Cursor&lt;/span&gt; &lt;span class="n"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;downloadManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// it shouldn&amp;#39;t be empty, but just in case&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;moveToFirst&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;e&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TAG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Empty row&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Then we can get the state and also the downloaded file information like
this.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;statusIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getColumnIndex&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DownloadManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;COLUMN_STATUS&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DownloadManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;STATUS_SUCCESSFUL&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;statusIndex&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;w&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TAG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Download Failed&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;uriIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getColumnIndex&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DownloadManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;COLUMN_LOCAL_URI&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;downloadedPackageUriString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uriIndex&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;So now we get the downloaded file's URI, we can than either copy it to
somewhere else, or go ahead and process it.&lt;/p&gt;
&lt;p&gt;There are more information to query when the download failed, e.g.,
reason, how much as been downloaded, etc. Please refer to the
&lt;a class="reference external" href="http://developer.android.com/reference/android/app/DownloadManager.html"&gt;documentation of
DownloadManager&lt;/a&gt;
for complete list of column names.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="DownloadManager"></category></entry><entry><title>How to Create and Sign OTA Package</title><link href="http://jhshi.me/2013/12/02/how-to-create-and-sign-ota-package/index.html" rel="alternate"></link><updated>2013-12-02T15:07:00-05:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2013-12-02:2013/12/02/how-to-create-and-sign-ota-package/index.html</id><summary type="html">&lt;p&gt;I'm currently maintaining the &lt;a href="https://play.google.com/store/apps/details?id=edu.buffalo.cse.phonelab.conductor"&gt;Conductor App&lt;/a&gt; for 
&lt;a href="http://www.phone-lab.org"&gt;PhoneLab testbed&lt;/a&gt;. One of the core tasks performed by conductor is to perform
system OTA update, so that we can push platform changes to our participants,
either to fix bugs, or to do system level experiments (libc, Dalvik VM, etc.).&lt;/p&gt;
&lt;p&gt;So the first step is, how to create an OTA package?&lt;/p&gt;


&lt;h3&gt;Directory Structure&lt;/h3&gt;
&lt;p&gt;Suppose we have a patched version of &lt;code&gt;libc&lt;/code&gt; and we want to overwrite the
previous one already in participants' phone, we need first to figure out where
that file is in the file system. In this case, it's &lt;code&gt;/system/lib/libc.so&lt;/code&gt;. Then
our OTA package's directory structure must looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;myupdate
&lt;span class="p"&gt;|&lt;/span&gt;-- META-INF
&lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="sb"&gt;`&lt;/span&gt;-- com
&lt;span class="p"&gt;|&lt;/span&gt;       &lt;span class="sb"&gt;`&lt;/span&gt;-- google
&lt;span class="p"&gt;|&lt;/span&gt;           &lt;span class="sb"&gt;`&lt;/span&gt;-- android
&lt;span class="p"&gt;|&lt;/span&gt;               &lt;span class="p"&gt;|&lt;/span&gt;-- update-binary
&lt;span class="p"&gt;|&lt;/span&gt;               &lt;span class="sb"&gt;`&lt;/span&gt;-- updater-script
&lt;span class="sb"&gt;`&lt;/span&gt;-- system
    &lt;span class="sb"&gt;`&lt;/span&gt;-- lib
        &lt;span class="sb"&gt;`&lt;/span&gt;-- libc.so
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;update-binary&lt;/code&gt; and &lt;code&gt;updater-script&lt;/code&gt; are used to actually perform the 
update, I'll explain them later.&lt;/p&gt;
&lt;p&gt;Note that the structure of the &lt;code&gt;system&lt;/code&gt; needs to be exactly the same with what's
in Android's setup, so that we can copy that directory directly to target
system, and overwrite the files with the updated version.&lt;/p&gt;
&lt;h3&gt;The updater-script&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;update-binary&lt;/code&gt;, as its name indicates, is a binary file that will parse the
&lt;code&gt;updater-script&lt;/code&gt; we write. It's quite standard and nothing special. You can obtain 
a copy of this file &lt;a href="https://github.com/koush/AnyKernel/tree/master/META-INF/com/google/android"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;updater-scipts&lt;/code&gt; contains the operations we want to perform. Its written
using &lt;a href="http://wiki.cyanogenmod.org/w/Doc:_About_Edify"&gt;Edify&lt;/a&gt; scripting language, which has quite simple and intuitive
syntax. You can find more details in this &lt;a href="http://forum.xda-developers.com/showthread.php?t=1187313"&gt;xda thread&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this case, what we need to do is quite simple: mount the &lt;code&gt;/system&lt;/code&gt; partition
and copy the files in the OTA package to target file system. So the
&lt;code&gt;updater-script&lt;/code&gt; may looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mount(&amp;quot;ext4&amp;quot;, &amp;quot;EMMC&amp;quot;, &amp;quot;/dev/block/platform/omap/omap_hsmmc.0/by-name/system&amp;quot;, &amp;quot;/system&amp;quot;);
package_extract_dir(&amp;quot;system&amp;quot;, &amp;quot;/system&amp;quot;);                                        
unmount(&amp;quot;/system&amp;quot;);       
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;First, we mount the target file system's &lt;code&gt;system&lt;/code&gt; partition using the &lt;code&gt;mount&lt;/code&gt;
command, the arguments are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;FSTYPE&lt;/code&gt;: File system type. In this case, it's "ext4"&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TYPE&lt;/code&gt;: Storage type. &lt;a href="http://www.datalight.com/solutions/technologies/emmc/what-is-emmc"&gt;"EMMC"&lt;/a&gt; means internal solid state storage device on MMC
   bus, which is actually NAND flash.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DEV&lt;/code&gt;: The device to mount. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;PATH&lt;/code&gt;: Mount point.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can find all the mounted devices in Android by &lt;code&gt;adb shell&lt;/code&gt; then &lt;code&gt;mount&lt;/code&gt;.
Here is one sample output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;shell@android:/ $ mount
rootfs / rootfs ro,relatime 0 0
tmpfs /dev tmpfs rw,nosuid,relatime,mode=755 0 0
devpts /dev/pts devpts rw,relatime,mode=600 0 0
proc /proc proc rw,relatime 0 0
sysfs /sys sysfs rw,relatime 0 0
none /acct cgroup rw,relatime,cpuacct 0 0
tmpfs /mnt/secure tmpfs rw,relatime,mode=700 0 0
tmpfs /mnt/asec tmpfs rw,relatime,mode=755,gid=1000 0 0
tmpfs /mnt/obb tmpfs rw,relatime,mode=755,gid=1000 0 0
none /dev/cpuctl cgroup rw,relatime,cpu 0 0
/dev/block/platform/omap/omap_hsmmc.0/by-name/system /system ext4 ro,relatime,barrier=1,data=ordered 0 0
/dev/block/platform/omap/omap_hsmmc.0/by-name/efs /factory ext4 ro,relatime,barrier=1,data=ordered 0 0
/dev/block/platform/omap/omap_hsmmc.0/by-name/cache /cache ext4 rw,nosuid,nodev,noatime,errors=panic,barrier=1,nomblk_io_submit,data=ordered 0 0
/dev/block/platform/omap/omap_hsmmc.0/by-name/userdata /data ext4 rw,nosuid,nodev,noatime,errors=panic,barrier=1,nomblk_io_submit,data=ordered 0 0
/sys/kernel/debug /sys/kernel/debug debugfs rw,relatime 0 0
/dev/fuse /mnt/shell/emulated fuse rw,nosuid,nodev,relatime,user_id=1023,group_id=1023,default_permissions,allow_other 0 0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then we do the actual copy using &lt;code&gt;package_extract_dir&lt;/code&gt; command. This will copy 
the updated &lt;code&gt;libc.so&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;And finally we unmount the &lt;code&gt;/system&lt;/code&gt; partition.&lt;/p&gt;
&lt;h3&gt;Pack It Up&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Inside &lt;code&gt;myupdate&lt;/code&gt; directory&lt;/em&gt;, use this command to create the zip file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;zip -r9 ../myupdate.zip *
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that the command is executed &lt;em&gt;inside&lt;/em&gt; the &lt;code&gt;myupdate&lt;/code&gt; directory, and the
zip file is created in parent directory. This is because the &lt;code&gt;META-INF&lt;/code&gt; and
&lt;code&gt;system&lt;/code&gt; directory must be in the root directory of the final zip file.&lt;/p&gt;
&lt;h3&gt;Sign the OTA Package&lt;/h3&gt;
&lt;p&gt;Up to this point, the OTA package we just created should be able to applied
successfully on custom recoveries like CWM, in which the signature
verification is turned off by default.&lt;/p&gt;
&lt;p&gt;However, to automate the OTA process, we're using the 
&lt;a href="http://developer.android.com/reference/android/os/RecoverySystem.html"&gt;Android RecoverySystem&lt;/a&gt; to reboot the phone and apply the update, in that
case, the signature verification is turned on. So we need to sign the package
with proper keys, which are &lt;em&gt;platform&lt;/em&gt; keys.&lt;/p&gt;
&lt;p&gt;Suppose you've get the platform keys named &lt;code&gt;platform.x509.pem&lt;/code&gt; and
&lt;code&gt;platform.pk8&lt;/code&gt;, we can use the &lt;a href="http://www.adbtoolkit.com/kitchen/tools/linux/signapk.jar"&gt;signapk.jar&lt;/a&gt; tool.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;java -jar signapk.jar -w platform.x509.pem platform.pk8 myupdate.zip myupdate-signed.zip
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We need the &lt;code&gt;-w&lt;/code&gt; flag to sign the whole zip file.&lt;/li&gt;
&lt;li&gt;The sequence of the two key files: pem file goes first, then the pk8 file.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This will generate the final OTA package, &lt;code&gt;myupdate-signed.zip&lt;/code&gt;, which WILL pass
the signature verification of the recovery system.&lt;/p&gt;</summary><category term="ota"></category><category term="signapk"></category><category term="zip"></category></entry><entry><title>Command Dispatching</title><link href="http://jhshi.me/2013/12/02/command-dispatching/index.html" rel="alternate"></link><updated>2013-12-02T12:52:00-05:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2013-12-02:2013/12/02/command-dispatching/index.html</id><summary type="html">&lt;p&gt;In a few network projects, we're asked to write an interactive shell, to receive
command from user input. Here is the general pattern I used. The example I used
here is from the &lt;a href="https://github.com/jhshi/course.network.p2p"&gt;P2P network project&lt;/a&gt;, and you can find my earlier post
about &lt;a href="/2013/11/02/use-select-to-monitor-multiple-file-descriptors/"&gt;use select to monitor user input and socket at the same time&lt;/a&gt;.&lt;/p&gt;


&lt;h3&gt;Command Handing Functions&lt;/h3&gt;
&lt;p&gt;Since each command may have various number of arguments or options, it's
straightforward to use the standard &lt;code&gt;argc&lt;/code&gt; and &lt;code&gt;argv&lt;/code&gt; interface. So for each
command, we define there handling functions as follows.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;cmd_help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;cmd_myip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;cmd_myport&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;cmd_register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;cmd_connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;cmd_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;cmd_terminate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;cmd_exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;cmd_download&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;cmd_creator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;cmd_packet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Command Table&lt;/h3&gt;
&lt;p&gt;It'll be tedious to manually decide which handling function to call. Instead,
we'll use an data structure called &lt;em&gt;Command Table&lt;/em&gt; to gracefully handle the
cases for all commands.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[]);&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;help_msg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;cmd_table&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;HELP&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmd_help&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;: Show available user interface options.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;MYIP&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmd_myip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;: Show IP address of this process.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;MYPORT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmd_myport&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;: Show port on which this process is listening.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;REGISTER&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmd_register&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;lt;server_IP&amp;gt; &amp;lt;port_no&amp;gt;: Client register to server.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CONNECT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmd_connect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;lt;destination&amp;gt; &amp;lt;port_no&amp;gt;: Connect to a peer client.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;LIST&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmd_list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;: Show list of connected hosts.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;TERMINATE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmd_terminate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;lt;connection_id&amp;gt;: Terminate a certain connection&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;EXIT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmd_exit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;: Close all connections and terminate this process.&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;DOWNLOAD&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmd_download&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;lt;file_name&amp;gt; &amp;lt;file_chunk_size_in_bytes&amp;gt;: Download a file in parallel.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CREATOR&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmd_creator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;: Show author&amp;#39;s info.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;PACKET&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmd_packet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;lt;packet_size_in_bytes&amp;gt;: Set packet size.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we define, for each command, which handler to use and also the help
message. More specifically, our &lt;code&gt;cmd_help&lt;/code&gt; and be written as simple as follows.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="nf"&gt;cmd_help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Available commands are:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;cmd_table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmd_table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmd_table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;help_msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Command Dispatching&lt;/h3&gt;
&lt;p&gt;Now suppose you already found &lt;code&gt;STDIN_FILENO&lt;/code&gt; is available to read using
&lt;code&gt;select&lt;/code&gt;, which means user has entered some input and hit the {% key Enter %} key.
Then we need to read the input and dispatch the command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="nf"&gt;handle_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="cm"&gt;/* let getline allocate memory for us */&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;getline&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd_dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we use the &lt;code&gt;getline&lt;/code&gt; function to read the input from &lt;code&gt;stdin&lt;/code&gt;. &lt;code&gt;getline&lt;/code&gt;
will allocate the buffer for us, so we need not worry about the input size. But
we do need to free the buffer afterwards.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="nf"&gt;cmd_dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strtok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &lt;/span&gt;&lt;span class="se"&gt;\t\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strtok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &lt;/span&gt;&lt;span class="se"&gt;\t\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;[ERROR]: too many arguments&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;cmd_table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;strcmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;cmd_table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cmd_table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;[ERROR]: command not found.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In &lt;code&gt;cmd_dispatch&lt;/code&gt;, we first split the inputs into an array of strings, then we
traverse the command table to find a match.&lt;/p&gt;</summary><category term="C"></category><category term="dispatch"></category><category term="readline"></category></entry><entry><title>Post Revision Plugin For Octopress</title><link href="http://jhshi.me/2013/11/17/post-revision-plugin-for-octopress/index.html" rel="alternate"></link><updated>2013-11-17T16:39:00-05:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2013-11-17:2013/11/17/post-revision-plugin-for-octopress/index.html</id><summary type="html">&lt;p&gt;Writing blogs is not a one-time thing. Maybe sometime after you posted a blog,
you find a typo, or you get some feedback from your readers and want to further
elaborate on some paragraph in your blog, and so on. So keep a revision history
for each post is a good idea, not only for you, but also for your readers, to
let them know that you're keep polishing your blogs.&lt;/p&gt;


&lt;p&gt;However, doing this manually is kind of tedious, especially when you made
multiple changes you want to show. Fortunately, you use static site generator
(like &lt;a href="http://jekyllrb.com/"&gt;Jekyll&lt;/a&gt; or &lt;a href="http://octopress.org/"&gt;Octopress&lt;/a&gt;) and use &lt;code&gt;git&lt;/code&gt; to manage your
content. (What? You don't? The I feel sad for you :-) So why don't just show the
&lt;code&gt;git&lt;/code&gt; revision history for that blog? This is the &lt;a href="https://github.com/jhshi/octopress-post-revision"&gt;octopress-post-revision&lt;/a&gt;
comes for.&lt;/p&gt;
&lt;p&gt;If you feel interested, please refer to the &lt;a href="https://github.com/jhshi/octopress-post-revision"&gt;README page&lt;/a&gt; on how to
install this plugin and how to configure it. This post will give a detailed
description on how this plugin works.&lt;/p&gt;
&lt;p&gt;The idea is simple, yet implementing it is not trivial. It's more difficult for
me since this is my first time trying to write some code in ruby... But let's
break down the task into pieces ant tackle them one by one.&lt;/p&gt;
&lt;h3&gt;Get Post's Path On You Local File System&lt;/h3&gt;
&lt;p&gt;We need these information since we need to do a &lt;code&gt;git log&lt;/code&gt; on those files. Jekyll
provides the &lt;code&gt;Generator&lt;/code&gt; interface which allows us to generate extra
information, which is exactly what we want.&lt;/p&gt;
&lt;p&gt;We need three piece of information:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Post file's full/absolute path&lt;/li&gt;
&lt;li&gt;Post file name&lt;/li&gt;
&lt;li&gt;Post file's dir name&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last two information are used to generate the &lt;code&gt;View on Github&lt;/code&gt; link.&lt;/p&gt;
&lt;p&gt;This is what the &lt;code&gt;PostFullPath&lt;/code&gt; looks like.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PostFullPath&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Generator&lt;/span&gt;
    &lt;span class="n"&gt;safe&lt;/span&gt; &lt;span class="ss"&gt;:true&lt;/span&gt;
    &lt;span class="n"&gt;priority&lt;/span&gt; &lt;span class="ss"&gt;:high&lt;/span&gt;

    &lt;span class="c1"&gt;# Generate file info for each post and page&lt;/span&gt;
    &lt;span class="c1"&gt;#  +site+ is the site&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="n"&gt;base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance_variable_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:@base&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance_variable_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:@name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;merge!&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="s1"&gt;&amp;#39;dir_name&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_posts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="s1"&gt;&amp;#39;file_name&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
          &lt;span class="s1"&gt;&amp;#39;full_path&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
      &lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pages&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="n"&gt;base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance_variable_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:@base&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance_variable_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:@dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance_variable_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:@name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;merge!&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="s1"&gt;&amp;#39;dir_name&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="s1"&gt;&amp;#39;file_name&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
          &lt;span class="s1"&gt;&amp;#39;full_path&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)})&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;Post&lt;/code&gt; class has several instance variables (e.g., &lt;code&gt;@base, @name&lt;/code&gt;) that has
the file information, yet how to get them outside the class got me. After Google
a bit, &lt;a href="http://stackoverflow.com/questions/12122736/access-instance-variable-from-outside-the-class"&gt;this thread&lt;/a&gt; gives me the solution, i.e., the
&lt;code&gt;instance_variable_get&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;Another thing to note is the &lt;code&gt;dir_name&lt;/code&gt;, since Jekyll assumes post files are put
in the &lt;code&gt;_post&lt;/code&gt; directory, so we can hard code &lt;code&gt;post['dir_name']&lt;/code&gt; as &lt;code&gt;_posts&lt;/code&gt;.
Yet for pages, we need the real dir name.&lt;/p&gt;
&lt;h3&gt;The &lt;code&gt;revision&lt;/code&gt; Liquid Tag&lt;/h3&gt;
&lt;p&gt;Once we got the file information, we can use &lt;code&gt;git&lt;/code&gt; to get the change history of
that file. We also need to format the logs for display purpose.&lt;/p&gt;
&lt;p&gt;Here is the code that fetch logs from &lt;code&gt;git&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;git log --date=local --pretty=&amp;quot;%cd|%s&amp;quot; --max-count=&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="vi"&gt;@limit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_s&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;full_path&lt;/span&gt;
&lt;span class="n"&gt;logs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We specify the date format as &lt;code&gt;local&lt;/code&gt;, and the log message as customized format.
&lt;code&gt;%cd&lt;/code&gt; means commit date, and &lt;code&gt;%s&lt;/code&gt; is the subject. We also limit the number of
logs, in case you get to many commit on on post.&lt;/p&gt;
&lt;h3&gt;The &lt;code&gt;View on Github&lt;/code&gt; Link&lt;/h3&gt;
&lt;p&gt;Since we only display the latest &lt;code&gt;@limit&lt;/code&gt; number of commit, we provide the &lt;code&gt;View
on Github&lt;/code&gt; link which links to the Github's commit history page. The format of
the URL is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;https://github.com/&amp;lt;user&amp;gt;/&amp;lt;repo&amp;gt;/commits/&amp;lt;branch&amp;gt;/&amp;lt;file_path&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here is the code that get branch information.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;git rev-parse --abbrev-ref HEAD&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# chop last &amp;#39;\n&amp;#39; of branch name&lt;/span&gt;
&lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chop&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we have all the information we need, and here is how we compose the final
URL.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://github.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;github_user&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;github_repo&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="s1"&gt;&amp;#39;commits&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;source&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dir_name&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;file_name&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="plugin"></category><category term="revision"></category><category term="git"></category><category term="ruby"></category><category term="jekyll"></category><category term="Liquid"></category></entry><entry><title>Popular Posts Plugin for Octopress</title><link href="http://jhshi.me/2013/11/10/popular-posts-plugin-for-octopress/index.html" rel="alternate"></link><updated>2013-11-10T20:08:00-05:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2013-11-10:2013/11/10/popular-posts-plugin-for-octopress/index.html</id><summary type="html">&lt;p&gt;This post describes the &lt;a href="https://github.com/jhshi/octopress-popular-posts"&gt;octopress-popular-posts&lt;/a&gt; for Octopress. Although
there is &lt;a href="https://github.com/octopress-themes/popular-posts"&gt;one plugin&lt;/a&gt; that does the job, it used Google Page Rank to
determine if a post is popular or not. I'd like to, however, use the page view
of the post as metric.&lt;/p&gt;


&lt;h2&gt;How To Use&lt;/h2&gt;
&lt;p&gt;In &lt;a href="/2013/11/10/page-view-plugin-for-octopress/"&gt;another post&lt;/a&gt;, I described how to use the &lt;a href="https://github.com/jhshi/octopress-page-view"&gt;octopress-page-view&lt;/a&gt; plugin to
show the PV of each post and the whole site. This plugin depend on that to
generate each post's PV count. So you need to first install that plugin.&lt;/p&gt;
&lt;h3&gt;Installation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Clone the repo from Github&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /tmp
git clone https://github.com/jhshi/octopress-popular-posts.git
&lt;span class="nb"&gt;cd &lt;/span&gt;octopress-popular-posts
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The structure of the directory will look like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;octopress-popular-posts/
|-- _config.yml
|-- plugins
|   `-- popular_posts.rb
|-- README.md
`-- source
    `-- _include
        `-- custom
            `-- asides
                `-- popular_posts.html
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Copy &lt;code&gt;plugins/popular_posts.rb&lt;/code&gt; to your &lt;code&gt;plugins&lt;/code&gt; directory. And place 
&lt;code&gt;source/include/custom/asides/popular_posts.html&lt;/code&gt; in your custom asides directory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add this asides to your asides list in &lt;code&gt;_config.yml&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Configuration&lt;/h3&gt;
&lt;p&gt;This plugin doesn't need any special configurations, as long as you set 
&lt;code&gt;octopress-page-view&lt;/code&gt; plugin correctly, it should work out of box.&lt;/p&gt;
&lt;p&gt;There is one parameters you can tune, though. You can set how many popular posts
will be shown in &lt;code&gt;popular_posts.html&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;How It Works&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;octopress-page-view&lt;/code&gt; has done all the hard job for us. All we need to do is
just sort the posts by their page view count.&lt;/p&gt;
&lt;p&gt;Note that we need to set the &lt;code&gt;priority&lt;/code&gt; of this plugin as &lt;code&gt;low&lt;/code&gt;, since we reply
on &lt;code&gt;octopress-page-view&lt;/code&gt; plugin to run first to generate the PV count.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PopularPosts&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Generator&lt;/span&gt;
    &lt;span class="n"&gt;safe&lt;/span&gt; &lt;span class="ss"&gt;:true&lt;/span&gt;
    &lt;span class="n"&gt;priority&lt;/span&gt; &lt;span class="ss"&gt;:low&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c1"&gt;# require octopress-page-view plugin&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;page-view&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;

      &lt;span class="n"&gt;popular_posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="c1"&gt;# just catch the rare case&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;px&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;_pv&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;_pv&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;px&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;_pv&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;_pv&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;px&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;_pv&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;_pv&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;

      &lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;merge!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;popular_posts&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;popular_posts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;One trick I did here is that, &lt;code&gt;site&lt;/code&gt; object has not &lt;code&gt;data&lt;/code&gt; field to merge into,
so I merge the &lt;code&gt;popular_posts&lt;/code&gt; data to &lt;code&gt;site.config&lt;/code&gt;.&lt;/p&gt;</summary><category term="popular posts"></category><category term="jekyll"></category><category term="plugin"></category><category term="ruby"></category></entry><entry><title>Page View Plugin for Octopress</title><link href="http://jhshi.me/2013/11/10/page-view-plugin-for-octopress/index.html" rel="alternate"></link><updated>2013-11-10T18:21:00-05:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2013-11-10:2013/11/10/page-view-plugin-for-octopress/index.html</id><summary type="html">&lt;p&gt;It's always nice to display some blog stats, such as page view count, to give
readers an sense how &lt;em&gt;popular&lt;/em&gt; some site/posts are. Unfortunately, there is (or
should I say 'was'?) no such plugin that does this job nicely for 
&lt;a href="http://octopress.org/"&gt;Octopress&lt;/a&gt;, so I decided to write one myself. And here comes the
plugin called &lt;a href="https://github.com/jhshi/octopress-page-view"&gt;octopress-page-view&lt;/a&gt;.&lt;/p&gt;


&lt;p&gt;I use &lt;a href="http://www.google.com/analytics/"&gt;Google Analytics&lt;/a&gt; to track my blog. And there is an Octopress 
plugin called &lt;a href="https://github.com/developmentseed/jekyll-ga"&gt;jekyll-ga&lt;/a&gt;, which can sort blog posts by certain metrics of 
Google Analytics. For me, chronological order works just fine. So I just grab
the part that fetch data from Google Analytics.&lt;/p&gt;
&lt;p&gt;I haven't done any decent ruby coding before, so bear with me if I wrote some
silly ruby code. But it works.&lt;/p&gt;
&lt;h2&gt;How To Use&lt;/h2&gt;
&lt;h3&gt;Get the plugin&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Install required gems&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo gem install chronic google-api-client
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Clone the repository&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /tmp
git clone https://github.com/jhshi/octopress-page-view.git
&lt;span class="nb"&gt;cd &lt;/span&gt;octopress-page-view
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The structure of the directory will look like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;octopress-page-view/
&lt;span class="p"&gt;|&lt;/span&gt;-- _config.yml
&lt;span class="p"&gt;|&lt;/span&gt;-- plugins
&lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="sb"&gt;`&lt;/span&gt;-- page_view.rb
&lt;span class="p"&gt;|&lt;/span&gt;-- README.md
&lt;span class="sb"&gt;`&lt;/span&gt;-- &lt;span class="nb"&gt;source&lt;/span&gt;
    &lt;span class="sb"&gt;`&lt;/span&gt;-- _include
        &lt;span class="sb"&gt;`&lt;/span&gt;-- custom
            &lt;span class="sb"&gt;`&lt;/span&gt;-- asides
                &lt;span class="sb"&gt;`&lt;/span&gt;-- pageview.html
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Copy &lt;code&gt;plugins/page_view.rb&lt;/code&gt; to your &lt;code&gt;plugins&lt;/code&gt; directory, and copy
   &lt;code&gt;source/_include/custom/asides/pageview.html&lt;/code&gt; to your custom asides
   directory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In your &lt;code&gt;_config.yml&lt;/code&gt;, add &lt;code&gt;pageview.html&lt;/code&gt; to your asides array.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Setup and Configuration&lt;/h3&gt;
&lt;p&gt;The README file of the &lt;a href="https://github.com/developmentseed/jekyll-ga"&gt;jekyll-ga&lt;/a&gt; project gives an very detailed
description about &lt;a href="https://github.com/developmentseed/jekyll-ga#set-up-a-service-account-for-the-google-data-api"&gt;how to set up a service account for Google data API&lt;/a&gt;,
which I'm not going to repeat here.&lt;/p&gt;
&lt;p&gt;After you've set up the service account, you'll need to add some configurations
to your &lt;code&gt;_config.yml&lt;/code&gt; file. Here is a sample configuration.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# octopress-page-view&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;page-view&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;service_account_email&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;    &lt;span class="c1"&gt;# XXXXXX@developer.gserviceaccount.com&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;key_file&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;privatekey.p12&lt;/span&gt;  &lt;span class="c1"&gt;# service account private key file&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;key_secret&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;notasecret&lt;/span&gt;    &lt;span class="c1"&gt;# service account private key&amp;#39;s password&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;profileID&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;                &lt;span class="c1"&gt;# ga:XXXXXXXX&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;start&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;3 years ago&lt;/span&gt;        &lt;span class="c1"&gt;# Beginning of report&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;end&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;now&lt;/span&gt;                  &lt;span class="c1"&gt;# End of report&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;metric&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;ga:pageviews&lt;/span&gt;      &lt;span class="c1"&gt;# Metric code&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;segment&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;gaid::-1&lt;/span&gt;         &lt;span class="c1"&gt;# All visits&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;filters&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;                  &lt;span class="c1"&gt;# optional&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;How It Works&lt;/h2&gt;
&lt;p&gt;This plugin provides an Jekyll &lt;a href="http://jekyllrb.com/docs/plugins/"&gt;Generator&lt;/a&gt;, called &lt;code&gt;GoogleAnalytics&lt;/code&gt;,
to fetech data from Google, and a Jekyll &lt;a href="http://jekyllrb.com/docs/plugins/"&gt;Liquid Tag&lt;/a&gt; to actually generate
the formated page view count.&lt;/p&gt;
&lt;h3&gt;Fetch Analytics Data&lt;/h3&gt;
&lt;p&gt;This part is adapted from &lt;a href="https://github.com/developmentseed/jekyll-ga"&gt;jekyll-ga&lt;/a&gt;. Basically, we will create an Google
API client, and after proper authorization, making request to Google.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;pv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;page-view&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# need to provide application_name and application_version, otherwise, APIClient&lt;/span&gt;
&lt;span class="c1"&gt;# will warn ...&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Google&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;APIClient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="ss"&gt;:application_name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;octopress-page-view&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="ss"&gt;:application_version&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Load our credentials for the service account&lt;/span&gt;
&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Google&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;APIClient&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;KeyUtils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_from_pkcs12&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pv&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;key_file&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pv&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;key_secret&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authorization&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Signet&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;OAuth2&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="ss"&gt;:token_credential_uri&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://accounts.google.com/o/oauth2/token&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="ss"&gt;:audience&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://accounts.google.com/o/oauth2/token&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="ss"&gt;:scope&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://www.googleapis.com/auth/analytics.readonly&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="ss"&gt;:issuer&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pv&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;service_account_email&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="ss"&gt;:signing_key&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Request a token for our service account&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authorization&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetch_access_token!&lt;/span&gt;
&lt;span class="n"&gt;analytics&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;discovered_api&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;analytics&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;v3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# prepare parameters&lt;/span&gt;
&lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;ids&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pv&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;profileID&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;start-date&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Chronic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pv&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;start&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%Y-%m-%d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;end-date&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Chronic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pv&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;end&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%Y-%m-%d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;dimensions&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ga:pagePath&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;metrics&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pv&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;metric&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;max-results&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;100000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pv&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;segment&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;segment&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pv&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;segment&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pv&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;filters&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;filters&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pv&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;filters&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:api_method&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;analytics&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ga&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:parameters&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Hash&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So now we have a hash about query results.&lt;/p&gt;
&lt;h3&gt;Calculate Page View&lt;/h3&gt;
&lt;p&gt;For each blog post, we want to display just the page view of that blog. However,
in blog index pages, we want to display the total page view of this site. So we
process &lt;code&gt;post&lt;/code&gt; and &lt;code&gt;page&lt;/code&gt; slightly differently.&lt;/p&gt;
&lt;p&gt;Also, we'll set our generator's priority to &lt;code&gt;high&lt;/code&gt;, in case other plugins also
want to use the &lt;code&gt;_pv&lt;/code&gt; information.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# total page view of this site&lt;/span&gt;
&lt;span class="n"&gt;tot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="c1"&gt;# display per post page view&lt;/span&gt;
&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;baseurl&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;hits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)?&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;to_i&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;merge!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_pv&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;hits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tot&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;hits&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# calculate total page view&lt;/span&gt;
&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pages&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;baseurl&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;
    &lt;span class="n"&gt;hits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)?&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;to_i&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;tot&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;hits&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# display total page view in page&lt;/span&gt;
&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pages&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;merge!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_pv&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So now each &lt;code&gt;post&lt;/code&gt; or &lt;code&gt;page&lt;/code&gt; contains one ore field, called &lt;code&gt;_pv&lt;/code&gt;, which is the
page view count of that &lt;code&gt;post&lt;/code&gt;, or total PV for &lt;code&gt;page&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Display Page View&lt;/h3&gt;
&lt;p&gt;This is done using a Liquid Tag called &lt;code&gt;PageViewTag&lt;/code&gt;. In the &lt;code&gt;render&lt;/code&gt; method, we
just output an nicely formatted page view count.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;site&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environments&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;site&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;page-view&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environments&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;post&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;
    &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environments&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;page&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;pv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;_pv&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pv&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gsub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/...(?=.)/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\&amp;amp;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; hits&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="plugin"></category><category term="jekyll"></category><category term="octopress"></category><category term="ruby"></category></entry><entry><title>Pop Up AlertDialog in System Service</title><link href="http://jhshi.me/2013/11/03/pop-up-alertdialog-in-system-service/index.html" rel="alternate"></link><updated>2013-11-03T23:28:00-05:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2013-11-03:2013/11/03/pop-up-alertdialog-in-system-service/index.html</id><summary type="html">&lt;p&gt;I've been working on OTA support for &lt;a href="http://www.phone-lab.org"&gt;PhoneLab testbed&lt;/a&gt;. And one
problem I encountered is that, when I tried to pop out an
&lt;a href="http://developer.android.com/reference/android/app/AlertDialog.html"&gt;AlertDialog&lt;/a&gt; to let user confirm update, I get this error that
saied something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;android.view.WindowManager&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;BadTokenException&lt;/span&gt;&lt;span class="x"&gt;: Unable to add window -- token null&lt;/span&gt;
&lt;span class="x"&gt;is not for an application&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;




&lt;p&gt;Apparently, the &lt;code&gt;context&lt;/code&gt; I used to create the dialog, which is the service
context,  is not valid in the sense
that it has not windows attached. Yet create an &lt;code&gt;Activity&lt;/code&gt; just to pop out a
alert dialog is a bit of overdone, since my app is basically a background
service.&lt;/p&gt;
&lt;p&gt;Here is how I solved this problem.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;android.permission.SYSTEM_ALERT_WINDOW&lt;/code&gt; permission to &lt;code&gt;AndroidManifest.xml&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;uses-permission&lt;/span&gt; &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android.permission.SYSTEM_ALERT_WINDOW&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;After creating the dialog, before show it, set its window type to system
   alert.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// builder set up code here&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;

&lt;span class="n"&gt;AlertDialog&lt;/span&gt; &lt;span class="n"&gt;dialog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;dialog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getWindow&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;setType&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WindowManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;LayoutParams&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;TYPE_SYSTEM_ALERT&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;dialog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;show&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ref: &lt;a href="http://stackoverflow.com/questions/4344523/popup-window-in-any-app"&gt;stackoverflow thread&lt;/a&gt;, &lt;a href="http://tofu0913.blogspot.com/2013/07/popup-alertdialog-in-android-service.html"&gt;another similar post&lt;/a&gt;&lt;/p&gt;</summary><category term="AlertDialog"></category><category term="service"></category></entry><entry><title>Fight Against the 'Address alrady in use' Error</title><link href="http://jhshi.me/2013/11/02/fight-against-the-address-alrady-in-use-error/index.html" rel="alternate"></link><updated>2013-11-02T22:36:00-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2013-11-02:2013/11/02/fight-against-the-address-alrady-in-use-error/index.html</id><summary type="html">&lt;p&gt;You have probably seen this error quite often. The detailed reason why this
error occurs is explained in detail &lt;a href="http://www.serverframework.com/asynchronousevents/2011/01/time-wait-and-its-design-implications-for-protocols-and-scalable-servers.html"&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;!--more --&gt;

&lt;p&gt;In short, if a TCP socket is
not closed properly when the program exits, the OS will put that socket in a &lt;code&gt;TIME_WAIT&lt;/code&gt;
state for a period of time (&lt;a href="http://www.borella.net/content/MITP432/TCP/text26.html"&gt;&lt;code&gt;2MSL&lt;/code&gt;&lt;/a&gt;, usually a couple of minutes). During that time, if
you want to bind to the same port, you'll get the "Address already in use"
error, even though technically no body is actually using that port.&lt;/p&gt;
&lt;p&gt;In practice, especially when you're debugging, it's very annoying to wait (even
a few minutes) before you can re-run your program if it crashes previously. And
you often very sure you're the only one that will use that certain port
number. &lt;/p&gt;
&lt;p&gt;The solution is, you can use the &lt;code&gt;SO_REUSEADDR&lt;/code&gt; option to avoid that binding error.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/* reuse server port, since the OS will prevent us to bind to this port&lt;/span&gt;
&lt;span class="cm"&gt; * immediately after we close the sock */&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;optval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;setsockopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server_sock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SOL_SOCKET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SO_REUSEADDR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;optval&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;optval&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;setsockopt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you can happily bind to that port again, again, and again...&lt;/p&gt;
&lt;h3&gt;Resources&lt;/h3&gt;
&lt;p&gt;Here is a few stackoverflow threads that discussing &lt;a href="http://stackoverflow.com/questions/775638/using-so-reuseaddr-what-happens-to-previously-open-socket"&gt;what happend to the old open
socket&lt;/a&gt;, and &lt;a href="http://stackoverflow.com/questions/14388706/socket-options-so-reuseaddr-and-so-reuseport-how-do-they-differ-do-they-mean-t"&gt;the difference between SO_REUSEADDR and
SO_REUSEPORT&lt;/a&gt;.&lt;/p&gt;</summary><category term="bind"></category><category term="SO_REUSEADDR"></category><category term="socket"></category></entry><entry><title>Use Select to Monitor Multiple File Descriptors</title><link href="http://jhshi.me/2013/11/02/use-select-to-monitor-multiple-file-descriptors/index.html" rel="alternate"></link><updated>2013-11-02T21:44:00-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2013-11-02:2013/11/02/use-select-to-monitor-multiple-file-descriptors/index.html</id><summary type="html">&lt;p&gt;In the &lt;a href="https://github.com/jhshi/course.network.p2p"&gt;P2P network project&lt;/a&gt;, we were asked to simultaneously monitor user input
and also potential in-coming messages, yet we're not supposed to use multiple
threads or processes. That leaves us no choice but the &lt;a href="http://man7.org/linux/man-pages/man2/pselect.2.html"&gt;&lt;code&gt;select&lt;/code&gt;&lt;/a&gt; function.&lt;/p&gt;


&lt;p&gt;In short, &lt;code&gt;select&lt;/code&gt; allows you to monitor multiple file descriptors at the same
time, and tells you when some of them are available to read or write. &lt;/p&gt;
&lt;h3&gt;&lt;code&gt;fd_set&lt;/code&gt; Operations&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;fd_set&lt;/code&gt; is fixed-size buffer that can host a few (up to &lt;code&gt;FD_SETSIZE&lt;/code&gt;) file
descriptors. &lt;code&gt;sys/select.h&lt;/code&gt; provide a few macros to manipulate the &lt;code&gt;fd_set&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;FD_CLR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fd_set&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;  &lt;span class="nf"&gt;FD_ISSET&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fd_set&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;FD_SET&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fd_set&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;FD_ZERO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd_set&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Basically &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;FD_CLR&lt;/code&gt; will remove a &lt;code&gt;fd&lt;/code&gt; from the &lt;code&gt;fd_set&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FD_ISSET&lt;/code&gt; will test if a certain &lt;code&gt;fd&lt;/code&gt; in the &lt;code&gt;fd_set&lt;/code&gt; or not. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;FD_SET&lt;/code&gt; will add a &lt;code&gt;fd&lt;/code&gt; to the &lt;code&gt;fd_set&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FD_ZERO&lt;/code&gt; will clear the &lt;code&gt;fd_set&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Improved &lt;code&gt;fd_set&lt;/code&gt; Wrappers&lt;/h3&gt;
&lt;p&gt;In practice, you'll often need to maintain a &lt;code&gt;fd_set&lt;/code&gt; together with the maximun
fd in that set (more on this later). So I use a few wrappers to update the
&lt;code&gt;fd_set&lt;/code&gt; and the &lt;code&gt;max_fd&lt;/code&gt; at the same time.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;sys/select.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;assert.h&amp;gt;&lt;/span&gt;

&lt;span class="cm"&gt;/* add a fd to fd_set, and update max_fd */&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="nf"&gt;safe_fd_set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fd_set&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;fds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;max_fd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_fd&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;FD_SET&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fds&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;max_fd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;max_fd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* clear fd from fds, update max fd if needed */&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="nf"&gt;safe_fd_clr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fd_set&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;fds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;max_fd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_fd&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;FD_CLR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fds&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;max_fd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;max_fd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;The &lt;code&gt;select&lt;/code&gt; Function&lt;/h3&gt;
&lt;p&gt;The prototype of the function looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;nfds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fd_set&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;readfds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fd_set&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;writefds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fd_set&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;exceptfds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;timeval&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In our case, we only want to monitor a set of fds that are available to read, so
we don't really care about the &lt;code&gt;writefds&lt;/code&gt; or &lt;code&gt;exceptfds&lt;/code&gt;, just leave them as
&lt;code&gt;NULL&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A key point here is that, console is also a file, with fd is &lt;code&gt;STDIN_FILENO&lt;/code&gt;,
just as other files (socket, normal file, etc.). So to monitor user input as
well as socket, we only need to add their fds to the &lt;code&gt;readfds&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Another trick is that, &lt;code&gt;nfds&lt;/code&gt; is the highest-numbered file descriptor in
&lt;code&gt;readfds&lt;/code&gt;, &lt;em&gt;plus 1&lt;/em&gt;. So you'll want to set &lt;code&gt;nfds&lt;/code&gt; as &lt;code&gt;max_fd+1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Also, note that &lt;code&gt;select&lt;/code&gt; will modify the &lt;code&gt;readfds&lt;/code&gt; you passed in, so you'll
definitely back up your &lt;code&gt;readfds&lt;/code&gt; before calling &lt;code&gt;select&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In this project, if nothing happens (no user input and no incoming message), we
just wait, so &lt;code&gt;timeout&lt;/code&gt; parameter is not used here.&lt;/p&gt;
&lt;h3&gt;Connect the Dots&lt;/h3&gt;
&lt;p&gt;We usually call &lt;code&gt;select&lt;/code&gt; inside a &lt;code&gt;while&lt;/code&gt; loop to keep monitoring possible
inputs. Here is the code snippets that demonstrate the typical usage of
&lt;code&gt;select&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;fd_set master;

/* add stdin and the sock fd to master fd_set */
FD_ZERO(&amp;amp;master);
safe_fd_set(STDIN_FILENO, &amp;amp;master, &amp;amp;max_fd);
safe_fd_set(server_sock, &amp;amp;master, &amp;amp;max_fd);

char prompt[512];
sprintf(prompt, &amp;quot;[%s@%s] $ &amp;quot;, is_server?&amp;quot;server&amp;quot;:&amp;quot;client&amp;quot;, hostname);

while (1) {
    printf(&amp;quot;\r%s&amp;quot;, prompt);
    fflush(stdout);

    /* back up master */
    fd_set dup = master;

    /* note the max_fd+1 */
    if (select(max_fd+1, &amp;amp;dup, NULL, NULL, NULL) &amp;lt; 0) {
        perror(&amp;quot;select&amp;quot;);
        return -1;
    }

    /* check which fd is avaialbe for read */
    for (int fd = 0; fd &amp;lt;= max_fd; fd++) {
        if (FD_ISSET(fd, &amp;amp;dup)) {
            if (fd == STDIN_FILENO) {
                handle_command();
            }
            else if (fd == server_sock) {
                printf(&amp;quot;\n&amp;quot;);
                handle_new_connection();
            }
            else {
                handle_message(fd);
            }
        }
    }
}
&lt;/pre&gt;&lt;/div&gt;</summary><category term="select"></category><category term="fd_set"></category></entry><entry><title>How to Get Local Host's Real IP Address</title><link href="http://jhshi.me/2013/11/02/how-to-get-hosts-ip-address/index.html" rel="alternate"></link><updated>2013-11-02T20:20:00-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2013-11-02:2013/11/02/how-to-get-hosts-ip-address/index.html</id><summary type="html">&lt;p&gt;I encounter this problem while doing an &lt;a href="https://github.com/jhshi/course.network.p2p"&gt;network course project&lt;/a&gt;. Easy
as it sounds, it's actually not a trivial task.&lt;/p&gt;


&lt;h3&gt;Old-fashioned &lt;code&gt;gethostbyname&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;I did some network programing in old days, so I was tempted to use the
straightforward way using &lt;a href="http://linux.die.net/man/3/gethostbyname"&gt;&lt;code&gt;gethostbyname&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;netdb.h&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;hostname&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gethostname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hostname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hostname&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;gethostname&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;hostent&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gethostbyname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hostname&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;gethostbyname&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;in_addr&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;in_addr&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;h_addr_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;My IP is %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inet_ntoa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Yet when I run the program, this code snippet will always print out &lt;code&gt;127.0.0.1&lt;/code&gt;,
which is not useful since I want to get the &lt;em&gt;real&lt;/em&gt; (or &lt;em&gt;external&lt;/em&gt;) IP address.&lt;/p&gt;
&lt;p&gt;Apparently, this is because some nasty settings in the &lt;code&gt;/etc/hosts&lt;/code&gt; file, there
is an entry looks like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;127.0.0.1   timberlake.cse.buffalo.edu timberlake localhost.localdomain localhost
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since &lt;code&gt;gethostbyname&lt;/code&gt; is actually a DNS looking up process, that DNS request, 
unfortunately, is served by the &lt;code&gt;/etc/hosts&lt;/code&gt; file, instead of a real decent DNS
server.&lt;/p&gt;
&lt;h3&gt;More Advanced &lt;code&gt;getifaddrs&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;I searched the web and found &lt;a href="http://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine"&gt;this stackoverflow threads&lt;/a&gt; talking 
about using &lt;a href="http://man7.org/linux/man-pages/man3/getifaddrs.3.html"&gt;&lt;code&gt;getifaddrs&lt;/code&gt;&lt;/a&gt; to get NIC's IP address. I tried and it seems to work.
Since the machine I worked on uses "eth0" as external NIC, so when looping the
result, I just match the results that has the name "eth0".&lt;/p&gt;
&lt;p&gt;Although it works well, the solution is a little bit ad-hoc. Since the network
interface's name is not necessarily "eth0", for example, in some laptop or
netbook, the primary interface may be "wlan0" instead of "eth0".&lt;/p&gt;
&lt;h3&gt;Most Elegant Way&lt;/h3&gt;
&lt;p&gt;Finally, I adopted the solution that mentioned later on that thread. Basically,
I connected to a well-known server (e.g., Google's DNS server) and then get my 
local socket's information (more specifically, IP) using &lt;a href="http://man7.org/linux/man-pages/man2/getsockname.2.html"&gt;&lt;code&gt;getsockname&lt;/code&gt;&lt;/a&gt;. 
Here is the final code snippet.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;/* get my hostname */&lt;/span&gt;
&lt;span class="nt"&gt;char&lt;/span&gt; &lt;span class="nt"&gt;hostname&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;gethostname&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;hostname&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;sizeof&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;hostname&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gethostname&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;Google&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt; &lt;span class="nt"&gt;DNS&lt;/span&gt; &lt;span class="nt"&gt;server&lt;/span&gt; &lt;span class="nt"&gt;IP&lt;/span&gt;
&lt;span class="nt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nt"&gt;target_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;8.8.8.8&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;DNS&lt;/span&gt; &lt;span class="nt"&gt;port&lt;/span&gt;
&lt;span class="nt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nt"&gt;target_port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;53&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="c"&gt;/* get peer server */&lt;/span&gt;
&lt;span class="nt"&gt;struct&lt;/span&gt; &lt;span class="nt"&gt;addrinfo&lt;/span&gt; &lt;span class="nt"&gt;hints&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;memset&lt;/span&gt;&lt;span class="o"&gt;(&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;hints&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;sizeof&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;hints&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;span class="nt"&gt;hints&lt;/span&gt;&lt;span class="nc"&gt;.ai_family&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;AF_INET&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;hints&lt;/span&gt;&lt;span class="nc"&gt;.ai_socktype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="nt"&gt;struct&lt;/span&gt; &lt;span class="nt"&gt;addrinfo&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nt"&gt;info&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;int&lt;/span&gt; &lt;span class="nt"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;if&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="nt"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;getaddrinfo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;target_name&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;target_port&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;hints&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;info&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;ERROR&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s2"&gt;: getaddrinfo error: %s\n&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gai_strerror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;info-&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;ai_family&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nt"&gt;AF_INET6&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;ERROR&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s2"&gt;: do not support IPv6 yet.\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* create socket */&lt;/span&gt;
&lt;span class="nt"&gt;int&lt;/span&gt; &lt;span class="nt"&gt;sock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;info-&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;ai_family&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;info-&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;ai_socktype&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;info-&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;ai_protocol&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;sock&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;socket&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* connect to server */&lt;/span&gt;
&lt;span class="nt"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;connect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;sock&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;info-&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;ai_addr&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;info-&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;ai_addrlen&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;connect&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* get local socket info */&lt;/span&gt;
&lt;span class="nt"&gt;struct&lt;/span&gt; &lt;span class="nt"&gt;sockaddr_in&lt;/span&gt; &lt;span class="nt"&gt;local_addr&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;socklen_t&lt;/span&gt; &lt;span class="nt"&gt;addr_len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;sizeof&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;local_addr&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;getsockname&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;sock&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;struct&lt;/span&gt; &lt;span class="nt"&gt;sockaddr&lt;/span&gt;&lt;span class="o"&gt;*)&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;local_addr&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;addr_len&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;getsockname&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* get peer ip addr */&lt;/span&gt;
&lt;span class="nt"&gt;char&lt;/span&gt; &lt;span class="nt"&gt;myip&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;INET_ADDRSTRLEN&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;inet_ntop&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;local_addr&lt;/span&gt;&lt;span class="nc"&gt;.sin_family&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;(&lt;/span&gt;&lt;span class="nt"&gt;local_addr&lt;/span&gt;&lt;span class="nc"&gt;.sin_addr&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="nt"&gt;myip&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;sizeof&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;myip&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nt"&gt;NULL&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;inet_ntop&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="ip"></category><category term="getsockname"></category><category term="gethostbyname"></category><category term="getifaddrs"></category></entry><entry><title>Persist and Synchroize VIM undo History using Dropbox</title><link href="http://jhshi.me/2013/10/02/persist-and-synchroize-vim-undo-history-using-dropbox/index.html" rel="alternate"></link><updated>2013-10-02T10:59:00-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2013-10-02:2013/10/02/persist-and-synchroize-vim-undo-history-using-dropbox/index.html</id><summary type="html">&lt;p&gt;It's extremely useful to 
 - Have a &lt;em&gt;virtually&lt;/em&gt; unlimited undo history, and
 - Have it persisted even after exiting VIM, and 
 - Better, even have it synchronized across all your working machines using Dropbox.&lt;/p&gt;


&lt;p&gt;Here is the &lt;code&gt;.vimrc&lt;/code&gt; snippet I used to do the trick.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;&amp;quot; Persist undo&lt;/span&gt;
&lt;span class="x"&gt;set undofile&lt;/span&gt;
&lt;span class="x"&gt;&amp;quot;maximum number of changes that can be undone&lt;/span&gt;
&lt;span class="x"&gt;set undolevels=9999 &lt;/span&gt;
&lt;span class="x"&gt;&amp;quot;maximum number lines to save for undo on a buffer reload&lt;/span&gt;
&lt;span class="x"&gt;set undoreload=9999 &lt;/span&gt;

&lt;span class="x"&gt;&amp;quot; If have Dropbox installed, create a undo dir in it&lt;/span&gt;
&lt;span class="x"&gt;if isdirectory(expand(&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="x"&gt;/Dropbox/&amp;quot;))&lt;/span&gt;
&lt;span class="x"&gt;    silent !mkdir -p &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="x"&gt;/Dropbox/.vimundo &amp;gt;/dev/null 2&amp;gt;&amp;amp;1&lt;/span&gt;
&lt;span class="x"&gt;    set undodir=&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="x"&gt;/Dropbox/.vimundo//&lt;/span&gt;
&lt;span class="x"&gt;else&lt;/span&gt;
&lt;span class="x"&gt;    &amp;quot; Otherwise, keep them in home&lt;/span&gt;
&lt;span class="x"&gt;    silent !mkdir -p &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="x"&gt;/.vimundo &amp;gt;/dev/null 2&amp;gt;&amp;amp;1&lt;/span&gt;
&lt;span class="x"&gt;    set undodir=&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="x"&gt;/.vimundo//&lt;/span&gt;
&lt;span class="x"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note the double slash after the &lt;code&gt;undodir&lt;/code&gt;, it tells VIM to name the undo file
using the full path of the editing file, so no naming collision will occur.&lt;/p&gt;</summary><category term="vimrc"></category><category term="dropbox"></category><category term="undodir"></category></entry><entry><title>ImportError: cannot import name compare_xml</title><link href="http://jhshi.me/2013/09/03/importerror-cannot-import-name-compare-xml/index.html" rel="alternate"></link><updated>2013-09-03T11:23:00-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2013-09-03:2013/09/03/importerror-cannot-import-name-compare-xml/index.html</id><summary type="html">&lt;p&gt;When I tried to fire up Django server using &lt;code&gt;manage.py&lt;/code&gt;, I kept getting this
error,which is cause by &lt;code&gt;from django.test.utils import compare_xml&lt;/code&gt;. It turns 
out that I'm using the wrong Django version (1.4), and I should
upgrade to 1.5.&lt;/p&gt;


&lt;p&gt;The easiest way to upgrade is using &lt;code&gt;easy_install&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# install easy_install if you haven&amp;#39;t done so&lt;/span&gt;
sudo apt-get install python-setuptools
&lt;span class="c"&gt;# now upgrade&lt;/span&gt;
sudo easy_install --upgrade django
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And the python file that actually contains the &lt;code&gt;compare_xml&lt;/code&gt; method is located
in (in my case):
&lt;code&gt;/use/local/lib/python2.7/dist-packages/Django-1.5.2-py2.7.egg/django/test/utils.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;But in the process of figuring out this issue, I learned several things.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When importing django modules, e.g., you have to define the
  &lt;code&gt;DJANGO_SETTINGS_MODULES&lt;/code&gt; environment variable. Just set it to your project's
  &lt;code&gt;settings.py&lt;/code&gt; will be OK.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To find out what methods are provided in a module and various other
  information, say &lt;code&gt;django.test.utils&lt;/code&gt;,  you can use this command in shell:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ DJANGO_SETTINGS_MODULES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;settings python -c &lt;span class="s2"&gt;&amp;quot;import django.test.utils;help(django.test.utils);&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="django"></category><category term="python"></category><category term="compare_xml"></category></entry><entry><title>UserWarning: module dap was already imported from None</title><link href="http://jhshi.me/2013/04/13/userwarning-module-dap-was-already-imported-from-none/index.html" rel="alternate"></link><updated>2013-04-13T18:52:00-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2013-04-13:2013/04/13/userwarning-module-dap-was-already-imported-from-none/index.html</id><summary type="html">&lt;p&gt;I installed &lt;code&gt;python-matploglib&lt;/code&gt; and &lt;code&gt;python-mpltoolkits.basemap&lt;/code&gt; using &lt;code&gt;apt&lt;/code&gt;,
but when I tried to import Basemap using &lt;code&gt;from mpltoolkits.basemap import
Basemap&lt;/code&gt;, the following warning shows up:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;usr/lib/pymodules/python2.7/mpl_toolkits/__init__.py:2: UserWarning: Module dap was already imported from None, but /usr/lib/python2.7/dist-packages is being added to sys.path
  __import__(&amp;#39;pkg_resources&amp;#39;).declare_namespace(__name__)
&lt;/pre&gt;&lt;/div&gt;




&lt;p&gt;To resolve this warning, edit the file
&lt;code&gt;/usr/lib/python2.7/dist-packages/dap-2.2.6.7.egg-info/namespace_packages.txt&lt;/code&gt;,
add &lt;code&gt;dap&lt;/code&gt; as the first line.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;dap
dap.plugins
dap.responses
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ref: &lt;a href="http://stackoverflow.com/questions/13915269/why-do-i-get-userwarning-module-dap-was-already-imported-from-none"&gt;Stackoverflow Question&lt;/a&gt;&lt;/p&gt;</summary><category term="python"></category><category term="dap"></category><category term="basemap"></category><category term="matplot"></category></entry><entry><title>Speed up Octopress Generation</title><link href="http://jhshi.me/2013/04/07/speed-up-octopress-generation/index.html" rel="alternate"></link><updated>2013-04-07T17:04:00-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2013-04-07:2013/04/07/speed-up-octopress-generation/index.html</id><summary type="html">&lt;p&gt;&lt;code&gt;rake generate&lt;/code&gt; can take quite a while, especially when you have many blog
posts. Here are a few tips on how to speed up the generation process.&lt;/p&gt;


&lt;h3&gt;Use &lt;code&gt;rake isolate&lt;/code&gt; and &lt;code&gt;rake integrate&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;It's usually the case when you have many existing posts, while you're modifying
a few of them, it's certainly a overkill to compile all the posts if you just
ant to preview what you're really editing. Octopress provide an &lt;code&gt;isolate&lt;/code&gt;
command just for this purpose.&lt;/p&gt;
&lt;p&gt;The idea is, you can use &lt;code&gt;rake isolate&lt;/code&gt; to move all no-interested posts in an
separate directory outside &lt;code&gt;source/_posts&lt;/code&gt; , so when you do &lt;code&gt;rake generate&lt;/code&gt;,
you'll just compile those posts you care about. When you're done editing and
want to deploy your sites, you can use &lt;code&gt;rake integrate&lt;/code&gt; to move those posts back
and generate a complete site.&lt;/p&gt;
&lt;p&gt;The usage of &lt;code&gt;rake isolate&lt;/code&gt; is simple, you just provide the keywords, and those
posts whose title contain these keywords are kept, other posts are moved to
&lt;code&gt;source/_stash&lt;/code&gt;. Say I'm composing a post named
&lt;code&gt;2013-04-07-hello-world.markdown&lt;/code&gt;, and assume this post is the only one that
contains &lt;code&gt;hello&lt;/code&gt; in its title. Then the following command will do the job:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;rake isolate&lt;span class="o"&gt;[&lt;/span&gt;hello&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Use rb-gsl to boost lsi computation&lt;/h3&gt;
&lt;p&gt;Jekyll has builtin support for related posts, so as Octopress. You just need to
add this line to your &lt;code&gt;_config.yml&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;lsi&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once you enabled &lt;code&gt;lsi&lt;/code&gt;, you'll definite want to install &lt;code&gt;rb-gsl&lt;/code&gt; package to make
the related post generation process faster. When Octopress remind you that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Notice&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;faster&lt;/span&gt; &lt;span class="n"&gt;LSI&lt;/span&gt; &lt;span class="n"&gt;support&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;please&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="n"&gt;rb&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;gsl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;rubyforge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;org&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It's not kidding! &lt;/p&gt;
&lt;p&gt;Note that Octopress doesn't work with the latest gsl versioned &lt;code&gt;1.15.*&lt;/code&gt;. You'll
need to install gsl &lt;code&gt;1.14&lt;/code&gt; manually since &lt;code&gt;apt&lt;/code&gt; or &lt;code&gt;yum&lt;/code&gt; will probably install
&lt;code&gt;1.15.*&lt;/code&gt; for you.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;wget http://ftp.gnu.org/gnu/gsl/gsl-1.14.tar.gz
tar xvf gsl-1.14.tar.gz
&lt;span class="nb"&gt;cd &lt;/span&gt;gsl-1.14
./configure
make
sudo make install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Check the installation by the &lt;code&gt;gsl-config&lt;/code&gt; command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;gsl-config --version
1.14
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then edit your &lt;code&gt;Gemfile&lt;/code&gt; in your blog source root. Add the following line in the
&lt;code&gt;development&lt;/code&gt; group:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;gem &amp;#39;gsl&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then use &lt;code&gt;bundle&lt;/code&gt; to install it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;bundle install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You're all set. Now when you do &lt;code&gt;rake generate&lt;/code&gt;, you shouldn't see that &lt;code&gt;10x
faster&lt;/code&gt; line anymore.&lt;/p&gt;</summary><category term="generation"></category><category term="speedup"></category><category term="gsl"></category><category term="isolate"></category></entry><entry><title>Why I Switched to Octopress</title><link href="http://jhshi.me/2013/04/07/why-i-switched-to-octopress/index.html" rel="alternate"></link><updated>2013-04-07T16:01:00-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2013-04-07:2013/04/07/why-i-switched-to-octopress/index.html</id><summary type="html">&lt;p&gt;I used to blog on wordpress.com. After a year or so, I finally
decided to abandoned it and switched to &lt;a href="http://octopress.org"&gt;Octopress&lt;/a&gt; + 
&lt;a href="http://pages.github.com"&gt;Github Pages&lt;/a&gt;. 
Here are the reasons and how I migrated to Octopress. Maybe because I was using 
&lt;em&gt;wordpress.com&lt;/em&gt;, and those who use a self-hosted wordpress have something 
different to say, the way I see it, wordpress, at least &lt;em&gt;wordpress.com&lt;/em&gt;, sucks.&lt;/p&gt;


&lt;h3&gt;Use your favorite editor? No-no&lt;/h3&gt;
&lt;p&gt;I am an Vim addict and I almost use Vim for everything (except for watching
videos perhaps). It's extremely uncomfortable using the dumb text input frame
embedded in web page. Besides, I often need to insert inlining code or code block 
in blogs. For inline code, I have to use plain text mode and wrap them using the
html &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; tag manually. And for code blocks, I have to use the stupid,
&lt;strong&gt;unportable&lt;/strong&gt; &lt;code&gt;[sourcecode]&lt;/code&gt; tag.&lt;/p&gt;
&lt;p&gt;When I realized that awful experience even cool down my passion for blogging, I 
know it's time to change.&lt;/p&gt;
&lt;p&gt;With Octopress, I can use Vim to compose blogs locally. For formating, 
&lt;a href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt; did a decent enough job. I'm more than happy with these.&lt;/p&gt;
&lt;h3&gt;Page loading speed&lt;/h3&gt;
&lt;p&gt;In Wordpress, everything is stored in database, and the page is generated
dynamically when you request it. Despite those &lt;a href="http://codex.wordpress.org/WordPress_Optimization/Caching#Caching_Plugins"&gt;caching plugins&lt;/a&gt;, why
bother dynamic anyway when static pages are just good enough?&lt;/p&gt;
&lt;p&gt;Using &lt;a href="https://developers.google.com/speed/pagespeed/insights"&gt;Google's PageSpeed Insights&lt;/a&gt; for measurement, my old blog site
hosted in &lt;em&gt;wordpress.com&lt;/em&gt; got 78 out of 100 score, while this blog got 91 out of 100. 
Hooray!&lt;/p&gt;
&lt;h3&gt;Migration&lt;/h3&gt;
&lt;p&gt;Jekyll offers several ways to &lt;a href="https://github.com/mojombo/jekyll/wiki/blog-migrations"&gt;migrate your previous blogs&lt;/a&gt;. Octopress
is based on Jekyll, so all these ways also apply. I found the &lt;a href="https://github.com/thomasf/exitwp"&gt;Exitwp&lt;/a&gt;
tool extremely usefully for migrating wordpress blogs. One drawback of Exitwp is it can
not handle non-ascii characters so a few of my previous blogs written in Chinese
can not be migrated using it.&lt;/p&gt;</summary><category term="wordpress"></category><category term="migration"></category></entry><entry><title>OS161 Synchronization Primitives: RWLock</title><link href="http://jhshi.me/2013/04/05/os161-synchronization-primitives-rwlock/index.html" rel="alternate"></link><updated>2013-04-05T13:30:00-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2013-04-05:2013/04/05/os161-synchronization-primitives-rwlock/index.html</id><summary type="html">&lt;p&gt;The idea of &lt;a href="http://en.wikipedia.org/wiki/Readers%E2%80%93writer_lock"&gt;Reader-Writer Lock&lt;/a&gt; is quite simple. In normal &lt;a href="/2013/04/04/os161-synchronization-primitives-lock"&gt;lock&lt;/a&gt;,
we don't differentiate the threads. That said, each thread who wants to enter the
critical section must first acquire the lock. But on a second thought, you may
find that threads actually have different behavior inside the critical section:
some threads just want to see the values of shared variable, while others really
want to update those variables.&lt;/p&gt;


&lt;h3&gt;An Example&lt;/h3&gt;
&lt;p&gt;Suppose we have a book database in a library, each reader who wants to query the
database must first acquire the lock before he can actually do the query. The
library manager, who wants to update some book info also need to acquire the
lock before he can do the actual update. In this case, we can see that the
queries of multiple readers in fact have no conflict. So ideally they should be
allowed to be in the critical section at the same time. On the other hand, the
library manager must have exclusive access to the database while he's updating.
No readers, no other managers can enter the critical section until the first
manager leaves.&lt;/p&gt;
&lt;p&gt;So, two rules for rwlock:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Multiple readers can be in the critical section at the same time&lt;/li&gt;
&lt;li&gt;One and only one writer can in the critical section at any time&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Starvation&lt;/h3&gt;
&lt;p&gt;Suppose the coming sequence of threads are "RWRRRRR...", in which R denotes reader
and W denotes writer. The first reader arrives, and found no one in the critical
section, and he happily comes in. Before he leaves, the writer arrives, but
found there is a reader inside the critical section, so the writer wait. While
the write is waiting, the second reader comes and find there is one reader
inside the critical section, literally, it's OK for him to come in according to
the rules, right? The same case applies to the third, forth,..., readers.&lt;/p&gt;
&lt;p&gt;So without special attention, we see readers come and go, while the poor writer
keeps waiting, for virtually a "unbounded" time. In this case, the writer is
starved.&lt;/p&gt;
&lt;p&gt;The thing is, the second, third, forth..., readers shouldn't enter critical section 
since there is a write waiting before them!&lt;/p&gt;
&lt;h3&gt;Implementation&lt;/h3&gt;
&lt;p&gt;There are many ways to implement rwlock. You can use any of the semaphore, cv or 
lock. Here I introduce one using semaphore and lock. It's very simple, yet has
the limitation that only support at most a  certain number of readers in
the critical section.&lt;/p&gt;
&lt;p&gt;Let's imagine the critical section as a set of resources. The initial capacity
is &lt;code&gt;MAX_READERS&lt;/code&gt;. The idea is each reader needs one of these resources to enter 
the critical section, while each writer needs all of these resources (to prevent other
readers or writers) to enter.&lt;/p&gt;
&lt;p&gt;To let the readers be aware of the waiting writers, each thread should first
acquire a lock before he can acquire the resource. &lt;/p&gt;
&lt;p&gt;So for &lt;code&gt;rwlock_acquire_read&lt;/code&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Acquire the lock&lt;/li&gt;
&lt;li&gt;Acquire a resource using &lt;code&gt;P&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Release the lock&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For &lt;code&gt;rwlock_release_read&lt;/code&gt;, just release the resource using &lt;code&gt;V&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;rwlock_acquire_write&lt;/code&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Acquire the lock, so that no other readers/writer would be able to acquire
   the rwlock&lt;/li&gt;
&lt;li&gt;Acquire &lt;strong&gt;ALL&lt;/strong&gt; the resources by doing &lt;code&gt;P&lt;/code&gt; &lt;code&gt;MAX_READERS&lt;/code&gt; times&lt;/li&gt;
&lt;li&gt;Release the lock. It's safe now since we got all the resources.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For &lt;code&gt;rwlock_release_write&lt;/code&gt;, just release all the resources.&lt;/p&gt;</summary><category term="rwlock"></category><category term="synchronization"></category></entry><entry><title>OS161 Synchronization Primitives: CV</title><link href="http://jhshi.me/2013/04/05/os161-synchronization-primitives-cv/index.html" rel="alternate"></link><updated>2013-04-05T12:37:00-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2013-04-05:2013/04/05/os161-synchronization-primitives-cv/index.html</id><summary type="html">&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Monitor_(synchronization)"&gt;Condition variable&lt;/a&gt; is used for a thread to wait for some condition to be
true before continuing. The implementation is quite simple compared to
&lt;a href="/2013/04/04/os161-synchronization-primitives-lock"&gt;lock&lt;/a&gt;, yet the difficult part is to understand how a CV is supposed to
used.&lt;/p&gt;


&lt;h3&gt;CV Interface&lt;/h3&gt;
&lt;p&gt;Condition variable has two interfaces: &lt;code&gt;cv_wait&lt;/code&gt; and &lt;code&gt;cv_signal&lt;/code&gt;. &lt;code&gt;cv_wait&lt;/code&gt; is
used to wait for a condition to be true, and &lt;code&gt;cv_signal&lt;/code&gt; is used to notify other
threads that a certain condition is true.&lt;/p&gt;
&lt;p&gt;So what?&lt;/p&gt;
&lt;p&gt;Let's consider a producer-consumer case, where a bunch of threads share a
resource pool, some of them (producer) is responsible to put stuff to the pool
and others (consumer) are responsible to take stuff from the pool. Obviously, we
have two rules.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If the pool is full, then producers can not put to the pool&lt;/li&gt;
&lt;li&gt;If the pool is empty, then consumers can not take stuff from the pool&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And we use two condition variables for each of these rules: &lt;code&gt;pool_full&lt;/code&gt; and
&lt;code&gt;pool_empty&lt;/code&gt;. Here is the pseudo code for producer and consumer:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;producer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;lock_acquire&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pool_lock&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pool_is_full&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;cv_wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pool_full&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pool_lock&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;produce&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="cm"&gt;/* notify that the pool now is not empty, so if any one is waiting&lt;/span&gt;
&lt;span class="cm"&gt;     * on the pool_empty cv, wake them up &lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="n"&gt;cv_signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pool_empty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pool_lock&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;lock_release&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pool_lock&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;lock_acquire&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pool_lock&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pool_is_empty&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;cv_wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pool_empty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pool_lock&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;consume&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="cm"&gt;/* notify that the pool now is not full, so if any one is waiting&lt;/span&gt;
&lt;span class="cm"&gt;     * on the pool_full cv, wake them up &lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;

    &lt;span class="n"&gt;cv_signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pool_full&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pool_lock&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;lock_release&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pool_lock&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we also use a lock to protect access to the pool. We can see from this
example:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Condition variable is virtually a wait channel&lt;/li&gt;
&lt;li&gt;Condition variable is normally used together with lock, but &lt;strong&gt;condition
   variable itself doesn't contain a lock&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;What's in &lt;code&gt;cv&lt;/code&gt; structure?&lt;/h3&gt;
&lt;p&gt;Obviously, we need a wait channel. And that's it (probably plus a &lt;code&gt;cv_name&lt;/code&gt;).&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;cv_wait&lt;/code&gt; and &lt;code&gt;cv_signal&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Now let's get to business. The comment in &lt;code&gt;$OS161_SRC/kern/inlucde/synch.h&lt;/code&gt;
basically told you everything you need to do. &lt;/p&gt;
&lt;p&gt;In &lt;code&gt;cv_wait&lt;/code&gt;, we need to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Lock the wait channel&lt;/li&gt;
&lt;li&gt;Release the lock passed in&lt;/li&gt;
&lt;li&gt;Sleep on the wait channel&lt;/li&gt;
&lt;li&gt;When waked up, re-acquire the lock.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So before &lt;code&gt;cv_wait&lt;/code&gt;, we should already hold the lock (so that we can release
it). And after &lt;code&gt;cv_wait&lt;/code&gt;, we still hold the lock.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;cv_signal&lt;/code&gt;, we just wake up somebody in the wait channel using
&lt;code&gt;wchan_wakeone&lt;/code&gt;.&lt;/p&gt;</summary><category term="cv"></category><category term="synchronization"></category></entry><entry><title>OS161 Synchronization Primitives: Lock</title><link href="http://jhshi.me/2013/04/04/os161-synchronization-primitives-lock/index.html" rel="alternate"></link><updated>2013-04-04T15:23:00-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2013-04-04:2013/04/04/os161-synchronization-primitives-lock/index.html</id><summary type="html">&lt;p&gt;Lock is basically just a semaphore whose initial counter is 1. &lt;code&gt;lock_acquire&lt;/code&gt; is
like &lt;code&gt;P&lt;/code&gt;, while &lt;code&gt;lock_release&lt;/code&gt; is like &lt;code&gt;V&lt;/code&gt;. You probably want to go over 
&lt;a href="/2013/04/04/os161-synchronization-primitives-semaphore"&gt;my previous post about semaphore&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;Lock's holder&lt;/h3&gt;
&lt;p&gt;However, since only one can hold the lock at any given time, that guy is
considered to be the &lt;strong&gt;holder&lt;/strong&gt; of this lock. While in semaphore, we don't have
such a holder concept since multiple thread can "hold" the semaphore at the same
time.&lt;/p&gt;
&lt;p&gt;Thus we need to store the holder information in our lock structure, along with the
conventional spin lock and wait channel. Intuitively, you may tempted to use the
thread name (&lt;code&gt;curthread-&amp;gt;t_name&lt;/code&gt;) as the thread's identifier. Nevertheless, same
with the case in real world, the thread's name isn't necessarily unique. The 
OS161 doesn't forbidden us to create a bunch of threads with the same name.&lt;/p&gt;
&lt;p&gt;There is a global variable defined in &lt;code&gt;$OS161_SRC/kern/include/current.h&lt;/code&gt;
named &lt;code&gt;curthread&lt;/code&gt;, which is a pointer to the kernel data structure of current
thread. Two different threads definitely have different thread structures
(hence different pointers), which makes the pointer to thread structure a good
enough thread identifier.&lt;/p&gt;
&lt;h3&gt;Reentrant Lock&lt;/h3&gt;
&lt;p&gt;Another trick thing is to decide whether we support &lt;a href="http://en.wikipedia.org/wiki/Reentrant_mutex"&gt;reentrant lock&lt;/a&gt; or not.
Basically, a process can acquire a reentrant lock multiple times without
blocking itself.&lt;/p&gt;
&lt;p&gt;At first glance, you may wonder what kind of dumb thread would acquire a lock
multiple times anyway? Well, that kind of thread does exist, and they may not be
dumb at all. Reentrant lock is useful when it's difficult for a thread to track
whether it has grabbed the lock. Suppose we have multiple threads that traverse
a graph simultaneously, and each thread need to first grab the lock of a node
before it can visit that node. If the graph has a circle or there are multiple
paths leads to the same node, then it's possible that a thread visit the same
node twice. Although there is a function named &lt;code&gt;lock_do_i_hold&lt;/code&gt; that can tell
whether a thread holds a lock or not, unfortunately it's not a public interface of lock.&lt;/p&gt;
&lt;p&gt;In OS161, it's OK that you choose to not support reentrant lock, so when you
detect a thread try to acquire a lock while it's the lock's holder, just panic.
But if you want to support reentrant lock, &lt;strong&gt;you need to make sure a thread won't
accidentally loose a lock.&lt;/strong&gt; For example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;lock_acquire&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lock1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="n"&gt;lock_release&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lock1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;lock_acquire&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lock1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello world!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;lock_release&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lock1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this case, the thread is supposed to still hold the lock &lt;strong&gt;after&lt;/strong&gt; B
returns.&lt;/p&gt;
&lt;p&gt;The simplest way would be, keep a counter (initial value 0) for each lock. When 
a thread acquires a lock, increase that counter. When it release the lock, decrease 
the counter, only actually release a lock when the counter reaches 0.&lt;/p&gt;</summary><category term="synchronization"></category><category term="lock"></category></entry><entry><title>OS161 Synchronization Primitives: Semaphore</title><link href="http://jhshi.me/2013/04/04/os161-synchronization-primitives-semaphore/index.html" rel="alternate"></link><updated>2013-04-04T14:52:00-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2013-04-04:2013/04/04/os161-synchronization-primitives-semaphore/index.html</id><summary type="html">&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Semaphore_(programming)"&gt;Semaphore&lt;/a&gt; denotes a certain number of shared resources. Basically, it's
one counter and two operations on this counter, namely &lt;code&gt;P&lt;/code&gt; and &lt;code&gt;V&lt;/code&gt;. &lt;code&gt;P&lt;/code&gt; is used
to acquire one resource (thus decrementing the counter) while &lt;code&gt;V&lt;/code&gt; is used to
release one resource (thus incrementing the counter).&lt;/p&gt;


&lt;h3&gt;A Metaphor&lt;/h3&gt;
&lt;p&gt;My favorite example is the printer. Say we have three printers in a big lab,
where everybody in the lab shared those printers. Obviously only one printing
job can be conducted by one printer at any time, otherwise, the printed content
would be messed up. &lt;/p&gt;
&lt;p&gt;However, we can not use a single lock to protect the access of all these three
printers. It'll be very dumb. An intuitive way is to use three locks, one for
each printer. Yet more elegantly, we use a semaphore with initial counter as 3.
Every time before a user submit a print job, he need to first &lt;code&gt;P&lt;/code&gt; this semaphore
to acquire one printer. And after he is done, he need to &lt;code&gt;V&lt;/code&gt; this semaphore to
release the printer. If there is already one print job at each printer, then the
following poor guys who want to &lt;code&gt;P&lt;/code&gt; this semaphore would have to wait.&lt;/p&gt;
&lt;h3&gt;What should a semaphore structure contain?&lt;/h3&gt;
&lt;p&gt;Apparently, we need an &lt;strong&gt;counter&lt;/strong&gt; to record how many resources available. Since
this counter is a shared variable, we need a &lt;strong&gt;lock&lt;/strong&gt; to protect it. At this point,
we only have the &lt;code&gt;spinlock&lt;/code&gt; provided in &lt;code&gt;$OS161_SRC/kern/include/spinlock.h&lt;/code&gt;.
That's fine since our critical section is short anyway. In order to let the poor
guys have a place to wait, we also need an &lt;strong&gt;wait channel&lt;/strong&gt; (in
&lt;code&gt;OS161_SRC/kern/include/wchan.h&lt;/code&gt;)&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;P&lt;/code&gt; Operation&lt;/h3&gt;
&lt;p&gt;The flow of &lt;code&gt;P&lt;/code&gt; would be:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Acquire the spin lock&lt;/li&gt;
&lt;li&gt;Check if there are some resources available (&lt;code&gt;counter &amp;gt; 0&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;If yes, we're lucky. Happily go to step 8. &lt;/li&gt;
&lt;li&gt;If no, then we first grab the lock of the wait channel, since the wait
   channel is also shared.&lt;/li&gt;
&lt;li&gt;Release the spin lock, and wait on the wait channel by calling &lt;code&gt;wchan_sleep&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;We're sleeping...&lt;/li&gt;
&lt;li&gt;After wake up, first grab the spin lock, and go to step 2&lt;/li&gt;
&lt;li&gt;At this point, the &lt;code&gt;counter&lt;/code&gt; should be positive, decrement it by 1&lt;/li&gt;
&lt;li&gt;Release the spin lock, and return&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;&lt;code&gt;V&lt;/code&gt; Operation&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;V&lt;/code&gt; is much simpler compared to &lt;code&gt;P&lt;/code&gt;. The flow is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Acquire the spin lock&lt;/li&gt;
&lt;li&gt;Increment the &lt;code&gt;counter&lt;/code&gt; by 1&lt;/li&gt;
&lt;li&gt;Wake up some poor guy in the wait channel by calling &lt;code&gt;wchan_wakeone&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Release the spin lock and return&lt;/li&gt;
&lt;/ol&gt;</summary><category term="semaphore"></category><category term="synchronization"></category></entry><entry><title>Vimium Not Working in Google Search Results Page</title><link href="http://jhshi.me/2013/03/15/vimium-not-working-in-google-search-results-page/index.html" rel="alternate"></link><updated>2013-03-15T06:50:16-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2013-03-15:2013/03/15/vimium-not-working-in-google-search-results-page/index.html</id><summary type="html">&lt;p&gt;If you're Vim user, then you must try &lt;a href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=en"&gt;Vimium&lt;/a&gt;. It makes your browsing 
much much comfortable!&lt;/p&gt;


&lt;p&gt;These days, I found that Vimium commands (&lt;code&gt;j&lt;/code&gt;, &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;f&lt;/code&gt;) don't work on Google search
results page. But works just in in any other pages. I tried turning the instant 
search off, logging out my account in Google's homepage, turning of personalized 
search results, etc. None of those work.&lt;/p&gt;
&lt;p&gt;Then I found that Vimium only stop working if I use Chrome's Omnibox to search.
That is, if I do the search in Google's home page instead of Chrome's Omnibox,
then everything is fine. I suspect that some extra flags in Omnibox's default
search pattern is the reason why Vimium refused to work.&lt;/p&gt;
&lt;p&gt;But Omnibox is so convenience to use (&lt;code&gt;Alt+D&lt;/code&gt; to focus &amp;amp; search). Opening
Google's homepage every time you need search will certainly be another pain. So
I changed the default behavior of Chrome's Omnibox. Unfortunately, the built-in
Google search pattern is unchangeable, so I added an new search engine entry
and set it as default. Here is the fields of the new entry:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Google&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;whatever&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;want&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; 
&lt;span class="n"&gt;Keyword&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Google&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;whatever&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;want&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; 
&lt;span class="n"&gt;Search&lt;/span&gt; &lt;span class="n"&gt;Pattern&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;google&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;=%&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here is a more detailed information about Google's search URL. Add whatever you
need, but keep it minimal, in case you screwed up with Vimium again :-)&lt;/p&gt;
&lt;p&gt;&lt;a href="https://moz.com/ugc/the-ultimate-guide-to-the-google-search-parameters"&gt;https://moz.com/ugc/the-ultimate-guide-to-the-google-search-parameters&lt;/a&gt;&lt;/p&gt;</summary><category term="chrome"></category><category term="omnibox"></category><category term="vimium"></category></entry><entry><title>Console Input Messed up in OS161</title><link href="http://jhshi.me/2013/03/15/console-input-messed-up-in-os161/index.html" rel="alternate"></link><updated>2013-03-15T04:26:57-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2013-03-15:2013/03/15/console-input-messed-up-in-os161/index.html</id><summary type="html">&lt;p&gt;When you finished the process system call (e.g., &lt;code&gt;fork&lt;/code&gt;, &lt;code&gt;execv&lt;/code&gt;) and test your
system call by executing some user program, you'll probably find that the
console input behavior is messed up. &lt;/p&gt;


&lt;p&gt;For example, when you executing user shell from OS161 kernel menu, and then 
executing &lt;code&gt;/bin/true&lt;/code&gt; from the shell, you may see this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;OS/161 kernel &lt;span class="o"&gt;[&lt;/span&gt;? &lt;span class="k"&gt;for&lt;/span&gt; menu&lt;span class="o"&gt;]&lt;/span&gt;: s 
Operation took 0.000285120 seconds 
OS/161 kernel &lt;span class="o"&gt;[&lt;/span&gt;? &lt;span class="k"&gt;for&lt;/span&gt; menu&lt;span class="o"&gt;]&lt;/span&gt;: &lt;span class="o"&gt;(&lt;/span&gt;program name unknown&lt;span class="o"&gt;)&lt;/span&gt;: Timing enabled. 
OS/161&lt;span class="nv"&gt;$ &lt;/span&gt;/bin/true 
&lt;span class="o"&gt;(&lt;/span&gt;program name unknown&lt;span class="o"&gt;)&lt;/span&gt;: bntu: No such file or directory 
&lt;span class="o"&gt;(&lt;/span&gt;program name unknown&lt;span class="o"&gt;)&lt;/span&gt;: subprocess &lt;span class="nb"&gt;time&lt;/span&gt;: 0.063300440 seconds 
Exit 1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this case, the shell program only receive the input "bnut" instead of your
input (&lt;code&gt;/bin/true&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;To find out why, we need to dig into how kernel menu (&lt;code&gt;$OS161_SRC/kern/startup/menu.c&lt;/code&gt;)
works a little bit. When you hit "s" in the kernel menu. What happens?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cmd_dispatch&lt;/code&gt; will look up the &lt;code&gt;cmd_table&lt;/code&gt; and call &lt;code&gt;cmd_shell&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cmd_shell&lt;/code&gt; just call &lt;code&gt;common_prog&lt;/code&gt; with the shell path argument&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;common_prog&lt;/code&gt; will first create a child thread with the start function
&lt;code&gt;cmd_progthread&lt;/code&gt;, then return&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the child thread, &lt;code&gt;cmd_progthread&lt;/code&gt; will try to run the actual program
(in our case, the shell)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note that the shell program is run in a separate child thread, and the parent
thread (i.e., the menu thread) will continue to run after he "forked" the child
thread.&lt;/p&gt;
&lt;p&gt;So now there are actually two thread that want to read console input, which
leads to race condition. This is why the shell program receive corrupted input:
the menu thread eaten some of the inputs!&lt;/p&gt;
&lt;p&gt;To solve this problem, we need to let the menu thread wait for the child
thread to complete, then return. So what we need to do is in &lt;code&gt;common_prog&lt;/code&gt;, we
need to do a &lt;code&gt;waitpid&lt;/code&gt; operation after we call &lt;code&gt;thread_fork&lt;/code&gt;. And at the end of
&lt;code&gt;cmd_progthread&lt;/code&gt;, we need to explicitly call &lt;code&gt;exit&lt;/code&gt; with proper exit code in
case the user program doesn't do this.&lt;/p&gt;
&lt;p&gt;Also note that &lt;code&gt;waitpid&lt;/code&gt; and &lt;code&gt;exit&lt;/code&gt; are in fact user land system call, and we can
not directly call them in kernel, so you may need to make some "shortcuts" in
your system call implementation to let the kernel be able to call &lt;code&gt;sys_waitpid&lt;/code&gt;
and &lt;code&gt;sys_exit&lt;/code&gt;.&lt;/p&gt;</summary><category term="console"></category><category term="exit"></category><category term="waitpid"></category><category term="syscall"></category></entry><entry><title>Use Ant Exec task for Linux Shell Commands</title><link href="http://jhshi.me/2013/02/27/use-ant-exec-task-for-linux-shell-commands/index.html" rel="alternate"></link><updated>2013-02-27T03:59:02-05:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2013-02-27:2013/02/27/use-ant-exec-task-for-linux-shell-commands/index.html</id><summary type="html">&lt;p&gt;Suppose we use cscope and/or ctags for indexing source code of our Java project
and we want to update the meta data files (e.g. cscope.out, tags) each time
after we compile. We can use the &lt;code&gt;--post-comile&lt;/code&gt; target to accomplish this.
Create a &lt;code&gt;custom_rules.xml&lt;/code&gt; in your project root directory with the following
content. This file will be included to your main build.xml file.&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt; 
&lt;span class="nt"&gt;&amp;lt;project&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;target&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-post-compile&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; 
        &lt;span class="nt"&gt;&amp;lt;exec&lt;/span&gt; &lt;span class="na"&gt;executable=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;find&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;failonerror=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; 
            &lt;span class="nt"&gt;&amp;lt;arg&lt;/span&gt; &lt;span class="na"&gt;line=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; . -name *.java&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; 
            &lt;span class="nt"&gt;&amp;lt;redirector&lt;/span&gt; &lt;span class="na"&gt;output=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cscope.files&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; 
        &lt;span class="nt"&gt;&amp;lt;/exec&amp;gt;&lt;/span&gt; 
        &lt;span class="nt"&gt;&amp;lt;exec&lt;/span&gt; &lt;span class="na"&gt;executable=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cscope&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;failonerror=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; 
            &lt;span class="nt"&gt;&amp;lt;arg&lt;/span&gt; &lt;span class="na"&gt;line=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-RUbq&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; 
        &lt;span class="nt"&gt;&amp;lt;/exec&amp;gt;&lt;/span&gt; 
        &lt;span class="nt"&gt;&amp;lt;exec&lt;/span&gt; &lt;span class="na"&gt;executable=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ctags&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;failonerror=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; 
            &lt;span class="nt"&gt;&amp;lt;arg&lt;/span&gt; &lt;span class="na"&gt;line=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-R .&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; 
        &lt;span class="nt"&gt;&amp;lt;/exec&amp;gt;&lt;/span&gt; 
    &lt;span class="nt"&gt;&amp;lt;/target&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we create one task, namely &lt;code&gt;exec&lt;/code&gt; task, to execute our commands. Pay
special attention to our first command, &lt;code&gt;find&lt;/code&gt;. More specifically, how we
redirect the output here. The normal bash redirect symbol &lt;code&gt;&amp;gt;&lt;/code&gt; doesn't not work
here.&lt;/p&gt;
&lt;p&gt;Reference:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://ant.apache.org/manual/using.html"&gt;http://ant.apache.org/manual/using.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ant.apache.org/manual/Tasks/exec.html"&gt;http://ant.apache.org/manual/Tasks/exec.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ant.apache.org/manual/Types/redirector.html"&gt;http://ant.apache.org/manual/Types/redirector.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="ant"></category><category term="exec"></category></entry><entry><title>Eclim E218 When Open a File in New Tab</title><link href="http://jhshi.me/2013/02/26/eclim-e218-when-open-a-file-in-new-tab/index.html" rel="alternate"></link><updated>2013-02-26T07:24:45-05:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2013-02-26:2013/02/26/eclim-e218-when-open-a-file-in-new-tab/index.html</id><summary type="html">&lt;p&gt;In the directory sub window, when I use &lt;code&gt;T&lt;/code&gt; to open a file in new tab, the
following error message will occur:&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;No&lt;/span&gt; &lt;span class="nx"&gt;matching&lt;/span&gt; &lt;span class="nx"&gt;autocommands&lt;/span&gt;
&lt;span class="nb"&gt;Error&lt;/span&gt; &lt;span class="nx"&gt;detected&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nx"&gt;processing&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;eclim&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;project&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;tree&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;ProjectTree&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="nx"&gt;eclim&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;project&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;tree&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;ProjectTreeOpen&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="nx"&gt;eclim&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;VerticalToolWindowOpen&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="nx"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;78&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="nx"&gt;E218&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;autocommand&lt;/span&gt; &lt;span class="nx"&gt;nesting&lt;/span&gt; &lt;span class="nx"&gt;too&lt;/span&gt; &lt;span class="nx"&gt;deep&lt;/span&gt;
&lt;span class="nb"&gt;Error&lt;/span&gt; &lt;span class="nx"&gt;detected&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nx"&gt;processing&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="nx"&gt;_OpenFile&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="nx"&gt;eclim&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;tree&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;ExecuteAction&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="nx"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="nx"&gt;E171&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Missing&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;endif&lt;/span&gt;
&lt;span class="nb"&gt;Error&lt;/span&gt; &lt;span class="nx"&gt;detected&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nx"&gt;processing&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="nx"&gt;_OpenFile&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="nx"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="nx"&gt;E171&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Missing&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To fix this, apply the following patch to &lt;code&gt;$HOME/.vim/eclim/plugin/project.vim&lt;/code&gt;
described in &lt;a href="https://github.com/ervandew/eclim/commit/597aeb31fa4ea1e2c102547871935dbb89cf9202"&gt;here&lt;/a&gt;&lt;/p&gt;</summary><category term="eclim"></category><category term="vim"></category></entry><entry><title>Using Cscope INSIDE Vim</title><link href="http://jhshi.me/2013/02/21/using-cscope-inside-vim/index.html" rel="alternate"></link><updated>2013-02-21T04:35:58-05:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2013-02-21:2013/02/21/using-cscope-inside-vim/index.html</id><summary type="html">&lt;p&gt;The goal we want to accomplish here is, jumping to a function definition (maybe
in another file,) finding out where a symbol is defined, finding out what
function(s) call current function and what functions are called from this
function, ALL WITHOUT LEAVING VIM.&lt;/p&gt;


&lt;p&gt;First, make sure you have &lt;code&gt;cscope&lt;/code&gt; installed by issuing the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cscope --version
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If bash complains "command not find", then install &lt;code&gt;cscope&lt;/code&gt;. In Ubuntu, the
command is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get install cscope
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, we need to generate &lt;code&gt;cscope&lt;/code&gt; database. If you're dealing with C files,
then in the root directory of the source tree, using this command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cscope -RUbq
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you're dealing with Java files, before generating the database, we need to
tell &lt;code&gt;cscope&lt;/code&gt; tracing which files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;find . -name *.java &amp;gt; cscope.files
&lt;span class="nv"&gt;$ &lt;/span&gt;cscope -RUbq
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The explanations are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;-R: Recurse subdirectories during search for source files.
-U: Check file time stamps. This option will update the time stamp on the database even if no files have changed.
-b: Build the cross-reference only. We don&amp;#39;t want the interactive mode.
-q: Enable fast symbol lookup via an inverted index
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For more details, consult the &lt;code&gt;cscope&lt;/code&gt; manual:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;man cscope
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After this step, several &lt;code&gt;cscope&lt;/code&gt; database files will be generated. If you're
using git or hg to manage your code, you may want to ignore them in the git/hg
repository. Do that by adding these lines into your .gitignore/.hgignore&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cscope.*
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then we need to tell Vim how to interact with &lt;code&gt;cscope&lt;/code&gt;. Add the following lines
into your &lt;code&gt;.vimrc&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cscope&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;csprg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;/usr/bin/cscope&lt;/span&gt;
    &lt;span class="nx"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;csto&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="nx"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;cst&lt;/span&gt;
    &lt;span class="nx"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;csverb&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot; C symbol&lt;/span&gt;
&lt;span class="s2"&gt;    nmap &amp;lt;C-\&amp;gt;s :cs find s &amp;lt;C-R&amp;gt;=expand(&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;cword&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;)&amp;lt;CR&amp;gt;&amp;lt;CR&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;    &amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;definition&lt;/span&gt;
    &lt;span class="nx"&gt;nmap&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;cs&lt;/span&gt; &lt;span class="nx"&gt;find&lt;/span&gt; &lt;span class="nx"&gt;g&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;R&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="nx"&gt;expand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;cword&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CR&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CR&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot; functions that called by this function&lt;/span&gt;
&lt;span class="s2"&gt;    nmap &amp;lt;C-\&amp;gt;d :cs find d &amp;lt;C-R&amp;gt;=expand(&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;cword&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;)&amp;lt;CR&amp;gt;&amp;lt;CR&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;    &amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;funtions&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="nx"&gt;calling&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;
    &lt;span class="nx"&gt;nmap&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;cs&lt;/span&gt; &lt;span class="nx"&gt;find&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;R&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="nx"&gt;expand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;cword&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CR&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CR&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot; test string&lt;/span&gt;
&lt;span class="s2"&gt;    nmap &amp;lt;C-\&amp;gt;t :cs find t &amp;lt;C-R&amp;gt;=expand(&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;cword&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;)&amp;lt;CR&amp;gt;&amp;lt;CR&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;    &amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;egrep&lt;/span&gt; &lt;span class="nx"&gt;pattern&lt;/span&gt;
    &lt;span class="nx"&gt;nmap&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;cs&lt;/span&gt; &lt;span class="nx"&gt;find&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;R&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="nx"&gt;expand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;cword&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CR&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CR&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot; file&lt;/span&gt;
&lt;span class="s2"&gt;    nmap &amp;lt;C-\&amp;gt;f :cs find f &amp;lt;C-R&amp;gt;=expand(&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;cfile&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;)&amp;lt;CR&amp;gt;&amp;lt;CR&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;    &amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;including&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;
    &lt;span class="nx"&gt;nmap&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;cs&lt;/span&gt; &lt;span class="nx"&gt;find&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;^&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;R&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="nx"&gt;expand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;cfile&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CR&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CR&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="s2"&gt;&amp;quot; Automatically make cscope connections&lt;/span&gt;
&lt;span class="s2"&gt;    function! LoadCscope()&lt;/span&gt;
&lt;span class="s2"&gt;        let db = findfile(&amp;quot;&lt;/span&gt;&lt;span class="nx"&gt;cscope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;)&lt;/span&gt;
&lt;span class="s2"&gt;        if (!empty(db))&lt;/span&gt;
&lt;span class="s2"&gt;            let path = strpart(db, 0, match(db, &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;cscope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;out$&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;))&lt;/span&gt;
&lt;span class="s2"&gt;            set nocscopeverbose &amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;suppress&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;duplicate connection&amp;#39;&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;
            &lt;span class="nx"&gt;exe&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;cs add &amp;quot;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;
            &lt;span class="nx"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;cscopeverbose&lt;/span&gt;
        &lt;span class="nx"&gt;endif&lt;/span&gt;
    &lt;span class="nx"&gt;endfunction&lt;/span&gt;
    &lt;span class="nx"&gt;au&lt;/span&gt; &lt;span class="nx"&gt;BufEnter&lt;/span&gt; &lt;span class="o"&gt;/*&lt;/span&gt; &lt;span class="nx"&gt;call&lt;/span&gt; &lt;span class="nx"&gt;LoadCscope&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We're done! Now using Vim to edit a source code file. Put the cursor on a
symbol (variable, function, etc.), First press &lt;code&gt;Ctrl+\&lt;/code&gt;, then press:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;appearance&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;symbol&lt;/span&gt;
&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;definition&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;symbol&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;functions&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;called&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;functions&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;calling&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For more details about &lt;code&gt;cscope&lt;/code&gt;, inside Vim, press &lt;code&gt;:h cs&lt;/code&gt; to see the help
message of &lt;code&gt;cscope&lt;/code&gt;.&lt;/p&gt;</summary><category term="cscope"></category></entry><entry><title>LFS 6.9.1: command substitution: line 3: syntax error near unexpected token `)'</title><link href="http://jhshi.me/2012/09/18/lfs-6-9-1-command-substitution-line-3-syntax-error-near-unexpected-token/index.html" rel="alternate"></link><updated>2012-09-18T18:57:23-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2012-09-18:2012/09/18/lfs-6-9-1-command-substitution-line-3-syntax-error-near-unexpected-token/index.html</id><summary type="html">&lt;p&gt;I encountered this error when compiling glibc. The apparent cause is that
bash can not deal with brackets correctly. So even a simple command like echo
&lt;code&gt;$(ls)&lt;/code&gt; will fail with the same error (command substitution).&lt;/p&gt;


&lt;p&gt;The most suspicious cause is that when compile bash in section 5.15.1, I use
&lt;code&gt;byacc&lt;/code&gt; for walk around when the compiler complained the absence of &lt;code&gt;yacc&lt;/code&gt;. &lt;strong&gt;Bash
uses yacc grammer rules and only GNU bison will generate the correct parsing
code for the bash build&lt;/strong&gt;. So I un-installed byacc and installed bison. Then&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make a soft link at &lt;code&gt;/usr/bin/yacc&lt;/code&gt; to bison&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Recompile all the package after 5.10 (tcl) and before 5.15 (include 5.15)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Test if problem solved using echo &lt;code&gt;$(ls)&lt;/code&gt; command&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If yes, then using &lt;code&gt;/tools/bin/bash --login +h&lt;/code&gt; to lunch the new bash&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also see:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.mail-archive.com/lfs-support@linuxfromscratch.org/msg16549.html"&gt;http://www.mail-archive.com/lfs-support@linuxfromscratch.org/msg16549.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://unix.stackexchange.com/questions/28369/linux-from-scratchs-bash-problem-syntax-error"&gt;http://unix.stackexchange.com/questions/28369/linux-from-scratchs-bash-problem-syntax-error&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="lfs"></category><category term="bison"></category><category term="glic"></category><category term="yacc"></category></entry><entry><title>LFS 5.5.1: Change GCC's Stack Protection Option</title><link href="http://jhshi.me/2012/09/08/change-gccs-stack-protection-option-in-lfs/index.html" rel="alternate"></link><updated>2012-09-08T15:39:27-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2012-09-08:2012/09/08/change-gccs-stack-protection-option-in-lfs/index.html</id><summary type="html">&lt;p&gt;In &lt;a href="http://www.linuxfromscratch.org/lfs/view/stable/chapter05/gcc-pass1.html"&gt;Chapter 5.5&lt;/a&gt;, there is one step that fixes the GCC's stack protection
detection problem. The command is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sed -i &lt;span class="s1"&gt;&amp;#39;/k prot/agcc_cv_libc_provides_ssp=yes&amp;#39;&lt;/span&gt; gcc/configure
&lt;/pre&gt;&lt;/div&gt;




&lt;p&gt;This command seems weird to me at first glance. After digging a little more
about &lt;code&gt;sed&lt;/code&gt; command, it's intention is much clear.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;-i&lt;/strong&gt; means change the file (i.e., &lt;code&gt;gcc/configure&lt;/code&gt;) in place&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;/k prot/&lt;/strong&gt; is the pattern. If you look at &lt;code&gt;gcc/configure&lt;/code&gt;, you'll find a
line (around 26695) of comment that says:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Test for stack protector support in target C library&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And you'll see that this is the only occurrence of "stack protector" (as well
as &lt;code&gt;k prot&lt;/code&gt;. I think we'd better use &lt;code&gt;/stack protector/&lt;/code&gt; as the pattern for
easy understanding.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;a&lt;/strong&gt; means append a line after the line that contains the pattern. (&lt;a href="http://www.grymoire.com/Unix/Sed.html#uh-40"&gt;sed document&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;gcc_cv_libc_provides_ssp=yes&lt;/strong&gt; is the actual line being appended.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="lfs"></category><category term="gcc"></category><category term="sed"></category></entry><entry><title>Use rsync and cron to do regular backup (Part II)</title><link href="http://jhshi.me/2012/07/11/use-rsync-and-cron-to-do-regular-backup-part-ii/index.html" rel="alternate"></link><updated>2012-07-11T16:53:52-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2012-07-11:2012/07/11/use-rsync-and-cron-to-do-regular-backup-part-ii/index.html</id><summary type="html">&lt;p&gt;Now that we can &lt;a href="/2012/07/11/use-rsync-and-cron-to-do-regular-backup-part-i"&gt;take advantage of rsync to minimize the data to transfer when
backup&lt;/a&gt;. But it's still a little uncomfortable if we need to do this manually
everyday, right? Well, cron is here to solve the pain.&lt;/p&gt;


&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Cron"&gt;Cron&lt;/a&gt; is kind of a system service that
automatically do some job as you specified. Backup, for example, is a perfect
kind of job that we can count on cron.&lt;/p&gt;
&lt;p&gt;First, we need to specify a job that we want cron to do. In my case, I want
cron to automatically sync my source tree folder on remote data center and my
local backup folder. A simple rsync command seems meet my need. But actually,
there are more to consider:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I don't want to copy the obj files, since they are normally large in size
and change frequently, but can be easily re-generated. But I also don't want to
skip the entire build folder when do rsync since there are some configure files
in there.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The backup process should be totally automated. More specifically, no
password is needed when do rysnc.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Towards the first need, I can use ssh to send remote command to
do necessary clean up work before rysnc. And the second need can
be meted according to my previous post about &lt;a href="/2012/04/27/sshscp-without-password"&gt;ssh/scp without password&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So my final backup script looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/sh &lt;/span&gt;
&lt;span class="c"&gt;# ~/backup.sh&lt;/span&gt;

&lt;span class="nv"&gt;LOG_FILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/backup.log 
&lt;span class="nv"&gt;SOURCE_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;b@B:~/src/ 
&lt;span class="nv"&gt;TARGET_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/src_backup

date &amp;gt;&amp;gt; &lt;span class="nv"&gt;$LOG_FILE&lt;/span&gt; 
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Synchronization start...&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class="nv"&gt;$LOG_FILE&lt;/span&gt; 
ssh b@B &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/src/build&lt;span class="p"&gt;;&lt;/span&gt; make clean&lt;span class="p"&gt;;&lt;/span&gt; rm -rf obj/&lt;span class="s2"&gt;&amp;quot; &amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="nv"&gt;$LOG_FILE&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;
&lt;span class="s2"&gt;rsync -avz --exclude &amp;quot;&lt;/span&gt;tags&lt;span class="s2"&gt;&amp;quot; &lt;/span&gt;&lt;span class="nv"&gt;$SOURCE_DIR&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$TARGET_DIR&lt;/span&gt;&lt;span class="s2"&gt; &amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="nv"&gt;$LOG_FILE&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;
&lt;span class="s2"&gt;echo &amp;quot;&lt;/span&gt;Synchronization &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="nv"&gt;$LOG_FILE&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once we figure out what to do, we need to tell cron about our job. The
configure file of cron is &lt;code&gt;/etc/crontab&lt;/code&gt;. A job description is like follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# Example of job definition: &lt;/span&gt;
&lt;span class="c1"&gt;# .----------------minute (0 - 59) &lt;/span&gt;
&lt;span class="c1"&gt;# | .------------- hour (0 - 23) &lt;/span&gt;
&lt;span class="c1"&gt;# | | .---------- day of month (1 - 31) &lt;/span&gt;
&lt;span class="c1"&gt;# | | | .------- month (1 - 12) OR jan,feb,mar,apr ... &lt;/span&gt;
&lt;span class="c1"&gt;# | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat &lt;/span&gt;
&lt;span class="c1"&gt;# | | | | | &lt;/span&gt;
&lt;span class="c1"&gt;# * * * * * user-name command to be executed 0 0 * * * jack ~/backup.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I want to do backup every day on midnight so I set the minute and hour both to
0. The asterisk (&lt;code&gt;*&lt;/code&gt;) symbol in day/month means any valid values.&lt;/p&gt;
&lt;p&gt;Now we are done. The back up process is completely automated and scheduled.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reference&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://myhowtosandprojects.blogspot.hk/2008/07/sincronize-folders-with-rsync-using-ssh.html"&gt;http://myhowtosandprojects.blogspot.hk/2008/07/sincronize-folders-with-rsync-using-ssh.html&lt;/a&gt;&lt;/p&gt;</summary><category term="cron"></category><category term="rsync"></category><category term="backup"></category></entry><entry><title>Use rsync and cron to do regular backup (Part I)</title><link href="http://jhshi.me/2012/07/11/use-rsync-and-cron-to-do-regular-backup-part-i/index.html" rel="alternate"></link><updated>2012-07-11T16:23:45-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2012-07-11:2012/07/11/use-rsync-and-cron-to-do-regular-backup-part-i/index.html</id><summary type="html">&lt;p&gt;Recently I do most of my work on a remote data center through a slow network
connection (&amp;lt;100KB/sec). I usually backup my project source tree as follows.
I first do make clean and also delete any unnecessary obj files to shrink the
total file size, then I compress the whole source tree as a tar ball and then I
use &lt;code&gt;scp&lt;/code&gt; locally to fetch the backup tar ball to my local machine. The procedure
is quite boring since I need to do this every day before I go home, otherwise
the whole bandwidth will be occupied for near an hour during which I can almost
do nothing.&lt;/p&gt;
&lt;p&gt;Situation gets better when I find &lt;code&gt;rsync&lt;/code&gt; and &lt;code&gt;cron&lt;/code&gt;. Here is how I do automatic
regular (daily) backup with them.&lt;/p&gt;


&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Rsync"&gt;Rsync&lt;/a&gt; is a file synchronization tool
that aims to minimize the data transfer during copy files. This is done via
only send the diffs to destination. It is perfect when you need to do regular
copy between two fixed locations. Rsync has many options (well, as most of
other GNU tools), here is two of them that are used more frequently:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# ensure that symbolic links, devices, attributes, permissions, &lt;/span&gt;
&lt;span class="c"&gt;# ownerships, etc are preserved in the transfer &lt;/span&gt;
-a, --archive

&lt;span class="c"&gt;#compress data during transfer, especially useful when the bandwidth is limited&lt;/span&gt;
-z, --compress

&lt;span class="c"&gt;# exclude the directories or files that you don&amp;#39;t want to sync, such as obj&lt;/span&gt;
&lt;span class="c"&gt;# files, tag files, etc &lt;/span&gt;
--exclude
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Suppose that you have a source tree on host B: &lt;code&gt;~/src&lt;/code&gt;, and you want to sync this
source tree with a local folder named: &lt;code&gt;~/src_backup&lt;/code&gt;, then the follow command
will suffice:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;rsync -avz --exclude &lt;span class="s2"&gt;&amp;quot;obj/&amp;quot;&lt;/span&gt; --exclude &lt;span class="s2"&gt;&amp;quot;tags&amp;quot;&lt;/span&gt; --exclude &lt;span class="s2"&gt;&amp;quot;build&amp;quot;&lt;/span&gt; b@B:~/src/ ~/src_backup 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The two exclude option will tell rsync to skip the obj subdirectory as well
as the tags file. The trailing slash in the source (&lt;code&gt;b@B:~/src/&lt;/code&gt;) will tell
rsync not to create an additional directory level at the destination. Without
this slash, rsync will create a &lt;code&gt;src&lt;/code&gt; directory under &lt;code&gt;~/src_backup&lt;/code&gt;, which is not
desirable.&lt;/p&gt;
&lt;p&gt;Now that after the first time rsync, the following rsync commands will only
transfer the file changes to local, which is a great save of the bandwidth.&lt;/p&gt;</summary><category term="cron"></category><category term="rsync"></category><category term="backup"></category></entry><entry><title>Dropbox: Unable to monitor filesystem</title><link href="http://jhshi.me/2012/07/11/dropbox-unable-to-monitor-filesystem/index.html" rel="alternate"></link><updated>2012-07-11T15:39:14-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2012-07-11:2012/07/11/dropbox-unable-to-monitor-filesystem/index.html</id><summary type="html">&lt;p&gt;Sometime this error occurs that says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"Unable to monitor file system. Please run: echo 100000 | sudo tee
/proc/sys/fs/inotify/max_user_watches and restart Dropbox to correct the
problem.&lt;/p&gt;
&lt;/blockquote&gt;


&lt;p&gt;We need to adjust the system setting on the maximum file number that Dropbox
can watch.&lt;/p&gt;
&lt;p&gt;The following command will solve your pain:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo &lt;/span&gt;fs.inotify.max_user_watches&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;100000&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sudo tee -a /etc/sysctl.conf&lt;span class="p"&gt;;&lt;/span&gt; sudo sysctl -p
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here is &lt;a href="https://www.dropbox.com/help/145/en"&gt;the tip from Dropbox website&lt;/a&gt;.&lt;/p&gt;</summary><category term="dropbox"></category></entry><entry><title>ssh error: Agent admitted failure to sign using the key</title><link href="http://jhshi.me/2012/07/11/ssh-error-agent-admitted-failure-to-sign-using-the-key/index.html" rel="alternate"></link><updated>2012-07-11T14:37:38-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2012-07-11:2012/07/11/ssh-error-agent-admitted-failure-to-sign-using-the-key/index.html</id><summary type="html">&lt;p&gt;If you follow &lt;a href="/2012/04/27/sshscp-without-password/"&gt;my previous post about ssh/scp without password&lt;/a&gt;, but you
got this error when you try to ssh to B on A, then you need to add RSA or DSA
identities to the authentication agent. A ssh-add command on host A will solve
your pain.&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ssh-add
&lt;span class="c"&gt;# Sample output&lt;/span&gt;
Identity added: /home/jack/.ssh/id_rsa &lt;span class="o"&gt;(&lt;/span&gt;/home/jack/.ssh/id_rsa&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Reference&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.cyberciti.biz/faq/unix-appleosx-linux-bsd-agent-admitted-failuretosignusingkey/"&gt;http://www.cyberciti.biz/faq/unix-appleosx-linux-bsd-agent-admitted-failuretosignusingkey/&lt;/a&gt;&lt;/p&gt;</summary><category term="ssh"></category></entry><entry><title>Specify graphics path in Latex</title><link href="http://jhshi.me/2012/06/22/specify-graphicspath-in-latex/index.html" rel="alternate"></link><updated>2012-06-22T13:34:33-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2012-06-22:2012/06/22/specify-graphicspath-in-latex/index.html</id><summary type="html">&lt;p&gt;We can use the &lt;code&gt;graphicx&lt;/code&gt; package together with the &lt;code&gt;graphicspath&lt;/code&gt; command to
specify the looking up path for pictures. A typical structure may look like
this:&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;graphicx&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;% Must use this command BEFORE you begin document!&lt;/span&gt;
&lt;span class="k"&gt;\graphicspath&lt;/span&gt;&lt;span class="nb"&gt;{{&lt;/span&gt;pic&lt;span class="nb"&gt;_&lt;/span&gt;path1/&lt;span class="nb"&gt;}{&lt;/span&gt;pic&lt;span class="nb"&gt;_&lt;/span&gt;path2&lt;span class="nb"&gt;}}&lt;/span&gt;
&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;document&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;% some content&lt;/span&gt;
&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;document&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, the syntax of &lt;code&gt;graphicspath&lt;/code&gt; command is very simple. You just
enclose your picture path, either relative to current work path, or absolute
path, in a pair of curly braces. Note that you must place this command before
you begin document otherwise it will take no effect.&lt;/p&gt;
&lt;p&gt;Please refer to &lt;a href="http://www.tex.ac.uk/cgi-bin/texfaq2html?label=graphicspath"&gt;this page&lt;/a&gt; for more details about &lt;code&gt;graphicspath&lt;/code&gt; command.&lt;/p&gt;</summary><category term="graphicx"></category><category term="graphicspath"></category></entry><entry><title>Use trap to Do Cleanup Work When Script Terminates</title><link href="http://jhshi.me/2012/05/07/use-trap-to-do-cleanup-work-when-script-terninates/index.html" rel="alternate"></link><updated>2012-05-07T19:08:56-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2012-05-07:2012/05/07/use-trap-to-do-cleanup-work-when-script-terninates/index.html</id><summary type="html">&lt;p&gt;Now I have the script that monitoring the output of several UART devices:&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; i in &lt;span class="sb"&gt;`&lt;/span&gt;seq &lt;span class="m"&gt;0&lt;/span&gt; 7&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="c"&gt;# use grep here to enforce line-buffered output, so concurrent&lt;/span&gt;
&lt;span class="c"&gt;# input from UART isn&amp;#39;t messed up&lt;/span&gt;
    cat /dev/crbif0rb0c&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;ttyS0 &lt;span class="p"&gt;|&lt;/span&gt; grep ^ --line-buffered &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;

&lt;span class="nb"&gt;wait&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But there is one problem, when you terminate the script (&lt;code&gt;ctrl+c&lt;/code&gt;), these cat
processes won't be killed, so that the next time you run this script, you'll not
be able to access these UART device since they are busy.&lt;/p&gt;
&lt;p&gt;To solve this problem, we need to do some cleanup work when the script
terminates. In this case, we need to kill these &lt;code&gt;cat&lt;/code&gt; processes. We can use the
&lt;code&gt;trap&lt;/code&gt; command to do this. Basically, &lt;strong&gt;trap enables you to register a kind of
handler for different kind of signals&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In this case, we can add a line into the script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;trap&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pkill -P &lt;/span&gt;&lt;span class="nv"&gt;$$&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; SIGINT

&lt;span class="k"&gt;for&lt;/span&gt; i in &lt;span class="sb"&gt;`&lt;/span&gt;seq &lt;span class="m"&gt;0&lt;/span&gt; 7&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="c"&gt;# use grep here to enforce line-buffered output, so concurrent&lt;/span&gt;
&lt;span class="c"&gt;# input from UART isn&amp;#39;t messed up&lt;/span&gt;
    cat /dev/crbif0rb0c&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;ttyS0 &lt;span class="p"&gt;|&lt;/span&gt; grep ^ --line-buffered &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;

&lt;span class="nb"&gt;wait&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;$$&lt;/code&gt; is the process id of the script. &lt;code&gt;pkill -P $$&lt;/code&gt; will kill all the child
processes of &lt;code&gt;$$&lt;/code&gt;. So that when the script terminates (&lt;code&gt;SIGINT&lt;/code&gt; signal from
&lt;code&gt;ctrl+c&lt;/code&gt;), this &lt;code&gt;pkill&lt;/code&gt; command will be executed and all the cat processes will
be killed.&lt;/p&gt;
&lt;p&gt;Thanks to these post.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.davidpashley.com/articles/writing-robust-shell-scripts.html#id2564782"&gt;http://www.davidpashley.com/articles/writing-robust-shell-scripts.html#id2564782&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="trap"></category><category term="shell script"></category></entry><entry><title>Line Buffered Cat</title><link href="http://jhshi.me/2012/05/04/line-buffered-cat/index.html" rel="alternate"></link><updated>2012-05-04T14:44:15-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2012-05-04:2012/05/04/line-buffered-cat/index.html</id><summary type="html">&lt;p&gt;I'd like to watch the output of a UART device in Linux, and I only want to see
the content when there are a whole line. So I prefer some kind of line-buffered
cat such as:&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cat --line-buffered /dev/crbif0rb0c0ttyS0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But unfortunately, &lt;code&gt;cat&lt;/code&gt; doesn't have a line-buffered option. And fortunately,
GNU &lt;code&gt;grep&lt;/code&gt; has such an option. So we can do&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cat /dev/crbif0rb0c0ttyS0 &lt;span class="p"&gt;|&lt;/span&gt; grep ^ --line-buffered
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since every line has a ^ (line start), so each line matches the &lt;code&gt;grep&lt;/code&gt;. Note
that I ever tried&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cat /dev/crbif0rb0c0ttyS0 &lt;span class="p"&gt;|&lt;/span&gt; grep . --line-buffered
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But this does not work. Only empty lines are printed, and I don't know why...&lt;/p&gt;</summary><category term="cat"></category><category term="grep"></category></entry><entry><title>OS161 SAME_STACK Check Fail in Trap</title><link href="http://jhshi.me/2012/05/02/os161-same_stack-check-fail-in-trap/index.html" rel="alternate"></link><updated>2012-05-02T18:02:11-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2012-05-02:2012/05/02/os161-same_stack-check-fail-in-trap/index.html</id><summary type="html">&lt;p&gt;There are several &lt;code&gt;SAME_STACK&lt;/code&gt; asserts in &lt;code&gt;$OS161_SRC/kern/arch/mips/locore/trap.c&lt;/code&gt; to
ensure that &lt;strong&gt;current thread did not run out of kernel stack&lt;/strong&gt;. &lt;/p&gt;


&lt;p&gt;A typical assert may looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;KASSERT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SAME_STACK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cpustacks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;curcpu&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;c_number&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;vaddr_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;The purpose of &lt;code&gt;SAME_STACK&lt;/code&gt; assertion&lt;/h3&gt;
&lt;p&gt;In OS161, each thread has its own kernel stack. When interrupts or exceptions
occur, the CPU will first switch to current thread's kernel stack, both to avoid
polluting user's normal stack, and protect the stack from malicious user
program.&lt;/p&gt;
&lt;p&gt;The stack is allocated in &lt;code&gt;thread_fork&lt;/code&gt; and in &lt;code&gt;cpu_create&lt;/code&gt; (but not both). The
initial stack size is defined in &lt;code&gt;$OS161_SRC/kern/include/thread.h&lt;/code&gt; as
&lt;code&gt;STACK_SIZE&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Since stack grows downwards, to check if we run out of the stack, we put a few
magic values at the bottom of the stack (&lt;code&gt;thread_checkstack_init&lt;/code&gt;), so that we
can check if the values are the same with what we filled it
(&lt;code&gt;thread_checkstack&lt;/code&gt;) to see if we run out of kernel stack.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;$OS161_SRC/kern/arch/mips/locore/trap.c&lt;/code&gt;, there are a few &lt;code&gt;SAME_STACK&lt;/code&gt;
assertions to make sure the trap frame at the right place.&lt;/p&gt;
&lt;h3&gt;Why would we run out of kernel stack?&lt;/h3&gt;
&lt;p&gt;Remember that any variables you define in your syscall functions are allocated
in current thread's kernel stack. So if you allocated large variables, such as a
big array buffer, you'll probably have a stack "downflow".&lt;/p&gt;
&lt;p&gt;So, either try to shrink your declared buffer size, or use &lt;code&gt;kmalloc&lt;/code&gt; instead.&lt;/p&gt;
&lt;p&gt;Or, you can enlarge the stack size to temporally solve your pain, but this is
not recommended since each thread will have a stack, if it's too large, then
you'll soon run out of physical memory if you have lots of threads.&lt;/p&gt;
&lt;h3&gt;Problem of the macro&lt;/h3&gt;
&lt;p&gt;During the lab, I sometimes fail this assert. At first, I thought I've run
out of kernel stack so I enlarge the &lt;code&gt;STACK_SIZE&lt;/code&gt; 
to 16 KB. But I still fail this assert after that. Then I take a look at the
definition of the &lt;code&gt;SAME_STACK&lt;/code&gt; macro:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#define SAME_STACK(p1, p2) (((p1) &amp;amp; STACK_MASK) == ((p2) &amp;amp; STACK_MASK)) &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I found this macro problematic. Suppose &lt;code&gt;STACK_SIZE = 0X00004000&lt;/code&gt;, then
&lt;code&gt;STACK_MASK = ~(STACK_SIZE-1) = 0XFFFFC000&lt;/code&gt;. Assume &lt;code&gt;p1 (stack top) =
0X80070FFF&lt;/code&gt;, &lt;code&gt;p2 (stack pointer) = 0x8006FFFF&lt;/code&gt;, then we've only used 0x00001000
bytes stack but &lt;code&gt;SAME_STACK&lt;/code&gt; macro will fail, since &lt;code&gt;p1 &amp;amp; STACK_MASK =
0X80070000, p2 &amp;amp; STACK_MASK = 0X8006C000.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The point here is the stack top address may not be STACK_SIZE aligned. So we
can not do the same stack check by simply checking their base addresss.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So we need to modify this part to get our kernel work. This is not your fault
but probably a bug shipped with the kernel.&lt;/p&gt;
&lt;p&gt;You can use any tricky macros here but a simple pair of comparison will be
suffice.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;KASSERT&lt;/span&gt;&lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="kt"&gt;vaddr_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;vaddr_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;curthread&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;t_stack&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; 
&lt;span class="n"&gt;KASSERT&lt;/span&gt;&lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="kt"&gt;vaddr_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;vaddr_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;curthread&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;t_stack&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;STACK_SIZE&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="stack"></category></entry><entry><title>OS161 Duplicated TLB entries</title><link href="http://jhshi.me/2012/05/02/os161-duplicated-tlb-entries/index.html" rel="alternate"></link><updated>2012-05-02T17:18:47-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2012-05-02:2012/05/02/os161-duplicated-tlb-entries/index.html</id><summary type="html">&lt;p&gt;Sys161 will panic if you try to write a TLB entry with a &lt;code&gt;entryhi&lt;/code&gt;, but
there are already a TLB entry with the same &lt;code&gt;entryhi&lt;/code&gt; but in a different TLB
slot. This is because &lt;strong&gt;entryhi should be a UNIQUE key in the TLB bank.&lt;/strong&gt;&lt;/p&gt;


&lt;p&gt;When you want to update a TLB entry (e.g., shoot down a TLB entry, or set the
Dirty bit, etc.), you need to first use &lt;code&gt;tlb_probe&lt;/code&gt; to query the TLB bank to get
the TLB slot index and then use &lt;code&gt;tlb_read&lt;/code&gt; to read the original value, and then
use &lt;code&gt;tlb_write&lt;/code&gt; to write the updated TLB entry value to this slot. &lt;strong&gt;But what
if there is a interrupt after you &lt;code&gt;tlb_probe&lt;/code&gt; but before &lt;code&gt;tlb_read&lt;/code&gt;?&lt;/strong&gt; Chance
maybe that the TLB bank is totally refreshed so that you read a stale value
and also write a stale value. Things get totally messed up and errors such as
"Duplicated TLB entries" may occur.&lt;/p&gt;
&lt;p&gt;To resolve this, &lt;strong&gt;you need to protect your whole "&lt;code&gt;tlb_probe&lt;/code&gt;-&amp;gt;&lt;code&gt;tlb_read&lt;/code&gt;-&amp;gt;
&lt;code&gt;tlb_write&lt;/code&gt;" flow and make sure that this flow won't get interrupted.&lt;/strong&gt; So you 
really want to disable interrupt (&lt;code&gt;int x = splhigh()&lt;/code&gt;) before you do &lt;code&gt;tlb_probe&lt;/code&gt; 
and re-enable it (&lt;code&gt;splx(x)&lt;/code&gt;) after &lt;code&gt;tlb_write&lt;/code&gt;. Alternatively, you can also use a
spin lock to protect your access to TLB.&lt;/p&gt;</summary><category term="tlb"></category><category term="vm"></category></entry><entry><title>OS161 Swapping</title><link href="http://jhshi.me/2012/04/28/os161-swapping/index.html" rel="alternate"></link><updated>2012-04-28T17:27:39-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2012-04-28:2012/04/28/os161-swapping/index.html</id><summary type="html">&lt;p&gt;Now that you can &lt;a href="/2012/04/24/os161-physical-page-management"&gt;allocate/free physical pages&lt;/a&gt;, and you have &lt;a href="/2012/04/27/os161-tlb-miss-and-page-fault"&gt;demand paging
through handling TLB miss&lt;/a&gt;. Let's get the final part work: swapping.&lt;/p&gt;


&lt;h2&gt;UPDATE (2016-04-26)&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;You should only use the disk to store the swapped pages.&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;Three basic operations for a physical page&lt;/h3&gt;
&lt;p&gt;The first is called &lt;strong&gt;evict&lt;/strong&gt;. In a nutshell, &lt;code&gt;evict&lt;/code&gt; a physical page means we
modify the page table entry so that this page is not Present (&lt;code&gt;PTE_P&lt;/code&gt;), but
Swapped (&lt;code&gt;PTE_S&lt;/code&gt;). And we also need to shoot down the relative TLB entry. But in
&lt;code&gt;evict&lt;/code&gt;, we will not write the page's content to disk. Apparently, &lt;strong&gt;evict can
only operate on clean pages&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The second operation is &lt;strong&gt;swapout&lt;/strong&gt;. We first write this page's content to
disk, which makes the page from dirty to clean. And the we just evict it.
&lt;strong&gt;swapout operation is for dirty pages&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The last operations is &lt;strong&gt;swapin&lt;/strong&gt;. Basically, it's for read some virtual page
from swap disk and place it in some physical page, and also need to modify
the relevant page table entry, making this page Present (&lt;code&gt;PTE_P&lt;/code&gt;) instead of
Swapped(&lt;code&gt;PTE_S&lt;/code&gt;).&lt;/p&gt;
&lt;h3&gt;How to store the swapped pages&lt;/h3&gt;
&lt;p&gt;By default, sys161 provide two disks through lamebus, i.e., &lt;code&gt;lhd0&lt;/code&gt; and &lt;code&gt;lhd1&lt;/code&gt;. If
you want to store the pages in the raw disk, you should open the swap space.&lt;/p&gt;
&lt;p&gt;Note that the file name must be &lt;code&gt;lhd0raw:&lt;/code&gt; or &lt;code&gt;lhd1raw&lt;/code&gt; and the open flag must
be &lt;code&gt;O_RDWR&lt;/code&gt;, since the disk is there, and needn't to be created or trunked.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: Actually, I didn't realize that we can actually change the RPM of
the disks to make swapping faster then write to &lt;code&gt;emufs&lt;/code&gt;. So my suggestion would
be: use disk to store swapped pages and set RPM to a large enough value in
&lt;code&gt;sys161.conf&lt;/code&gt; (e.g., 28800).&lt;/p&gt;
&lt;p&gt;For the same reason why we can not open consoles in &lt;code&gt;thread_create&lt;/code&gt;, you can not 
do this in &lt;code&gt;vm_bootstrap&lt;/code&gt; since at that point, VFS system 
was not initialized yet (see &lt;code&gt;$OS161_SRC/kern/startup/main.c&lt;/code&gt; for boot sequence, 
especially line 125~130). But it's OK, we can &lt;strong&gt;open the file until we really 
need to write pages&lt;/strong&gt;, e.g., when we swap out the first page. &lt;/p&gt;
&lt;p&gt;We'll leverage the file operation to manipulate swapped pages. You may want to
review the file operation system calls to get familiar with VFS operations. We
use a lot &lt;code&gt;uio_kinit&lt;/code&gt; and &lt;code&gt;VOP_READ&lt;/code&gt;/&lt;code&gt;VOP_WRITE&lt;/code&gt; here. But before all these, we need
to first create a swap file. &lt;/p&gt;
&lt;p&gt;We also need some data structure to record each page's location in the swap
file. This data structure should be something like a map. The key is (address
space, va) pair, and the value is the location of the page. As usual, for
simplicity, we can just use a statically allocated array. &lt;strong&gt;Each array element
contains the (address space, va) pair, and this element's index is the page's
location&lt;/strong&gt;. Of course, we need to set up a limit of maximum swapped page number
if we adopt this silly manner. When swap out a page, we first look up this
array (by comparing &lt;code&gt;as&lt;/code&gt; and &lt;code&gt;va&lt;/code&gt;) and find out if the swap file has already
contain a copy of this page, if yes then we directly overwrite that page and if
no, we just find a available slot and write the page to that slot.&lt;/p&gt;
&lt;p&gt;A important note is that you want to &lt;strong&gt;create ONE swap file for all process&lt;/strong&gt;,
instead of one swap file for each process. Since by doing the later, you also
have to allocate a mapping structure for each process and you'll run out of
memory very quickly (kernel pages are fixed, right?). Now the swap file and the
mapping data structure is a shared resource among all processes. So you need to
protect them with a lock.&lt;/p&gt;
&lt;h3&gt;Two I/O operations on the swap disk&lt;/h3&gt;
&lt;p&gt;These two operations is quite straightforward. The first is called &lt;code&gt;write_page&lt;/code&gt;,
which is responsible to &lt;strong&gt;write a page content to a specified location of the
swap file&lt;/strong&gt;. The second is &lt;code&gt;read_page&lt;/code&gt;, which is to &lt;strong&gt;read a specified page in
the swap file and copy the content to a physical page&lt;/strong&gt;. We do not necessarily
have to have these to utility functions but it's always good to abstract low level
operations and encapsulate to a convenient interface.&lt;/p&gt;
&lt;h3&gt;The Swapping Work flow&lt;/h3&gt;
&lt;p&gt;In your paging algorithm, you certainly will first look for free physical
pages. But once you fail to find such a page, you have to swap some page out
to get a free page. That's what the magic function &lt;code&gt;MAKE_PAGE_AVAIL&lt;/code&gt; do in 
&lt;a href="/2012/04/24/os161-physical-page-management"&gt;my previous post about physical page allocation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now let's take a look at the magic function. Denote the page that was to
swapped out as victim. If it's state is &lt;code&gt;PAGE_STATE_CLEAN&lt;/code&gt;, it means that this
page already have a copy in disk and was not ever modified since swapped in. So
we can safely discard it's content. We use the &lt;code&gt;evict&lt;/code&gt; operation to deal with it.
And after that, this page is available.&lt;/p&gt;
&lt;p&gt;If this page is dirty, which means either this page do not have a copy in swap
file or this page was modified since it's swapped in, in both case, we need to
write its content to swap file. We can use the &lt;code&gt;swapout&lt;/code&gt; operation here.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;vm_fault&lt;/code&gt; with fault type &lt;code&gt;VM_FAULT_READ&lt;/code&gt; or &lt;code&gt;VM_FAULT_WRITE&lt;/code&gt;, when we find that
this page is not Present (&lt;code&gt;PTE_P&lt;/code&gt;), instead of allocate a new page for it, we
need to further check if this page was swapped (&lt;code&gt;PTE_S&lt;/code&gt;), if yes then we need to
swap it in, if no then we can allocate a new physical page for it.&lt;/p&gt;</summary><category term="swap"></category><category term="vm"></category></entry><entry><title>OS161 TLB Miss and Page Fault</title><link href="http://jhshi.me/2012/04/27/os161-tlb-miss-and-page-fault/index.html" rel="alternate"></link><updated>2012-04-27T23:27:26-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2012-04-27:2012/04/27/os161-tlb-miss-and-page-fault/index.html</id><summary type="html">&lt;p&gt;Now we've set up user address space, it's time to handle TLB/page faults. Note
that there is a difference between TLB and page faults:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TLB fault means the hardware don't know how to translate a virtual address
  since the translation didn't present in any TLB entry. So the hardware raise a
  TLB fault to let the kernel decide how to translate that address.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Page fault means the user program tries to access a page that is not in
  memory, either not yet allocated or swapped out.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;TLB Entry Format&lt;/h3&gt;
&lt;p&gt;In sys161, which simulates MIPS R3000, there are totally 64 TLB entries. Each
entry is a 64-bit value that has the following format:&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/2012-04-27-mipsr3000-tlb.png" class="center"&gt;&lt;/p&gt;
&lt;p&gt;Section 18.6 of &lt;a href="http://pages.cs.wisc.edu/~remzi/OSFEP/vm-tlbs.pdf"&gt;this document&lt;/a&gt; contains a detailed description of the 
meaning of each bits. But briefly, VPN (abbr. for Virtual Page Frame Number) 
is the high 20 bits of a virtual address and PPN is the high 20 bits of a 
physical address space. &lt;strong&gt;When Dirty bit is 1, it means this page is writable, 
otherwise, it's read-only.&lt;/strong&gt; When Valid bit is 1, it means this TLB entry 
contains a valid translation.&lt;/p&gt;
&lt;p&gt;In OS161, we can just ignore the ASID part and Global bit, unless you really
want to do some tricks such as multiplex TLB among processes instead of just
shoot down all TLB entries when context switch. Also, we can ignore the NoCache
bit.&lt;/p&gt;
&lt;h3&gt;TLB Miss Type&lt;/h3&gt;
&lt;p&gt;When translation a virtual address, the hardware will issue a parallel search
in all the TLB entries, using the VPN as a search key. If the hardware failed to
find a entry or find a entry but with Valid bit is 0, a TLB Miss will be
issued. The miss type could be &lt;code&gt;VM_FAULT_READ&lt;/code&gt; or &lt;code&gt;VM_FAULT_WRITE&lt;/code&gt;, depending on
whether it's a read or write operation. On the other hand, if it's a write
operation and hardware find a valid TLB entry of VPN, but the Dirty bit is 0,
then this is also a TLB miss with type &lt;code&gt;VM_FAULT_READONLY&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If none of above cases happen, then this is a TLB hit, everybody is happy :-)&lt;/p&gt;
&lt;h3&gt;TLB Manipulate Utils&lt;/h3&gt;
&lt;p&gt;Before we discuss how to handle a TLB fault. We first take a look at how
to manipulate the TLB entries. The functions that access TLB can be found
at &lt;code&gt;$OS161_SRC/kern/arch/mips/include/tlb.h&lt;/code&gt;. Four routines are provided. And the
comments there are quite clear. We use &lt;code&gt;tlb_probe&lt;/code&gt; to query the TLB bank, and use
&lt;code&gt;tlb_read&lt;/code&gt;/&lt;code&gt;tlb_write&lt;/code&gt; to read/write a specific TLB entry, and use &lt;code&gt;tlb_random&lt;/code&gt; to
let the hardware decide which entry to write to.&lt;/p&gt;
&lt;h3&gt;Finally, handle TLB Miss&lt;/h3&gt;
&lt;p&gt;On a TLB fault, the first thing to do is to check whether the faulting address
is a valid user space address. Since it's possible that the fault is caused by
&lt;code&gt;copyin&lt;/code&gt;/&lt;code&gt;copyout&lt;/code&gt;, which expect an TLB fault. So what's an "valid" user space
address?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User code or date segment&lt;/li&gt;
&lt;li&gt;User heap, between &lt;code&gt;heap_start&lt;/code&gt; and &lt;code&gt;heap_end&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;User stack&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If the address is invalid, then we directly return some non-zero error code, to
let the &lt;code&gt;badfault_func&lt;/code&gt; capture the fault.&lt;/p&gt;
&lt;p&gt;For &lt;code&gt;VM_FAULT_READ&lt;/code&gt; or &lt;code&gt;VM_FAULT_WRITE&lt;/code&gt;, we just walk current address space's page
table, and see if that page actually exists (by checking the &lt;code&gt;PTE_P&lt;/code&gt; bit). If no then we just
allocate a new page and modify the page table entry to insert the mapping
(since we haven't turn on swap yet, so &lt;strong&gt;not exist means this is the first time
we access this page&lt;/strong&gt;). The permissions of the newly allocated page should be
set according to the region information we stored in &lt;code&gt;struct addrspace&lt;/code&gt;.
Finally we just use &lt;code&gt;tlb_random&lt;/code&gt; to insert this mapping to TLB. Of course,
you can adopt some TLB algorithm here that choosing a specific TLB victim. But
&lt;strong&gt;only do this when you have all your VM system working.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For &lt;code&gt;VM_FAULT_READONLY&lt;/code&gt;, &lt;strong&gt;this page is already in memory and the mapping is
already in TLB bank&lt;/strong&gt;, just that the Dirty bit is 0 and user try to write
this page. So &lt;strong&gt;we first check if user can really write this page&lt;/strong&gt;, maybe
by the access bits in the low 12 bits of page table entry. (Recall that in
&lt;code&gt;as_define_region&lt;/code&gt;, user passed in some attributes like readable, writable and
executable. You should record them down there and use them to check here).&lt;/p&gt;
&lt;p&gt;If user want to write a page that he has no rights to write, then this is a
access violation. You can just panic here or more gracefully, kill current
process. But if user can actually write this page, then we first query TLB
bank to get the index of the TLB entry, set the Dirty bit of &lt;code&gt;entrylo&lt;/code&gt; and write
it back use &lt;code&gt;tlb_write&lt;/code&gt;. Don't forget to change the physical page's state to
&lt;code&gt;PAGE_STATE_DIRTY&lt;/code&gt; (It's useless now but will be useful in swapping)&lt;/p&gt;
&lt;p&gt;The above are pretty much what &lt;code&gt;vm_fault&lt;/code&gt; does. Three extra tips:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Since TLB is also a shared resource, so you'd better &lt;strong&gt;use a lock to
protect the access to it&lt;/strong&gt;. And it's better be a &lt;code&gt;spinlock&lt;/code&gt; since sometimes we
perform TLB operations in interrupt handler, where we don't want to sleep.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Do not print anything inside &lt;code&gt;vm_fault&lt;/code&gt;.&lt;/strong&gt; &lt;code&gt;kprintf&lt;/code&gt; may touch some of the
TLB entry so that the TLB has been changed between the miss and &lt;code&gt;vm_fault&lt;/code&gt;, which
can lead to some really weird bugs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Assumption is the source of all evil. Use a lot KASSET to make your
assumption explicit and check if they are right.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="tlb"></category><category term="page fault"></category><category term="vm"></category></entry><entry><title>OS161 sbrk System Call</title><link href="http://jhshi.me/2012/04/27/os161-sbrk-system-call/index.html" rel="alternate"></link><updated>2012-04-27T22:17:36-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2012-04-27:2012/04/27/os161-sbrk-system-call/index.html</id><summary type="html">&lt;p&gt;If you're not familiar with &lt;code&gt;sbrk&lt;/code&gt; system call, here is &lt;a href="http://en.wikipedia.org/wiki/Sbrk"&gt;it's wiki&lt;/a&gt;, 
and its &lt;a href="http://www.cs.utah.edu/flux/moss/node39.html"&gt;interface description&lt;/a&gt;. In a nutshell,
&lt;code&gt;malloc&lt;/code&gt; will use &lt;code&gt;sbrk&lt;/code&gt; to get heap space.&lt;/p&gt;


&lt;p&gt;In &lt;code&gt;as_define_region&lt;/code&gt;, we've find the highest address that user text and data
segment occupy, and based on this, we've set the &lt;code&gt;heap_start&lt;/code&gt; in &lt;code&gt;struct
addrspace&lt;/code&gt;. This makes the &lt;code&gt;sbrk&lt;/code&gt; system call implementation quite easy: almost
just parameter checking work. Several points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;inc&lt;/code&gt; could be negative, so make sure &lt;code&gt;heap_end+inc&lt;/code&gt; &amp;gt;= &lt;code&gt;heap_start&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Better to round up inc by 4. This is optional but can lower the chance
of unaligned pointers&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After all these checking, just return &lt;code&gt;heap_end&lt;/code&gt; as a &lt;code&gt;void*&lt;/code&gt; pointer and increase
&lt;code&gt;heap_end&lt;/code&gt; by &lt;code&gt;inc&lt;/code&gt;. Of course, like any other system calls, you need to add a 
case entry in the &lt;code&gt;syscall&lt;/code&gt; function.&lt;/p&gt;</summary><category term="heap"></category><category term="sbrk"></category><category term="syscall"></category><category term="vm"></category></entry><entry><title>ssh/scp without password</title><link href="http://jhshi.me/2012/04/27/sshscp-without-password/index.html" rel="alternate"></link><updated>2012-04-27T16:45:41-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2012-04-27:2012/04/27/sshscp-without-password/index.html</id><summary type="html">&lt;p&gt;Suppose you have two machines: A and B. A is your work machine, you do most of
your work on it. But B is a little special (e.g., connected to some specific
hardware) that you need to ssh on it or copy some file from A to B from time to
time. Here is the way that you can get rid of entering passwords every time you
do ssh/scp.&lt;/p&gt;


&lt;p&gt;First, on machine A, generate a DSA key pair:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ssh-keygen -t rsa 
Generating public/private rsa key pair. 
Enter file in which to save the key &lt;span class="o"&gt;(&lt;/span&gt;YOUR_HOME/.ssh/id_rsa&lt;span class="o"&gt;)&lt;/span&gt;:
&lt;span class="c"&gt;# press ENTER here to accept the default filename &lt;/span&gt;
Enter passphrase &lt;span class="o"&gt;(&lt;/span&gt;empty &lt;span class="k"&gt;for&lt;/span&gt; no passphrase&lt;span class="o"&gt;)&lt;/span&gt;: 
&lt;span class="c"&gt;# press ENTER here to use no passphrase, otherwise, you still need&lt;/span&gt;
&lt;span class="c"&gt;# to enter this passphrase when ssh &lt;/span&gt;
Enter same passphrase again: 
&lt;span class="c"&gt;# press ENTER here &lt;/span&gt;
Your identification has been saved in &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.ssh/id_rsa. 
Your public key has been saved in &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.ssh/id_rsa.pub. 
The key fingerprint is: ..... &lt;span class="o"&gt;(&lt;/span&gt;omited&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, change the access mode of .ssh directory&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;chmod &lt;span class="m"&gt;775&lt;/span&gt; ~/.ssh 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then append the content of your just generated &lt;code&gt;id_rsa.pub&lt;/code&gt; to the
&lt;code&gt;$HOME/.ssh/authorized_keys&lt;/code&gt; file on machine B:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# copy the id_rsa.pub file to host B &lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;scp ~/.ssh/id_rsa.pub b@B:. 
&lt;span class="c"&gt;# login to B &lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;ssh b@B 
&lt;span class="c"&gt;# append the content to authorized_keys &lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;cat id_rsa.pub &amp;gt;&amp;gt; .ssh/authorized_keys 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, ssh on to B and change the access mode of the file &lt;code&gt;authorized_keys&lt;/code&gt;.
This is optional, maybe you don't need to do this if you can already ssh
without entering password.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ssh b@B 
&lt;span class="nv"&gt;$ &lt;/span&gt;chmod &lt;span class="m"&gt;700&lt;/span&gt; .ssh 
&lt;span class="nv"&gt;$ &lt;/span&gt;chmod &lt;span class="m"&gt;640&lt;/span&gt; ~/.ssh/authorized_keys
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Depend on your version of ssh, you may also need to do the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ssh b@B &lt;span class="nv"&gt;$ &lt;/span&gt;cp ~/.ssh/authorized_keys ~/.ssh/authorized_keys2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That it! Enjoy!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reference&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.cyberciti.biz/faq/ssh-password-less-login-with-dsa-publickey-authentication/"&gt;http://www.cyberciti.biz/faq/ssh-password-less-login-with-dsa-publickey-authentication/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.linuxproblem.org/art_9.html"&gt;http://www.linuxproblem.org/art_9.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="ssh"></category><category term="scp"></category></entry><entry><title>OS161 User Address Space</title><link href="http://jhshi.me/2012/04/24/os161-user-address-space/index.html" rel="alternate"></link><updated>2012-04-24T23:14:14-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2012-04-24:2012/04/24/os161-user-address-space/index.html</id><summary type="html">&lt;p&gt;Now we've set up our coremap and also have the routines to allocate and free
physical pages. It's the time to set up user's virtual address space.&lt;/p&gt;
&lt;p&gt;Basically, we'll adopt &lt;em&gt;two-level page table&lt;/em&gt;. If you're not
already familiar with this, you can check out the &lt;a href="http://en.wikipedia.org/wiki/Page_table"&gt;page table wiki&lt;/a&gt; 
and &lt;a href="http://pages.cs.wisc.edu/~remzi/OSFEP/vm-tlbs.pdf"&gt;this document talking about MIPS and X86 paging&lt;/a&gt;.&lt;/p&gt;


&lt;p&gt;The page table entry format will be much alike those in X86. For a page
directory entry, the upper 20 bits indicates the base physical address of the
page table, and &lt;em&gt;we use one bit in the lower 12 bits to indicate whether this
page table exist or not&lt;/em&gt;. For a page table entry, the upper 20 bits stores
the base physical address of the actual page, while the lower 12 bits contain
some attribute of this page, e.g., readable, writable, executable, etc. You are
free to define all these (format of page directory and page table entry)
though, since the addressing process are totally done by software in MIPS, but
following the conventions is still better for compatibility as well as easy
programming.&lt;/p&gt;
&lt;h3&gt;What to store in the &lt;code&gt;addrspace&lt;/code&gt; structure?&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;An address space is actually just a page directory&lt;/em&gt;: we can use this
directory and page table to translate all the addresses inside the address
space. And we also need to keep some other information like user heap start,
user heap end, etc. But that's all, and no more.&lt;/p&gt;
&lt;p&gt;So in &lt;code&gt;as_create&lt;/code&gt;, we just allocate a &lt;code&gt;addrspace&lt;/code&gt; structure using &lt;code&gt;kmalloc&lt;/code&gt;,
and allocate a physical page (using &lt;code&gt;page_alloc&lt;/code&gt;) as page directory and store
it's address (either &lt;code&gt;KVADDR&lt;/code&gt; or &lt;code&gt;PADDR&lt;/code&gt; is OK, but you can just choose one).&lt;/p&gt;
&lt;p&gt;Besides, we need to record somewhere in the &lt;code&gt;addrspace&lt;/code&gt; structure the valid
regions user defined using &lt;code&gt;as_define_region&lt;/code&gt;, since we're going to need that
information during page fault handing to check whether the faulted address is
valid or not.&lt;/p&gt;
&lt;h3&gt;Address Translating with &lt;code&gt;pgdir_walk&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;This is another most important and core function in this lab.&lt;/em&gt; Basically,
given an address space and virtual address, we want to find the corresponding
physical address. This is what &lt;code&gt;pgdir_walk&lt;/code&gt; does. We first extract the page
directory index (top 10 bits) from the &lt;code&gt;va&lt;/code&gt; and use it to index the page
directory, thus we get the base physical address of the page table. Then we
extract the page table index (middle 10 bits) from &lt;code&gt;va&lt;/code&gt; and use it to index the
page directory, thus we get the base physical address of the actual page.&lt;/p&gt;
&lt;p&gt;Several points to note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Instead of return the physical address, &lt;em&gt;you may want to return the page
table entry pointer&lt;/em&gt; instead. Since in most cases, we use &lt;code&gt;pgdir_walk&lt;/code&gt; to get
page table entries and modify it&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We'll also need to pass &lt;code&gt;pgdir_walk&lt;/code&gt; a flag, indicating that whether we want
to create a page table if non-exist (remember the &lt;em&gt;present bit&lt;/em&gt; of page
directory entry?). Since sometimes, we want to make sure that a &lt;code&gt;va&lt;/code&gt; is mapped to
a physical page when calling &lt;code&gt;pgdir_walk&lt;/code&gt;. But most of the time, we just want to
query if a &lt;code&gt;va&lt;/code&gt; is mapped.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Think clearly about which is physical address, and which is virtual
address. Page directory entry and page table entry should store the physical
address base. You'll need a lot &lt;code&gt;PADDR_TO_KVADDR&lt;/code&gt; here.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Copy address space using &lt;code&gt;as_copy&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;This part is easy if you decide not support Copy-On-Write pages. Basically, you
just &lt;code&gt;pgdir_walk&lt;/code&gt; old address space's page table, and copy all the present pages.
Only one point, don't forget to &lt;em&gt;copy all the attribute bits (low 12 bits) of
the old page table entry&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;You'll get some extra work when you enable swapping: you need to copy all the
swapped pages beside present pages as well.&lt;/p&gt;
&lt;h4&gt;Destroy address space with &lt;code&gt;as_destroy&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Same easy as &lt;code&gt;as_copy&lt;/code&gt;, just &lt;code&gt;pgdir_walk&lt;/code&gt; the page table and free all the present
pages. Also same with &lt;code&gt;as_copy&lt;/code&gt;, you need to free the swapped pages latter&lt;/p&gt;
&lt;h3&gt;Define regions using &lt;code&gt;as_define_region&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Since we'll do &lt;em&gt;on-demand paging&lt;/em&gt;, so we won't allocate any pages in
&lt;code&gt;as_define_region&lt;/code&gt; Instead, we just walk through the
page table, and set the attribute bits accordingly. One point, remember the
&lt;code&gt;heap_start&lt;/code&gt; and &lt;code&gt;heap_end&lt;/code&gt; field in &lt;code&gt;struct addrspace&lt;/code&gt;? Question: &lt;em&gt;where should
user heap start? Immediately after user bss segment!&lt;/em&gt; And how would we know the
end of user bss segment? In &lt;code&gt;as_define_region&lt;/code&gt;! So each time in &lt;code&gt;as_define_region&lt;/code&gt;,
we just compare addrspace's current hew&lt;code&gt;and the region end, and set
the&lt;/code&gt;heap_start&lt;code&gt;right after (&lt;/code&gt;vaddr+sz&lt;code&gt;). Don't forget to _proper align the&lt;/code&gt;heap_start`(by page bound)_, of course.&lt;/p&gt;
&lt;p&gt;This should also be the place we record each region information (e.g., base,
size, permission, etc) so that we can check them in &lt;code&gt;vm_fault&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/2012-04-24-mips-as1.png" class="center"&gt;&lt;/p&gt;
&lt;h3&gt;Miscellaneous&lt;/h3&gt;
&lt;p&gt;In &lt;code&gt;as_activate&lt;/code&gt;, if you don't use the ASID field of TLB entry, then you can just
shoot down all the tlb entries. It's the easiest to way to go.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;as_prepare_load&lt;/code&gt;, we need to change each regions' page table permision as read-write
since we're going to load content (code, date) into them. And in
&lt;code&gt;as_complete_load&lt;/code&gt;, we need to change their page table permissions back to
whatever the original value.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;as_define_stack&lt;/code&gt;, we just return &lt;code&gt;USERSTACKTOP&lt;/code&gt;.&lt;/p&gt;</summary><category term="addrspace"></category><category term="vm"></category><category term="page table"></category></entry><entry><title>OS161 Physical Page Management</title><link href="http://jhshi.me/2012/04/24/os161-physical-page-management/index.html" rel="alternate"></link><updated>2012-04-24T22:11:05-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2012-04-24:2012/04/24/os161-physical-page-management/index.html</id><summary type="html">&lt;p&gt;We'll talk about &lt;code&gt;page_alloc&lt;/code&gt;, &lt;code&gt;page_free&lt;/code&gt;, &lt;code&gt;alloc_kpages&lt;/code&gt; and &lt;code&gt;free_kpages&lt;/code&gt;.&lt;/p&gt;


&lt;h3&gt;Allocate one single physical page with &lt;code&gt;page_alloc&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;This is relatively easy once you've decided which paging algorithm to use. FIFO
seems good enough in in terms of simplicity as well as acceptable performance.
We just scan the coremap, find out if there is any FREE page, or find out the
oldest page. At this stage (before swapping), I will use a magic function
called &lt;code&gt;MAKE_PAGE_AVAIL&lt;/code&gt;, which obviously makes a page available, by flushing or
swapping, we don't care :-). Once we find a victim (maybe free, clean, or
dirty, but &lt;strong&gt;must not be fixed&lt;/strong&gt;), we call &lt;code&gt;MAKE_PAGE_AVAIL&lt;/code&gt; on it, and update
it's internal fields like time stamp, &lt;code&gt;as&lt;/code&gt;, &lt;code&gt;va&lt;/code&gt;, etc. And don't forget to zero the
page before we return.&lt;/p&gt;
&lt;p&gt;A trade-off here is what parameters should we pass to &lt;code&gt;page_alloc&lt;/code&gt;? One
choice is nothing: I just tell you to give me a page, and I'll deal with
the page meta-info by myself. But this manner will probably cause page-info
inconsistency, e.g., caller forget to set page's state. So to avoid this case,
I prefer caller tell &lt;code&gt;page_alloc&lt;/code&gt; all he needs, like &lt;code&gt;as&lt;/code&gt;, &lt;code&gt;va&lt;/code&gt;, whether the
allocate page need to keep in memory, etc. And let &lt;code&gt;page_alloc&lt;/code&gt; set the page's
meta info accordingly.&lt;/p&gt;
&lt;p&gt;BTW, since coremap is a globally share data structure, so &lt;strong&gt;you really want to
use lock to protect it every time you read/write it.&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;Allocate n continuous pages with &lt;code&gt;page_nalloc&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Since kernel address will bypass TLB and are directly-mapped. (See
&lt;a href="http://www.eecs.harvard.edu/~mdw/course/cs161/handouts/mips.html#segments"&gt;this&lt;/a&gt; and &lt;a href="http://cgi.cse.unsw.edu.au/~cs3231/10s1/os161/man/sys161/mips.html"&gt;this&lt;/a&gt; for details), when we're asked to allocate 
n (where n &amp;gt; 1) pages by &lt;code&gt;alloc_kpages&lt;/code&gt;, we must &lt;strong&gt;allocate n continuous pages&lt;/strong&gt;! 
To do this, we need to first find a chunk of n available (i.e., not fixed) continuous 
pages, and then call &lt;code&gt;MAKE_PAGE_AVAILABLE&lt;/code&gt; on these pages. Like &lt;code&gt;page_alloc&lt;/code&gt;, we 
also need to update the coremap and zero the allocated memory.&lt;/p&gt;
&lt;p&gt;As mentioned in &lt;a href="/2012/04/24/os161-coremap"&gt;my previous blog about coremap&lt;/a&gt;, in &lt;code&gt;alloc_kpages&lt;/code&gt;, 
&lt;strong&gt;we need to first check whether vm has bootstrapped&lt;/strong&gt;: if not, we just use 
&lt;code&gt;get_ppages&lt;/code&gt;, otherwise, we use our powerful &lt;code&gt;page_nalloc&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Also, we need to record how many pages we allocated so that when calling &lt;code&gt;free_kpages&lt;/code&gt;, 
we can free all these &lt;code&gt;npages&lt;/code&gt;page.&lt;/p&gt;
&lt;h3&gt;Free a page with &lt;code&gt;page_free&lt;/code&gt; and &lt;code&gt;free_kpages&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;We just need to mark this page as FREE. But if this page was mapped to user
address space (&lt;code&gt;page-&amp;gt;as != NULL&lt;/code&gt;), then we need first unmap it, and shoot down
the TLB entry if needed. We'll talk about user address space management lately.&lt;/p&gt;
&lt;p&gt;Only one tip for this part, &lt;strong&gt;do not forget to protect every access to coremap
using lock (but not spinlock).&lt;/strong&gt;&lt;/p&gt;</summary><category term="vm"></category><category term="coremap"></category></entry><entry><title>OS161 Coremap</title><link href="http://jhshi.me/2012/04/24/os161-coremap/index.html" rel="alternate"></link><updated>2012-04-24T21:35:28-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2012-04-24:2012/04/24/os161-coremap/index.html</id><summary type="html">&lt;p&gt;The first concern of OS161 virtual memory system is how to manage physical
pages. Generally, we can pack a physical page's information into a structure
(called &lt;code&gt;struct coremap_entry&lt;/code&gt;) and &lt;strong&gt;use this struct to represent a physical page&lt;/strong&gt;. 
&lt;strong&gt;We use an array of &lt;code&gt;struct coremap_entry&lt;/code&gt; to keep all physical pages information.&lt;/strong&gt; 
This array, aka, &lt;strong&gt;coremap&lt;/strong&gt;, will be one of the most important data structure in this lab.&lt;/p&gt;


&lt;h3&gt;What should we store in coremap entry structure?&lt;/h3&gt;
&lt;p&gt;For each physical page, we want to know:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Where is this page mapped? (For swapping)&lt;/li&gt;
&lt;li&gt;What's this pages status? (free, fixed, clean, dirty...)&lt;/li&gt;
&lt;li&gt;Other info (e.g. need by paging algorithm)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A page can have for different states, as shown below.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/2012-04-24-page-state.png" class="center"&gt;&lt;/p&gt;
&lt;p&gt;This diagram is quite clear. Several points to note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When a physical page is first allocated, its state is DIRTY, not CLEAN. Since this
 page do not have a copy in swap file (disk). Remember that in a virtual memory
 system, memory is just a cache of disk.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For some reason, we may want to always keep a certain page in memory, e.g.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kernel pages, since these pages are direct mapped.&lt;/li&gt;
&lt;li&gt;user stack and code segment pages which we already knew will be frequently accessed. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So we have a special state called "fixed", means that &lt;strong&gt;we'll never swap out these 
  pages to disk&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Coremap Initialization&lt;/h3&gt;
&lt;p&gt;We need to initiate our coremap in &lt;code&gt;vm_bootstrap&lt;/code&gt;. First, we need to find out
how many physical pages in system. We can do this using &lt;code&gt;ram_getsize&lt;/code&gt;. There
is a big trick here. Since we will only know the physical page number, i.e.
coremap array length at runtime, so we'd better just define a &lt;code&gt;struct coremap_entry&lt;/code&gt;
pointer and allocate the actually array at runtime after we got the physical
page number, rather than use a statically defined array with some MACRO like
&lt;code&gt;MAX_PHY_PAGE_NUM&lt;/code&gt;. So at first glance, we may write:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But the above code will definitly fail&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;Take a look at &lt;code&gt;ram_getsize&lt;/code&gt;,
we can see that this function will destroy its &lt;code&gt;firstaddr&lt;/code&gt; and &lt;code&gt;lastaddr&lt;/code&gt;
before return. So after that, if we call &lt;code&gt;kmalloc&lt;/code&gt;, which call &lt;code&gt;alloc_kpage&lt;/code&gt;,
&lt;code&gt;get_ppages&lt;/code&gt; and &lt;code&gt;ram_stealmem&lt;/code&gt; to get memory, &lt;code&gt;ram_stealmem&lt;/code&gt; will fail. The
contradiction is: &lt;strong&gt;we need to call &lt;code&gt;ram_getsize&lt;/code&gt; to get physical page number
so that we can allocate our coremap(&lt;code&gt;pages&lt;/code&gt;), but once we call &lt;code&gt;ram_getsize&lt;/code&gt; we
will not be able allocate any pages!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To resolve this contradiction, on one hand, we should &lt;strong&gt;initialize all other
data structures, e.g., locks, before we call &lt;code&gt;ram_getsize&lt;/code&gt;&lt;/strong&gt;. Then we call
&lt;code&gt;ram_getsize&lt;/code&gt; to get &lt;code&gt;firstaddr&lt;/code&gt; and &lt;code&gt;lastaddr&lt;/code&gt;. After that, instead of using
&lt;code&gt;kmalloc&lt;/code&gt;, we must &lt;strong&gt;allocate our coremap manually&lt;/strong&gt;, without invoking any
other malloc routines. A possible solution may be:&lt;/p&gt;
&lt;p&gt;Now we allocated our core map just between &lt;code&gt;firstaddr&lt;/code&gt; and &lt;code&gt;freeaddr&lt;/code&gt;, and
[&lt;code&gt;freeaddr&lt;/code&gt;, &lt;code&gt;lastaddr&lt;/code&gt;] will be system's free memory.&lt;/p&gt;
&lt;p&gt;Then we initialize the coremap array, we need to mark any pages between [0,
&lt;code&gt;freeaddr&lt;/code&gt;) as fixed, since this memory contains important kernel code and
data, or memory mapped I/Os. And we just mark pages between [&lt;code&gt;freeaddr&lt;/code&gt;,
&lt;code&gt;astaddr&lt;/code&gt;] as free.&lt;/p&gt;
&lt;p&gt;At the end of &lt;code&gt;vm_bootstrap&lt;/code&gt;, we may want to &lt;strong&gt;set some flags to indicate that
vm has already bootstrapped,&lt;/strong&gt; since functions like &lt;code&gt;alloc_kpages&lt;/code&gt; may call
different routines to get physical page before and after &lt;code&gt;vm_bootstrap&lt;/code&gt;.&lt;/p&gt;</summary><category term="vm"></category><category term="coremap"></category></entry><entry><title>OS161 Virtual Memory Resources</title><link href="http://jhshi.me/2012/04/19/os161-virtual-memory-resources/index.html" rel="alternate"></link><updated>2012-04-19T18:29:56-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2012-04-19:2012/04/19/os161-virtual-memory-resources/index.html</id><summary type="html">&lt;p&gt;Here are various documents that I found helpful for implementing OS161 virtual
memory system. &lt;/p&gt;


&lt;p&gt;These are two other blogs that also talking about VM of OS161:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://asmarkhalid.blogspot.com/"&gt;http://asmarkhalid.blogspot.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://flounderingz.blogspot.com/"&gt;http://flounderingz.blogspot.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A very good document introducing MIPS TLB:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pages.cs.wisc.edu/~remzi/OSFEP/vm-tlbs.pdf"&gt;http://pages.cs.wisc.edu/~remzi/OSFEP/vm-tlbs.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lecture notes about MIPS TLB and paging.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://frankdrews.com/public_filetree/cs458_558_SQ10/Slides/mm.pdf"&gt;http://frankdrews.com/public_filetree/cs458_558_SQ10/Slides/mm.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://people.csail.mit.edu/rinard/osnotes/h11.html"&gt;http://people.csail.mit.edu/rinard/osnotes/h11.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://people.csail.mit.edu/rinard/osnotes/h10.html"&gt;http://people.csail.mit.edu/rinard/osnotes/h10.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A lecture note about MIPS stack and heap, helpful when implementing &lt;code&gt;sbrk&lt;/code&gt; system call.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.howardhuang.us/teaching/cs232/04-Functions-in-MIPS.pdf"&gt;http://www.howardhuang.us/teaching/cs232/04-Functions-in-MIPS.pdf&lt;/a&gt;&lt;/p&gt;</summary><category term="vm"></category><category term="resources"></category></entry><entry><title>OS161: Arguments Passing in System Call</title><link href="http://jhshi.me/2012/03/28/os161-arguments-passing-in-system-call/index.html" rel="alternate"></link><updated>2012-03-28T21:59:26-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2012-03-28:2012/03/28/os161-arguments-passing-in-system-call/index.html</id><summary type="html">&lt;p&gt;One principle of kernel programming is that: &lt;strong&gt;do not trust anything users
passed in&lt;/strong&gt;. Since we assume that users are bad, they will do anything they can
to crash the kernel (just as &lt;code&gt;$OS161_SRC/user/testbin/badcall/badcall.c&lt;/code&gt; do). So 
we need pay special attention to the arguments of the system calls, &lt;strong&gt;especially the
pointers&lt;/strong&gt;.&lt;/p&gt;


&lt;p&gt;&lt;code&gt;$OS161_SRC/kern/vm/copyinout.c&lt;/code&gt; provides several useful facilities to safely copy user
level arguments into kernel or vice versa. They assure that &lt;strong&gt;even if user arguments is
illegal, the kernel can still get control and handle the error, instead of just
crash&lt;/strong&gt;. So let's see how can they be applied in the system calls.&lt;/p&gt;
&lt;h3&gt;User space strings&lt;/h3&gt;
&lt;p&gt;Some system call, e.g. &lt;code&gt;open&lt;/code&gt;, &lt;code&gt;chdir&lt;/code&gt;, &lt;code&gt;execv&lt;/code&gt;, requires a user level string as
arguments. We can use &lt;code&gt;copyinstr&lt;/code&gt; to do this. See the prototype of &lt;code&gt;copyinstr&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;copyinstr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;const_userptr_t&lt;/span&gt; &lt;span class="n"&gt;usersrc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;const_userptr_t&lt;/code&gt; is just a signpost that make &lt;code&gt;usersrc&lt;/code&gt; explicitly looks like a user
pointer. So basically, this function copies a &lt;code&gt;\0&lt;/code&gt; terminated user
space string into kernel buffer &lt;code&gt;dest&lt;/code&gt;, and copy as much as &lt;code&gt;len&lt;/code&gt; bytes, and
return the actual bytes copied in &lt;code&gt;actual&lt;/code&gt;. Note that &lt;code&gt;copyinstr&lt;/code&gt; will also
copy the last &lt;code&gt;\ 0&lt;/code&gt;. Suppose we have a function that takes a user space string
as argument.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;kbuf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;BUF_SIZE&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; 
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;actual&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;copyinstr&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;const_userptr_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kbuf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BUF_SIZE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt; 
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then if we call &lt;code&gt;foo("hello")&lt;/code&gt;, on success, &lt;code&gt;actual&lt;/code&gt; will be 6, &lt;strong&gt;including the
last &lt;code&gt;\0&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;User space buffer&lt;/h3&gt;
&lt;p&gt;In system calls like &lt;code&gt;read&lt;/code&gt; or &lt;code&gt;write&lt;/code&gt;, we need to read from or write to user space
buffers. We can use &lt;code&gt;copyin&lt;/code&gt; or &lt;code&gt;copyout&lt;/code&gt; here. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;foo_read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;ubuf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;kbuf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kmalloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;copyin&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;const_userptr_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;ubuf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kbuf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="n"&gt;kfree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kbuf&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;copyout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kbuf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;userptr_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;ubuf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="n"&gt;kfree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kbuf&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="syscall"></category><category term="argument passing"></category><category term="copyin"></category><category term="copyout"></category></entry><entry><title>OS161: General Tips for System Call</title><link href="http://jhshi.me/2012/03/21/os161-general-tips-for-system-call/index.html" rel="alternate"></link><updated>2012-03-21T14:45:32-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2012-03-21:2012/03/21/os161-general-tips-for-system-call/index.html</id><summary type="html">&lt;p&gt;Here are some practice that will hopefully make you feel more comfortable and
more productive when you poking around with os161 syscalls.&lt;/p&gt;


&lt;h3&gt;Tired of bmake &amp;amp; bmake install every time?&lt;/h3&gt;
&lt;p&gt;Edit &lt;code&gt;$OS161_SRC/mk/os161.kernel.mk&lt;/code&gt;, find this line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;includelinks&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WAIT&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KERNEL&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add some lines below it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;includelinks&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WAIT&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KERNEL&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; 
    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;generate&lt;/span&gt; &lt;span class="n"&gt;tags&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ctags&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;excluding&lt;/span&gt; &lt;span class="n"&gt;some&lt;/span&gt; &lt;span class="n"&gt;directories&lt;/span&gt;
    &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TOP&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="n"&gt;ctags&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;exclude&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.git&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;exclude&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;build&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;exclude&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;kern/compile&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;.;&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; 
    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;automatically&lt;/span&gt; &lt;span class="n"&gt;execute&lt;/span&gt; &lt;span class="n"&gt;bmake&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;after&lt;/span&gt; &lt;span class="n"&gt;bmake&lt;/span&gt;
    &lt;span class="n"&gt;bmake&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then a single &lt;code&gt;bmake&lt;/code&gt; will automatically generate tags for your source file as
well as install the executable.&lt;/p&gt;
&lt;h3&gt;Work on file system calls first&lt;/h3&gt;
&lt;p&gt;Work on file system calls and make them work correctly first, since user level
I/O functions (most importantly &lt;code&gt;printf&lt;/code&gt;) rely heavily on &lt;code&gt;sys_write&lt;/code&gt; and
&lt;code&gt;sys_read&lt;/code&gt; of console. If you first work on the process system calls, how would
you assure your code is right? Without a working and correct &lt;code&gt;printf&lt;/code&gt;, most of
the test programs won't work.&lt;/p&gt;
&lt;h3&gt;Test your code&lt;/h3&gt;
&lt;p&gt;Test programs in &lt;code&gt;$OS161_SRC/user/testbin&lt;/code&gt; are very helpful when you want
to test your code, especially &lt;code&gt;badcall(asst2)&lt;/code&gt;, &lt;code&gt;filetest&lt;/code&gt;, &lt;code&gt;crash&lt;/code&gt; (for
&lt;code&gt;kill_curthread&lt;/code&gt;), &lt;code&gt;argtest&lt;/code&gt; (for &lt;code&gt;execv&lt;/code&gt;) and &lt;code&gt;forktest&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can use the &lt;code&gt;p&lt;/code&gt; command provided by os161 kernel menu to execute this test
programs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;OS/161 kernel [? for menu]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; /&lt;span class="n"&gt;testbin&lt;/span&gt;/&lt;span class="n"&gt;argtest&lt;/span&gt; &lt;span class="n"&gt;abc&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;ghi&lt;/span&gt; &lt;span class="n"&gt;jkl&lt;/span&gt; &lt;span class="n"&gt;mno&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Use GDB&lt;/h3&gt;
&lt;p&gt;Without GDB, you're dead. It's really worth spending some time to learn the
basic usage of gdb. An upset fact is that you can not watch user level code (or
you don't want to bother), so use the "&lt;code&gt;printf&lt;/code&gt; debug method" in user code.&lt;/p&gt;
&lt;p&gt;Here are a few excellent gdb tutorials that you'll probably find helpful.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.cs.cmu.edu/~gilpin/tutorial/"&gt;GDB Tutorial from CMU&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.eecs.harvard.edu/~mdw/course/cs161/handouts/gdb.html"&gt;Tips from Harvard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="bmake"></category><category term="ctags"></category><category term="gdb"></category><category term="syscall"></category></entry><entry><title>OS161: How to Add a System Call</title><link href="http://jhshi.me/2012/03/21/os161-how-to-add-a-system-call/index.html" rel="alternate"></link><updated>2012-03-21T14:15:41-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2012-03-21:2012/03/21/os161-how-to-add-a-system-call/index.html</id><summary type="html">&lt;p&gt;Let's use the &lt;code&gt;fork&lt;/code&gt; system call as an example. For convinience, let's assume
&lt;code&gt;$OS161_SRC&lt;/code&gt; is your os161 source root directory.&lt;/p&gt;


&lt;h3&gt;How is a system call defined?&lt;/h3&gt;
&lt;p&gt;Take a look at &lt;code&gt;$OS161_SRC/user/lib/libc/arch/mips/syscalls-mips.S&lt;/code&gt;. We can see
that a macro called &lt;code&gt;SYSCALL(sym, num)&lt;/code&gt; is defined. Basically, this macro does
a very simple thing: fill &lt;code&gt;$v0&lt;/code&gt; with &lt;code&gt;SYS_##sym&lt;/code&gt; and jump to the common code at
&lt;code&gt;__syscall&lt;/code&gt;. Two points to note here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;SYS_##sym&lt;/code&gt; is a little compiler trick. &lt;code&gt;##sym&lt;/code&gt; will be replaced by the
actual name of &lt;code&gt;sym&lt;/code&gt;. In our case (&lt;code&gt;SYSCALL(fork, SYS_fork)&lt;/code&gt;), here &lt;code&gt;sym&lt;/code&gt; is
actually &lt;code&gt;fork&lt;/code&gt;, so &lt;code&gt;SYS_##sym&lt;/code&gt; will be replaced by &lt;code&gt;SYS_fork&lt;/code&gt;. See &lt;a href="http://gcc.gnu.org/onlinedocs/cpp/Concatenation.html#Concatenation"&gt;this gcc
document&lt;/a&gt; if you want know more details about it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The second argument of the macro, &lt;code&gt;num&lt;/code&gt;, is unused here.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then in &lt;code&gt;__syscall&lt;/code&gt;, the first instruction is the &lt;a href="http://www.mrc.uidaho.edu/mrc/people/jff/digital/MIPSir.html"&gt;MIPS syscall instruction&lt;/a&gt;. 
We'll discuss the details of this instruction later.
After this, we check &lt;code&gt;$a3&lt;/code&gt; value to see if the syscall is successful and store
the error number (&lt;code&gt;$v0&lt;/code&gt;) to &lt;code&gt;errno&lt;/code&gt; if not.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$OS161_SRC/build/user/lib/libc/syscall.S&lt;/code&gt; is generated according to
&lt;code&gt;$OS161_SRC/user/lib/libc/arch/mips/syscall-mips.S&lt;/code&gt; during compiling, and this
file is the actual file that be compiled and linked to user library. We can
see that besides the &lt;code&gt;SYSCALL&lt;/code&gt; macro and the &lt;code&gt;__syscall&lt;/code&gt; code, declarations of
all the syscalls are added here. So when we call &lt;code&gt;fork&lt;/code&gt; in user program, we
actually called the assembly functions defined in this file.&lt;/p&gt;
&lt;h3&gt;How a system call get called?&lt;/h3&gt;
&lt;p&gt;The MIPS &lt;code&gt;syscall&lt;/code&gt; instruction will cause a software interruption. (See
&lt;a href="http://courses.missouristate.edu/KenVollmar/MARS/Help/SyscallHelp.html"&gt;MIPS syscall function&lt;/a&gt;). After this instruction, the hardware
will automatically turn off interrupts, then jump to the code located at
&lt;code&gt;0x80000080&lt;/code&gt;. From &lt;code&gt;$OS161_SRC/kern/arch/mips/locore/exception-mips1.S&lt;/code&gt;, we can
see that &lt;code&gt;mips_general_handler&lt;/code&gt; is the code that defined at &lt;code&gt;0x80000080&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The assembly code here do a lot of stuff that we don't need to care. All we
need to know that they will save a trapframe on current thread's kernel stack
and call &lt;code&gt;mips_trap&lt;/code&gt; in &lt;code&gt;$OS161_SRC/kern/arch/mips/locore/trap.c&lt;/code&gt;. Then if this
trap (or interruption) is caused by &lt;code&gt;syscall&lt;/code&gt; instruction, &lt;code&gt;mips_trap&lt;/code&gt; will
call &lt;code&gt;syscall&lt;/code&gt; in &lt;code&gt;$OS161_SRC/kern/arch/mips/syscall/syscall.c&lt;/code&gt; to handle. Then
we go to our familiar &lt;code&gt;syscall&lt;/code&gt; function, we dispatch the syscall according to
the call number, then collect the results and return. If every thing is OK, we
go back to &lt;code&gt;mips_trap&lt;/code&gt;, then to the assembly code &lt;code&gt;common_exception&lt;/code&gt; and then
go back to user mode.&lt;/p&gt;
&lt;h3&gt;How to add a system call&lt;/h3&gt;
&lt;p&gt;To add a system call, a typical flow would be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add a case branch in the syscall function:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nl"&gt;SYS_fork&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
     &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys_fork&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;retval&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
     &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Add a new header file in &lt;code&gt;$OS161_SRC/kern/include/kern&lt;/code&gt;, declare your
&lt;code&gt;sys_fork&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Include your header file in &lt;code&gt;$OS161_SRC/kern/include/syscall.h&lt;/code&gt; so that the
compiler can find the definition of &lt;code&gt;sys_fork&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add a new c file in &lt;code&gt;$OS161_SRC/kern/syscall&lt;/code&gt;, implement your &lt;code&gt;sys_fork&lt;/code&gt;
function&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add your c file's full path to &lt;code&gt;$OS161_SRC/kern/conf/conf.kern&lt;/code&gt; so that
your c file will be compiled. See &lt;code&gt;loadelf.c&lt;/code&gt; and &lt;code&gt;runprogram.c&lt;/code&gt; entries in that
file for examples.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then in &lt;code&gt;$OS161_SRC/kern/conf&lt;/code&gt;, &lt;strong&gt;reconfigure the kernel&lt;/strong&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./config ASST3
&lt;/pre&gt;&lt;/div&gt;</summary><category term="syscall"></category></entry><entry><title>OS161 Process Scheduling</title><link href="http://jhshi.me/2012/03/18/os161-process-scheduling/index.html" rel="alternate"></link><updated>2012-03-18T15:19:27-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2012-03-18:2012/03/18/os161-process-scheduling/index.html</id><summary type="html">&lt;p&gt;OS161 provides a simple round-robin scheduler by default. It works like this: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;hardclock&lt;/code&gt; from &lt;code&gt;$OS161_SRC/kern/thread/clock.c&lt;/code&gt; will be periodically called 
(from hardware clock interrupt handler)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Two functions may be called there after:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;schedule&lt;/code&gt; to change the order the threads in ready queue, which currently
  does nothing&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thread_consider_migraton&lt;/code&gt; to enable thread migration among CPU cores&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then it will call &lt;code&gt;thread_yield&lt;/code&gt; to cause the current thread yield to another
  thread&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We need to play with the &lt;code&gt;schedule&lt;/code&gt; function to give interactive threads higher
priority.&lt;/p&gt;


&lt;h3&gt;Why give priority to interactive threads?&lt;/h3&gt;
&lt;p&gt;There are two reasons about this (at least the two in my mind) :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Your time is more valuable than computer's&lt;/strong&gt;. So in general, we
should first serve those threads that interact with you. For example, you don't
want to wait the computer in a shell while it's busy doing backup, right?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Interactive threads tend to be I/O bound, which means they often get stuck
waiting for input or output. So they normally fail to consume their granted
time slice. Thus we can switch to computation bound threads when they stuck and
boost computer utilization.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;How can we know whether a thread is interactive or not?&lt;/h3&gt;
&lt;p&gt;As said above, interactive threads are normally I/O bound. &lt;strong&gt;So they often need
to sleep a lot.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;$OS161_SRC/kern/thread/thread.c&lt;/code&gt;, we can see that &lt;code&gt;thread_switch&lt;/code&gt; is used to actually
switch between threads. The first argument is &lt;code&gt;newstate&lt;/code&gt;, which give some hints
about the current thread.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;newstate&lt;/code&gt; is &lt;code&gt;S_READY&lt;/code&gt;, it means that &lt;strong&gt;current thread has consumed all
its time slice and is forced to yield to another thread&lt;/strong&gt; (by hardware clock).
So we can guess that it's not interactive, or, it's computation intensive.
However, if &lt;code&gt;newstate&lt;/code&gt; is &lt;code&gt;S_SLEEP&lt;/code&gt;, then it means &lt;strong&gt;current thread offers to
yield to another thread&lt;/strong&gt;, maybe waiting for I/O or a mutex. Thus we can guess
that this thread is more interactive, or, it's I/O intensive.&lt;/p&gt;
&lt;p&gt;So by the &lt;code&gt;newstate&lt;/code&gt;, we can make a good guess of current thread.&lt;/p&gt;
&lt;h3&gt;How to implement it?&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Multilevel_feedback_queue"&gt;Multi-Level Feedback Queue&lt;/a&gt; seems to be a good enough algorithm in
this case.&lt;/p&gt;
&lt;p&gt;We can add a priority field in &lt;code&gt;struct thread&lt;/code&gt; and initiate it as medium
priority in &lt;code&gt;thread_create&lt;/code&gt;. Then in &lt;code&gt;thread_swith&lt;/code&gt;, we can adjust current
thread's priority by the &lt;code&gt;newstate&lt;/code&gt;. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If it's &lt;code&gt;S_SLEEP&lt;/code&gt; then we increase current thread's priority. &lt;/li&gt;
&lt;li&gt;Otherwise, if it's &lt;code&gt;S_READY&lt;/code&gt; then we decrease current thread's priority. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course, we can only support a finite priority level here, &lt;strong&gt;so be careful 
with boundary case&lt;/strong&gt;. For example, if current thread is
already the highest priority and still request &lt;code&gt;S_SLEEP&lt;/code&gt;, then we just leave it
in that priority.&lt;/p&gt;
&lt;p&gt;Then in &lt;code&gt;schedule&lt;/code&gt;, we need to &lt;strong&gt;find the thread with highest priority
among all the threads in &lt;code&gt;curcpu-&amp;gt;c_runqueue&lt;/code&gt;, and bring it to head&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Current CPU's run queue is organized as a double linked list with head
element. &lt;code&gt;$OS161_SRC/kern/include/threadlist.h&lt;/code&gt; provides several useful interface to
let us manipulate the list. Find a maximum/minimum number among a list
is so simple that I won't provide any details here. But note that &lt;strong&gt;the
head element is just a place holder&lt;/strong&gt;. So you may want to start from
&lt;code&gt;curcpu-&amp;gt;c_runqueue.tl_head.tln_Next&lt;/code&gt; and stop when &lt;code&gt;elem-&amp;gt;tln_next == NULL&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once find the thread, we need to bring it to list head so we can
leave &lt;code&gt;thread_switch&lt;/code&gt; unchanged. A &lt;code&gt;threadlist_remove&lt;/code&gt; followed by
&lt;code&gt;threadlist_addhead&lt;/code&gt; will be sufficient here.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;One problem of MLFQ is starvation&lt;/strong&gt;. So you may want to periodically reset all
threads' priority to medium level for fairness.&lt;/p&gt;
&lt;p&gt;That's all. Here's just a work solution. Much work has be done if you want
better scheduling for performance.&lt;/p&gt;</summary><category term="scheduling"></category><category term="MLFQ"></category></entry><entry><title>OS161 File System Calls</title><link href="http://jhshi.me/2012/03/14/os161-file-system-calls/index.html" rel="alternate"></link><updated>2012-03-14T21:19:17-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2012-03-14:2012/03/14/os161-file-system-calls/index.html</id><summary type="html">&lt;p&gt;Assume you've read my previous post on &lt;a href="/2012/03/14/os161-file-operation-overview/"&gt;file operations in OS161&lt;/a&gt;,
then everything is quite straightforward. One more thing, remember to protect
every access to the file descriptor data structure using lock!&lt;/p&gt;
&lt;p&gt;Let's get started.&lt;/p&gt;


&lt;h3&gt;&lt;code&gt;sys_open&lt;/code&gt; and &lt;code&gt;sys_close&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;We'll rely on &lt;code&gt;vfs_open&lt;/code&gt; to do most of the work. But before that, we need to
check:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Is &lt;code&gt;filename&lt;/code&gt; a valid pointer? (alignment, NULL, kernel pointer, etc.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Is flags valid? flags can only contain exactly one of &lt;code&gt;O_RDONLY&lt;/code&gt;, &lt;code&gt;O_WRONLY&lt;/code&gt;
  and &lt;code&gt;O_RDWR&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After these, we need to allocate a fd to the opened file: just scan the
&lt;code&gt;curthread-&amp;gt;t_fdtable&lt;/code&gt; and find a available slot (&lt;code&gt;NULL&lt;/code&gt;). Then we need to
actually open the file using &lt;code&gt;vfs_open&lt;/code&gt;. Note that we need to copy &lt;code&gt;filename&lt;/code&gt;
into kernel buffer using &lt;code&gt;copyinstr&lt;/code&gt;, for both security reasons, and that
&lt;code&gt;vfs_open&lt;/code&gt; may destroy the pathname passed in.&lt;/p&gt;
&lt;p&gt;Once &lt;code&gt;vfs_open&lt;/code&gt; successfully returns, we can initialize a &lt;code&gt;struct fdesc&lt;/code&gt;. Pay
special attention to &lt;code&gt;fdesc-&amp;gt;offset&lt;/code&gt;. Without &lt;code&gt;O_APPEND&lt;/code&gt;, it should be zero.
But with &lt;code&gt;O_APPEND&lt;/code&gt;, it should be file size. So we need to check it and use
&lt;code&gt;VOP_STAT&lt;/code&gt; to get file size if necessary.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sys_close&lt;/code&gt; is quite easy. We first decrease the file reference counter. And
close the file using &lt;code&gt;vfs_close&lt;/code&gt; and free the &lt;code&gt;struct fdesc&lt;/code&gt; if the counter
reaches 0.&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;sys_read&lt;/code&gt; and &lt;code&gt;sys_write&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;As usual, before do anything, first check the parameters.&lt;/p&gt;
&lt;p&gt;The main work here is using &lt;code&gt;VOP_READ&lt;/code&gt; or &lt;code&gt;VOP_WRITE&lt;/code&gt; together with &lt;code&gt;struct
iovec&lt;/code&gt; and &lt;code&gt;struct uio&lt;/code&gt;. &lt;code&gt;kern/syscall/loadelf.c&lt;/code&gt; is a good start point.
&lt;strong&gt;However, we need to initialize the &lt;code&gt;uio&lt;/code&gt; for read/write for user space
buffers&lt;/strong&gt;. That means the &lt;code&gt;uio-&amp;gt;uio_segflg&lt;/code&gt; should be &lt;code&gt;UIO_USERSPACE&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note that &lt;code&gt;uio-&amp;gt;uio_resid&lt;/code&gt; is how many bytes left after the IO operation. So you
can calculate how many bytes are actually read/written by &lt;code&gt;len - uio-&amp;gt;uio_resid&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Since we've carefully handled std files when initialization. Here we just treat
them as normal files and pay no special attention to them.&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;sys_dup2&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The hardest thing here is not how to write &lt;code&gt;sys_dup2&lt;/code&gt;, but instead how &lt;code&gt;dup2&lt;/code&gt;
is supposed to be used. Here is a typical code snippet of how to use &lt;code&gt;dup2&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;logfd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;logfile&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;O_WRONLY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/* note the sequence of parameter */&lt;/span&gt; 
&lt;span class="n"&gt;dup2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logfd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;STDOUT_FILENO&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logfd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/* now all print content will go to log file */&lt;/span&gt; 
&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello, OS161.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can see that in &lt;code&gt;dup2(oldfd, newfd)&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;After &lt;code&gt;dup2&lt;/code&gt;, &lt;code&gt;oldfd&lt;/code&gt; and &lt;code&gt;newfd&lt;/code&gt; points to the same file. But we can call 
&lt;code&gt;close&lt;/code&gt; on any of them and do not influence the other.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After &lt;code&gt;dup2&lt;/code&gt;, all read/write to &lt;code&gt;newfd&lt;/code&gt; will be actually performed on
&lt;code&gt;oldfd&lt;/code&gt;. (Of course, they points to the same file!!)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If &lt;code&gt;newfd&lt;/code&gt; is previous opened, it should be closed in &lt;code&gt;dup2&lt;/code&gt; ( according
to &lt;a href="http://linux.die.net/man/2/dup2"&gt;&lt;code&gt;dup2&lt;/code&gt; man page&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once we're clear about these. Coding &lt;code&gt;sys_dup2&lt;/code&gt; is a piece of cake. Just don't
forget to maintain the &lt;code&gt;fdesc-&amp;gt;ref_count&lt;/code&gt; accordingly.&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;sys_lseek&lt;/code&gt;, &lt;code&gt;sys_chdir&lt;/code&gt; and &lt;code&gt;sys__getcwd&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Nothing to say. Use &lt;code&gt;VOP_TRYSEEK&lt;/code&gt;, &lt;code&gt;vfs_chidr&lt;/code&gt; and &lt;code&gt;vfs_getcwd&lt;/code&gt; respectively.
Only one thing, if &lt;code&gt;SEEK_END&lt;/code&gt; is used. use &lt;code&gt;VOP_STAT&lt;/code&gt; to get the file size, as
we did in &lt;code&gt;sys_open&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;64-bit parameter and return value in lseek&lt;/h3&gt;
&lt;p&gt;This is just a minor trick. Let's first see the definition of &lt;code&gt;lseek&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;off_t&lt;/span&gt; &lt;span class="n"&gt;lseek&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;off_t&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;whence&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And from &lt;code&gt;$OS161_SRC/kern/include/types.h&lt;/code&gt;, we can see that &lt;code&gt;off_t&lt;/code&gt; is type-defined as
64-bit integer (&lt;code&gt;i64&lt;/code&gt;). So the question here is: how to pass 64-bit parameter
to &lt;code&gt;sys_lseek&lt;/code&gt; and how get the 64-bit return value of it.&lt;/p&gt;
&lt;h4&gt;Pass 64-bit argument to sys_lseek&lt;/h4&gt;
&lt;p&gt;From the comment in &lt;code&gt;$OS161_SRC/kern/arch/mips/syscall/syscall.c&lt;/code&gt;, we can see that, &lt;code&gt;fd&lt;/code&gt;
should be in &lt;code&gt;$a0&lt;/code&gt;, &lt;code&gt;pos&lt;/code&gt; should be in (&lt;code&gt;$a2:$a3&lt;/code&gt;) (&lt;strong&gt;&lt;code&gt;$a2&lt;/code&gt; stores high 32-bit and
&lt;code&gt;$a3&lt;/code&gt; stores low 32-bit)&lt;/strong&gt;, and &lt;code&gt;whence&lt;/code&gt; should be in &lt;code&gt;sp+16&lt;/code&gt;. Here, &lt;code&gt;$a1&lt;/code&gt; is not
used due to alignment.&lt;/p&gt;
&lt;p&gt;So in the switch branch of &lt;code&gt;sys_lseek&lt;/code&gt;, we should first pack (&lt;code&gt;$a2:$a3&lt;/code&gt;) into a 64-bit
variable, say &lt;code&gt;sys_pos&lt;/code&gt;. Then we use &lt;code&gt;copyin&lt;/code&gt; to copy &lt;code&gt;whence&lt;/code&gt; from user stack (&lt;code&gt;tf-&amp;gt;tf_sp+16&lt;/code&gt;).&lt;/p&gt;
&lt;h3&gt;Get 64-bit return value of &lt;code&gt;sys_lseek&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Also from the comment, we know that a 64-bit return value is stored in
(&lt;code&gt;$v0:$v1&lt;/code&gt;) (&lt;code&gt;$v0&lt;/code&gt; stores high 32-bit and &lt;code&gt;$v1&lt;/code&gt; stores low 32-bit). And note that
after the &lt;code&gt;switch&lt;/code&gt; statement, &lt;code&gt;retval&lt;/code&gt; will be assigned to $v0, so here we just
need to copy the low 32-bit of &lt;code&gt;sys_lseek&lt;/code&gt;'s return value to $v1, and high
32-bit to &lt;code&gt;retval&lt;/code&gt;.&lt;/p&gt;</summary><category term="open"></category><category term="read"></category><category term="write"></category><category term="close"></category><category term="dup2"></category><category term="lseek"></category><category term="syscall"></category></entry><entry><title>OS161 File Operation Overview</title><link href="http://jhshi.me/2012/03/14/os161-file-operation-overview/index.html" rel="alternate"></link><updated>2012-03-14T20:33:50-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2012-03-14:2012/03/14/os161-file-operation-overview/index.html</id><summary type="html">&lt;p&gt;In user space, when open a file, user program will get a file descriptor (a
integer) that represent that file. User can use this descriptor to perform various
operations on this file: read, write, seek, etc. As I see it, this design is
quite clean in that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Hide most of the details from user, for both safety and simplicity&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enable more high level abstraction: everything (socket, pipe..) is a file&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The file descriptor is actually an index to kernel space structure that
contains all the details of opened files. So at kernel side, we need to do a
lot bookkeeping stuff.&lt;/p&gt;


&lt;h3&gt;What information should be kept?&lt;/h3&gt;
&lt;p&gt;It's helpful to take a look at &lt;code&gt;$OS161_SRC/kern/include/vnode.h&lt;/code&gt;. In a nutshell, a file
is represented by a &lt;code&gt;struct vnode&lt;/code&gt; in kernel space. And most of the underlying
interfaces that help us to manage files have already been provided. &lt;strong&gt;All we
need to do is just bookkeeping.&lt;/strong&gt; So basically, we need to record the following
details about a file:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;File name. We don't actually need this, but just in case. For example, we
may want to print a file's name when debuging.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open flags. We need to keep the flags passed by &lt;code&gt;open&lt;/code&gt; so that later on we can check
permissions on read or write.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;File offset. We definitely need this.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;File's reference counter. Mainly for &lt;code&gt;dup2&lt;/code&gt; and &lt;code&gt;fork&lt;/code&gt; system call&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A lock to protect the access to this file descriptor. Since it's possible that two
threads share the same copy of this bookkeeping data structure (e.g., after &lt;code&gt;fork&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Actual pointer to the file's &lt;code&gt;struct vnode&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Why we didn't record the file's fd? Please see next section.&lt;/p&gt;
&lt;h3&gt;File descriptor Allocation&lt;/h3&gt;
&lt;p&gt;There are some common rules about file descriptor:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;0, 1 and 2 are special file descriptors. They are stdin, stdout and stderr
respectively. (Defined in &lt;code&gt;$OS161_SRC/kern/include/kern/unistd.h&lt;/code&gt; as
&lt;code&gt;STDIN_FILENO&lt;/code&gt;, &lt;code&gt;STDOUT_FILENO&lt;/code&gt; and &lt;code&gt;STDERR_FILENO&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The file descriptor returned by open should be the smallest fd available.
(Not compulsory though)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;fd space is process specific&lt;/strong&gt;, i.e. different process may get the same
file descriptor that represent different files&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, to maintain each process's opened file information, we add a new field to
&lt;code&gt;struct thread&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/* OPEN_MAX is defined in $OS161_SRC/kern/include/limits.h */&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;fdesc&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;t_fdtable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;OPEN_MAX&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you may figure out why there isn't a fd filed in &lt;code&gt;struct fdesc&lt;/code&gt;, since its
index is the fd! So when we need to allocate a file descriptor, we just need
to scan the &lt;code&gt;t_fdtable&lt;/code&gt; (from &lt;code&gt;STDERR_FILENO+1&lt;/code&gt;, of course), find an available 
slot (&lt;code&gt;NULL&lt;/code&gt;) and use it. Also, since it's a &lt;code&gt;struct thread&lt;/code&gt; field, it's process 
specific.&lt;/p&gt;
&lt;p&gt;Does the &lt;code&gt;t_fdtable&lt;/code&gt; look familiar to you? Yes, it's very similar to our
process array, only that the later is system-wise. (Confused? See 
&lt;a href="/2012/03/11/os161-fork-system-call"&gt;my previous post on fork&lt;/a&gt;)&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;t_fdtable&lt;/code&gt; Management and Special Files&lt;/h3&gt;
&lt;p&gt;Whenever you add a new field to &lt;code&gt;struct thread&lt;/code&gt;, don't forget to initialize
them in &lt;code&gt;thread_create&lt;/code&gt; and do clean up in &lt;code&gt;thread_exit&lt;/code&gt; and/or &lt;code&gt;thread_destroy&lt;/code&gt;.
Since &lt;code&gt;t_fdtable&lt;/code&gt; is an fixed size array, work a lot much easier: just zero
the array when create, and no clean up is needed. Also, &lt;strong&gt;&lt;code&gt;t_fdtable&lt;/code&gt; are
supposed to be inheritable: so copy a parent's &lt;code&gt;t_fdtable&lt;/code&gt; to child when do
&lt;code&gt;sys_fork&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Since parent and child thread are supposed to share the same file table, so
when copy file tables, remember to increase each file's reference counter.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Console files (std in/out/err) are supposed to be opened "automatically" when 
a thread is created&lt;/strong&gt;, i.e. user themselves don't need to open them.&lt;/p&gt;
&lt;p&gt;At first glance, &lt;code&gt;thread_create&lt;/code&gt; would be a intuitive place to  initialize them.
Yes, we can do that. But be noted that &lt;em&gt;when the first thread is created, the console 
is even not bootstrapped yet&lt;/em&gt;, so if you open console files in &lt;code&gt;thread_create&lt;/code&gt;, it'll
fail (silently blocking...) at that time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: The &lt;em&gt;right&lt;/em&gt; way to do this is to initialize console in &lt;code&gt;runprogram&lt;/code&gt;,
because that's where the first user thread is born. And later user threads will
just inherits the three file handles of console from then on.&lt;/p&gt;
&lt;p&gt;BTW, &lt;strong&gt;how to open console&lt;/strong&gt;? The path name should be "con:", flags should
be: &lt;code&gt;O_RDONLY&lt;/code&gt; for stdin, &lt;code&gt;O_WRONLY&lt;/code&gt; for stdout and stderr; options should be &lt;code&gt;0664&lt;/code&gt;
(Note the zero prefix, it's a octal number).&lt;/p&gt;</summary><category term="file"></category><category term="syscall"></category><category term="fdtable"></category></entry><entry><title>OS161 exit and waitpid System Call</title><link href="http://jhshi.me/2012/03/12/os161-exit-and-waitpid-system-call/index.html" rel="alternate"></link><updated>2012-03-12T15:51:46-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2012-03-12:2012/03/12/os161-exit-and-waitpid-system-call/index.html</id><summary type="html">&lt;p&gt;Before going on, assume you've read my previous post on &lt;a href="/2012/03/12/os161-pid-management"&gt;pid management&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to the &lt;code&gt;struct process&lt;/code&gt;, our work is much simplified. Quoting &lt;a href="http://en.wikipedia.org/wiki/Eric_S._Raymond"&gt;Eric S.Raymond &lt;/a&gt; 
here.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Smart data structures and dumb code works a lot better than the other way
around.&lt;/p&gt;
&lt;/blockquote&gt;


&lt;h3&gt;&lt;code&gt;sys_waitpid&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;At first glance, the logic of &lt;code&gt;waitpid&lt;/code&gt; is trivial. Yes, it's indeed in
terms of the "core code": Just acquire the exitlock and then see if the
process has exited, then wait it exit using &lt;code&gt;cv_wait&lt;/code&gt; on exitcv and get
it's exitcode. Here I use &lt;code&gt;cv&lt;/code&gt; to coordinate child and parent process. Or you can
use semaphore with initial count 0: child will &lt;code&gt;V&lt;/code&gt; the semaphore when it exits,
and parent will &lt;code&gt;P&lt;/code&gt; the semaphore on &lt;code&gt;waitpid&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But it turns out that most the code of &lt;code&gt;waitpid&lt;/code&gt; is argument
checking! More arguments means more potential risks from user space.
Sigh~ Anyway, we are doing kernel programming. And just take a look at
&lt;code&gt;$OS161_SRC/user/testbin/badcall/bad_waitpid.c&lt;/code&gt; and you'll know what I mean.&lt;/p&gt;
&lt;p&gt;So basically, we need to check:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Is the status pointer properly aligned (by 4) ?&lt;/li&gt;
&lt;li&gt;Is the status pointer a valid pointer anyway (NULL, point to kernel, ...)?&lt;/li&gt;
&lt;li&gt;Is options valid? (More flags than &lt;code&gt;WNOHANG | WUNTRACED&lt;/code&gt; )&lt;/li&gt;
&lt;li&gt;Does the waited pid exist/valid?&lt;/li&gt;
&lt;li&gt;If exist, are we allowed to wait it ? (Is it our child?)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And also, after successfully get the exitcode, don't forget to destroy the
child's process structure and free its slot in the procs array. Since one child
has only one parent, and after we wait for it, no one will care for it any
more!&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;sys_exit&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;This part is easy. (Mostly because exit only take on integer argument!) All
we need to do is find our &lt;code&gt;struct process&lt;/code&gt; entry using &lt;code&gt;curthread-&amp;gt;t_pid&lt;/code&gt;.
And then indicate that "I've exited" and fill the exitcode. The only
thing to note that the exitcode must be maked using the MACROs in
&lt;code&gt;$OS161_SRC/kern/include/kern/wait.h&lt;/code&gt;. Suppose user passing in &lt;code&gt;_exitcode&lt;/code&gt;, then we need
to set the real &lt;code&gt;exitcode&lt;/code&gt; as &lt;code&gt;_MKWAIT_EXIT(_exitcode)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And if we are smarter, we can first check if parent exist or if parent has
exited, then we even don't bother fill the exitcode since no one cares! Anyway,
it's just a tiny shortcut, and totally optional.&lt;/p&gt;</summary><category term="exit"></category><category term="waitpid"></category><category term="syscall"></category></entry><entry><title>OS161 pid Management</title><link href="http://jhshi.me/2012/03/12/os161-pid-management/index.html" rel="alternate"></link><updated>2012-03-12T15:13:54-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2012-03-12:2012/03/12/os161-pid-management/index.html</id><summary type="html">&lt;p&gt;There are many way to manage each process's pid. Here is the way I do it.&lt;/p&gt;
&lt;p&gt;I decided to make minimal modification to &lt;code&gt;$OS161_SRC/kern/thread/thread.c&lt;/code&gt;,
in case anything is ruined. So I only add two things to the thread module. One
is I add a &lt;code&gt;t_pid&lt;/code&gt; field to &lt;code&gt;struct thread&lt;/code&gt; so that &lt;code&gt;getpid&lt;/code&gt; system call is
trivial. Another is I add a call of &lt;code&gt;pid_alloc&lt;/code&gt; in &lt;code&gt;thread_alloc&lt;/code&gt; to initialize
new thread's &lt;code&gt;t_pid&lt;/code&gt;. That's it. No more touch on the thread module.&lt;/p&gt;


&lt;h3&gt;The process Structure&lt;/h3&gt;
&lt;p&gt;In os161, we stick to the 1:1 process:thread model. That is, a process has and
only has one thread. Thus process and thread are basically the same thing in
this scenario. However, I still decided to use a &lt;code&gt;struct process&lt;/code&gt; to do process
bookkeeping stuff. It's independent to &lt;code&gt;struct thread&lt;/code&gt; and outside the thread
module. Thus when a thread exits and its &lt;code&gt;thread&lt;/code&gt; structure is destroyed. I
still have its meta-data (e.g. exitcode) stored in the &lt;code&gt;process&lt;/code&gt; structure.&lt;/p&gt;
&lt;p&gt;So, what should we record about a process? As we already have the &lt;code&gt;struct
thread&lt;/code&gt; to record most of the information about a thread, we just use a pointer
to &lt;code&gt;struct thread&lt;/code&gt; to get all these information. What we do in &lt;code&gt;struct process&lt;/code&gt;
is mainly for our &lt;code&gt;waitpid&lt;/code&gt; and &lt;code&gt;exit&lt;/code&gt; system call. So we should keep the
information of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Its parent's (if any) pid&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Whether a process has exited&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If this process has exited, then the exitcode&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Synchronous facilities to protect the exit status (lock, cv, samophore, etc)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Of course a pointer to &lt;code&gt;struct thread&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So the structure looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="kt"&gt;pid_t&lt;/span&gt; &lt;span class="n"&gt;ppid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;semphore&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;exitsem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;exited&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;exitcode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="kr"&gt;thread&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Pid allocation&lt;/h3&gt;
&lt;p&gt;For convenience and simplicity, I decided to support a maximum number of
&lt;code&gt;MAX_RUNNING_PROCS (256)&lt;/code&gt; processes in the OS, regardless the &lt;code&gt;__PID_MAX (32767)&lt;/code&gt; 
macro in &lt;code&gt;$OS161_SRC/kern/inlude/kern/limits.h&lt;/code&gt;. So I just use a global static
array of &lt;code&gt;struct process*&lt;/code&gt; to maintain all the processes in system. Of course
it's very dumb but hope it's sufficient for a toy OS like 161.&lt;/p&gt;
&lt;p&gt;Then allocate a pid is very easy, just scan the process array and find a
available slot (&lt;code&gt;NULL&lt;/code&gt;). One important thing to note is that leave &lt;code&gt;pid=0&lt;/code&gt;
alone and do not use it. Since in &lt;code&gt;/kern/include/kern/wait.h&lt;/code&gt;, there are two
special MACROs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#define WAIT_ANY (-1) 
#define WAIT_MYPGRP (0)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That is, pid = 0 has a special meaning. So we'd better not use it, staring
allocate pid from 1. We can also see this from the &lt;code&gt;__PID_MIN (2)&lt;/code&gt; macro in
&lt;code&gt;$OS161_SRC/kern/inlude/kern/limits.h&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once a available slot is found, we need to create a &lt;code&gt;struct process&lt;/code&gt; and
initialize it appropriately, especially it's ppid (-1 or other invalid value).&lt;/p&gt;</summary><category term="pid"></category><category term="syscall"></category></entry><entry><title>OS161 execv System Call</title><link href="http://jhshi.me/2012/03/11/os161-execv-system-call/index.html" rel="alternate"></link><updated>2012-03-11T22:27:47-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2012-03-11:2012/03/11/os161-execv-system-call/index.html</id><summary type="html">&lt;p&gt;Basically, &lt;code&gt;execv&lt;/code&gt; do more or less the same thing with &lt;code&gt;runprogram&lt;/code&gt; in
&lt;code&gt;$OS161_SRC/kern/syscall/runprogram.c&lt;/code&gt;. The overall flow of &lt;code&gt;sys_execv&lt;/code&gt; are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Copy arguments from user space into kernel buffer&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Open the executable, create a new address space and load the elf into it&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Copy the arguments from kernel buffer into user stack&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Return user mode using &lt;code&gt;enter_new_process&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Note that I highlighted step 1 and 3 since they are the trickiest part of
&lt;code&gt;execv&lt;/code&gt;, step 2 and 4 are just the same with &lt;code&gt;runprogram&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Format of &lt;code&gt;uargs&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The first argument is &lt;code&gt;progname&lt;/code&gt; (e.g., &lt;code&gt;/testbin/argtest&lt;/code&gt;), and the second
argument is &lt;code&gt;uargs&lt;/code&gt;, it's an array of pointers, each pointer points to a user
space string. The last pointer of &lt;code&gt;uargs&lt;/code&gt; is &lt;code&gt;NULL&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Since we don't know how many arguments are there in &lt;code&gt;uargs&lt;/code&gt;, we need &lt;em&gt;to copy
the pointers one by one using &lt;code&gt;copyin&lt;/code&gt;&lt;/em&gt; until we encounter a &lt;code&gt;NULL&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Copy arguments into kernel buffer&lt;/h3&gt;
&lt;p&gt;In whichever way to do this, one of step 1 and 3 must be complicated. I choose
to carefully pack the arguments into a kernel buffer and then just directly
copy this buffer into user stack in bulk. Note that in MIPS, &lt;em&gt;pointers must be 
aligned by 4&lt;/em&gt;. So don't forget to padding when necessary&lt;/p&gt;
&lt;p&gt;For convenience, assume that arguments are {&lt;code&gt;foo&lt;/code&gt;, &lt;code&gt;os161&lt;/code&gt;, &lt;code&gt;execv&lt;/code&gt;, &lt;code&gt;NULL&lt;/code&gt;}.
Then after packing, my kernel buffer looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/2012-03-11-kargv.png" class="center"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Typo&lt;/strong&gt;: &lt;code&gt;kargv[2]&lt;/code&gt; should be 28, instead of 26.&lt;/p&gt;
&lt;p&gt;Note that &lt;code&gt;kargv[i]&lt;/code&gt; stores the &lt;em&gt;offset&lt;/em&gt; of the i'th arguments within the
&lt;code&gt;kargv&lt;/code&gt; array, since up to now we don't know their real user address yet.&lt;/p&gt;
&lt;h3&gt;Copy the arguments into user stack&lt;/h3&gt;
&lt;p&gt;Why user stack, not anywhere else? Because it's the only space we know for
sure. We can use &lt;code&gt;as_define_stack&lt;/code&gt; to get the value of initial stack pointer
(normally &lt;code&gt;0x80000000&lt;/code&gt;, aka &lt;code&gt;USER_SPACE_TOP&lt;/code&gt;). So what we do is &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fill &lt;code&gt;kargv[i]&lt;/code&gt; with actual user space pointer, and &lt;/li&gt;
&lt;li&gt;Copy &lt;code&gt;kargv&lt;/code&gt; array into the stack &lt;/li&gt;
&lt;li&gt;Minus &lt;code&gt;stackptr&lt;/code&gt; by the length of &lt;code&gt;kargv&lt;/code&gt; array. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note that &lt;em&gt;we must modify &lt;code&gt;kargs[i]&lt;/code&gt; before we do the actual copy&lt;/em&gt;, 
otherwise some weird bus error or TLB miss will occur.&lt;/p&gt;
&lt;p&gt;The steps are shown as follows (here we assume &lt;code&gt;stackptr&lt;/code&gt; initial value is
&lt;code&gt;0x80000000&lt;/code&gt;):&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/2012-03-11-stackptr.png" alt="Change of &lt;code&gt;stackptr&lt;/code&gt;" class="center" title="Change of &lt;code&gt;stackptr&lt;/code&gt;"&gt;&lt;/p&gt;</summary><category term="execv"></category><category term="syscall"></category></entry><entry><title>OS161 fork System Call</title><link href="http://jhshi.me/2012/03/11/os161-fork-system-call/index.html" rel="alternate"></link><updated>2012-03-11T20:42:34-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2012-03-11:2012/03/11/os161-fork-system-call/index.html</id><summary type="html">&lt;p&gt;If you're not already familiar with UNIX fork system call, here is it's
&lt;a href="http://linux.die.net/man/2/fork"&gt;function description&lt;/a&gt; and its &lt;a href="http://en.wikipedia.org/wiki/Fork_(operating_system)"&gt;entry on Wikipedia&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Basically, in &lt;code&gt;sys_fork&lt;/code&gt;, we need to do the follow things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Copy parent's trap frame, and pass it to child thread&lt;/li&gt;
&lt;li&gt;Copy parent's address space&lt;/li&gt;
&lt;li&gt;Create child thread (using &lt;code&gt;thread_fork&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Copy parent's file table into child&lt;/li&gt;
&lt;li&gt;Parent returns with child's pid immediately&lt;/li&gt;
&lt;li&gt;Child returns with 0&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, let's get started.&lt;/p&gt;


&lt;h3&gt;Pass parent's trap frame to child thread&lt;/h3&gt;
&lt;p&gt;Trap frame (&lt;code&gt;struct trapframe&lt;/code&gt;) records the exact state (e.g. registers, stack, 
etc.) of parent when
it call fork. Since we need the child exactly the same with parent (except for
return value of fork), we need child thread to start run with parent's trap
frame.&lt;/p&gt;
&lt;p&gt;So we need to pass parent's &lt;code&gt;trapframe&lt;/code&gt; pointer to &lt;code&gt;sys_fork&lt;/code&gt;, and store a full
copy of it &lt;em&gt;in kernel heap&lt;/em&gt; (i.e., allocated by &lt;code&gt;kmalloc&lt;/code&gt;). Then pass the
pointer to child's fork entry function (I called it &lt;code&gt;child_forkentry&lt;/code&gt;).&lt;/p&gt;
&lt;h3&gt;Copy parent's address space&lt;/h3&gt;
&lt;p&gt;We can use the &lt;code&gt;as_copy&lt;/code&gt; facility to do this. Note that &lt;code&gt;as_copy&lt;/code&gt; will allocate
a &lt;code&gt;struct addrspace&lt;/code&gt; for you and also copy the address space contents, so you
don't need to call &lt;code&gt;as_create&lt;/code&gt; by yourself. &lt;/p&gt;
&lt;h3&gt;Create Child Thread&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;thread_fork&lt;/code&gt; will create a new child thread structure and copy various fields
of current thread to it. Again, you don't need to call &lt;code&gt;thread_create&lt;/code&gt; by
yourself, &lt;code&gt;thread_fork&lt;/code&gt; will call it for you. You can get the pointer of child's
thread structure by the last argument of &lt;code&gt;thread_fork&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Parent's and Child's &lt;code&gt;fork&lt;/code&gt; return different values&lt;/h3&gt;
&lt;p&gt;This is the trickiest part. You may want to take a look at the end of &lt;code&gt;syscall&lt;/code&gt;
to find out the convention of return values. That is: &lt;em&gt;on success, &lt;code&gt;$a3&lt;/code&gt; stores
0, and &lt;code&gt;$v0&lt;/code&gt; stores return value (or &lt;code&gt;$v0:$v1&lt;/code&gt; if retval is 64-bit); on failure, &lt;code&gt;$a3&lt;/code&gt;
stores 1, and &lt;code&gt;$v0&lt;/code&gt; store error code&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Parent part is quite easy, after call &lt;code&gt;thread_fork&lt;/code&gt;, just copy current thread's
file table to child, and other book-keeping stuff you need to do, and finally,
return with child's pid, and let &lt;code&gt;syscall&lt;/code&gt; deal with the rest.&lt;/p&gt;
&lt;p&gt;Child part is not that trivial. In order to let child feel that &lt;code&gt;fork&lt;/code&gt; returns
0, we need to play with the trapframe a little bit. Remember that when we call
&lt;code&gt;thread_fork&lt;/code&gt; in parent's &lt;code&gt;sys_fork&lt;/code&gt;, we need to pass it with an entry point
together with two arguments (&lt;code&gt;void* data1, unsigned long data2&lt;/code&gt;). As said before,
I name the entry point as &lt;code&gt;child_forkentry&lt;/code&gt;, then what should we pass to it?
Obviously, one is parent's trapframe copy (lies in kernel heap buffer) and
another is parent's address space!&lt;/p&gt;
&lt;p&gt;Once we've decided what to pass, how to pass is depend on your preference. One
way is to pass trapframe pointer as the &lt;code&gt;data1&lt;/code&gt;, and address space pointer as
&lt;code&gt;data2&lt;/code&gt; (with explicit type-case, of course). Another way may be we pass trapframe pointer
as &lt;code&gt;data1&lt;/code&gt;, and assign the address space pointer to &lt;code&gt;$a0&lt;/code&gt; since we know &lt;code&gt;fork&lt;/code&gt; takes
no arguments.&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;child_forkentry&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Ok, now &lt;code&gt;child_forkentry&lt;/code&gt; becomes the first function executed when child
thread got run. First, we need to modify parent's trapframe's &lt;code&gt;$v0&lt;/code&gt; and &lt;code&gt;$a3&lt;/code&gt;
to make child's fork looks success and return 0. Also, &lt;em&gt;don't forget to
forward $epc by 4&lt;/em&gt; to avoid child keep calling fork. (BTW, we don't need
to do this in parent since &lt;code&gt;syscall&lt;/code&gt; will take care of this.). &lt;/p&gt;
&lt;p&gt;Then we
need to load the address space into child's &lt;code&gt;curthread-&amp;gt;t_addrspace&lt;/code&gt; and
activate it using &lt;code&gt;as_activate&lt;/code&gt;. Finally, we need to call &lt;code&gt;mips_usermode&lt;/code&gt;
to return to user mode. But before that, we need to_ copy the modified
trapframe from kernel heap to stack_ since &lt;code&gt;mips_usermode&lt;/code&gt; check this
(&lt;code&gt;KASSERT(SAME_STACK(cpustacks[curcpu-&amp;gt;c_number]-1, (vaddr_t)tf))&lt;/code&gt;. How? Before
call &lt;code&gt;mips_usermode&lt;/code&gt;, just declare a &lt;code&gt;struct trapframe&lt;/code&gt; (note: not pointer) and copy the content
into it, then use its address as parameter to call &lt;code&gt;mips_usermode&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Synchronization&lt;/h3&gt;
&lt;p&gt;Note that &lt;code&gt;thread_fork&lt;/code&gt; will set newly created child thread runnable and try to
switch to it immediately. So it's highly possible that before &lt;code&gt;thread_fork&lt;/code&gt;
returns, the child thread is already running. This is not desired since we
need to copy other stuff, like file table, to child thread after
&lt;code&gt;thread_fork&lt;/code&gt;. We definitely don't want the child thread running without a
file table. So &lt;em&gt;we need to prevent child thread from running until parent
thread set everything up.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So we need to disable interrupts before &lt;code&gt;thread_fork&lt;/code&gt; using &lt;code&gt;splhigh&lt;/code&gt;, and
restore the old interrupt level using &lt;code&gt;splx&lt;/code&gt; after parent thread is done.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: Disable interrupt does not necessarily stop child from running. If
you adopt this approach, you need to use some synchronization primitives to
coordinate between parent and child.&lt;/p&gt;
&lt;p&gt;Or better, you can modify &lt;code&gt;thread_fork&lt;/code&gt;, copy whatever you need to copy (e.g.,
file table) before &lt;code&gt;thread_make_runnable&lt;/code&gt;. Thus you won't have synchronization
issue.&lt;/p&gt;</summary><category term="fork"></category><category term="syscall"></category></entry><entry><title>Quick switch between source and header files in Vim</title><link href="http://jhshi.me/2012/02/14/quick-switch-between-source-and-header-files-in-vim/index.html" rel="alternate"></link><updated>2012-02-14T15:34:36-05:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2012-02-14:2012/02/14/quick-switch-between-source-and-header-files-in-vim/index.html</id><summary type="html">&lt;p&gt;There are many ways to do this, as listed in &lt;a href="http://vim.wikia.com/wiki/Easily_switch_between_source_and_header_file"&gt;vim wiki&lt;/a&gt;.&lt;/p&gt;


&lt;p&gt;I tried the script way (&lt;a href="http://www.vim.org/scripts/script.php?script_id=31"&gt;a.vim&lt;/a&gt;, but not feel comfortable. Because:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I'm doing kernel development, so I have a bunch of my own &lt;code&gt;stdio.h&lt;/code&gt;, &lt;code&gt;stdlib.h&lt;/code&gt;, 
etc. But &lt;code&gt;a.vim&lt;/code&gt; will bring you into the system include path, not my own &lt;/li&gt;
&lt;li&gt;Even though I jumped to the right space, jump back is not easy&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Finally, I found the ctags way very usable. Issue this command in your source
tree root,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ctags --extra&lt;span class="o"&gt;=&lt;/span&gt;+f -R .
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then in vim, you can just type &lt;code&gt;:tag header.h&lt;/code&gt; to jump to &lt;code&gt;header.h&lt;/code&gt; and use your 
familiar &lt;code&gt;ctrl+t&lt;/code&gt; to jump back, very intuitive. Plus, I found a &lt;a href="http://vim.wikia.com/wiki/Open_file_under_cursor"&gt;&lt;code&gt;gf&lt;/code&gt; command of vim&lt;/a&gt;
that can jump to the file under cursor, but with the same drawbacks as &lt;code&gt;a.vim&lt;/code&gt;, 
thus not adorable.&lt;/p&gt;
&lt;h3&gt;UPDATE&lt;/h3&gt;
&lt;p&gt;Here is a &lt;a href="http://vim.wikia.com/wiki/Jumping_to_previously_visited_locations"&gt;Vim Wiki&lt;/a&gt; talking about how to jump back and forth using 
{%key Ctrl %}-I and {%key Ctrl %}-O, which is kind of sweet. Thanks
@Partha Bera for point that out.&lt;/p&gt;</summary></entry><entry><title>error: function declaration isn't a prototype</title><link href="http://jhshi.me/2012/02/14/error-function-declaration-isnt-a-prototype/index.html" rel="alternate"></link><updated>2012-02-14T14:51:44-05:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2012-02-14:2012/02/14/error-function-declaration-isnt-a-prototype/index.html</id><summary type="html">&lt;p&gt;This error occurs when you try to declare a function with no arguments, and
compile with &lt;code&gt;-Werror=strict-prototypes&lt;/code&gt;, as follows:&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Fix it by declare it as&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is because in c, &lt;code&gt;foo(void)&lt;/code&gt; takes no arguments while &lt;code&gt;foo()&lt;/code&gt; takes a infinite
number of arguments.&lt;/p&gt;
&lt;p&gt;Thanks to this &lt;a href="http://stackoverflow.com/questions/42125/function-declaration-isnt-a-prototype"&gt;stackoverflow post&lt;/a&gt;&lt;/p&gt;</summary><category term="c"></category><category term="function"></category><category term="prototype"></category></entry><entry><title>Directly install sty files using yum</title><link href="http://jhshi.me/2012/02/11/directly-install-sty-files-using-yum/index.html" rel="alternate"></link><updated>2012-02-11T22:10:06-05:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2012-02-11:2012/02/11/directly-install-sty-files-using-yum/index.html</id><summary type="html">&lt;p&gt;Use the following command to install sty files, say &lt;code&gt;multirow.sty&lt;/code&gt;, using yum:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;sudo&lt;/span&gt;&lt;span class="x"&gt; yum -y install &amp;#39;tex(multirow.sty)&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="fedora"></category><category term="yum sty"></category></entry><entry><title>Fix for Google Calendar Crash in Chrome/Chromium on Fedora</title><link href="http://jhshi.me/2012/01/31/fix-for-google-calendar-crash-in-chromechromium-on-fedora/index.html" rel="alternate"></link><updated>2012-01-31T22:20:26-05:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2012-01-31:2012/01/31/fix-for-google-calendar-crash-in-chromechromium-on-fedora/index.html</id><summary type="html">&lt;p&gt;This problem is caused by the collision of chrome/chromium sandbox and Fedora's
SELinux, as explained &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=710273#c1"&gt;here&lt;/a&gt;. The same problem occurs when you open
twitter (see &lt;a href="http://jamesmcdonald.id.au/it-tips/chromium-browser-fedora-15-twitter-aw-snap"&gt;this&lt;/a&gt;).&lt;/p&gt;


&lt;p&gt;The solution is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;restorecon -R ~/.config

# install restorecond
su -c &amp;#39;yum install policycoreutils-restorecond&amp;#39;
# enable it
su -c &amp;#39;chkconfig restorecond on&amp;#39;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="chrome"></category><category term="google calendar"></category><category term="fedora"></category></entry><entry><title>Bash Alias with Argument</title><link href="http://jhshi.me/2011/11/24/bash-alias-with-argument/index.html" rel="alternate"></link><updated>2011-11-24T19:47:51-05:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2011-11-24:2011/11/24/bash-alias-with-argument/index.html</id><summary type="html">&lt;p&gt;Alias is a very useful feature of shell (e.g. bash). For example, I have this
line in my &lt;code&gt;.bashrc&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;ll&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ls -alF | more&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;




&lt;p&gt;So I can simply use &lt;code&gt;ll&lt;/code&gt; to view all the files in current directory and view
them in my favorite style.&lt;/p&gt;
&lt;p&gt;It works fine until one day, I want to view the files in a sub directory
instead of current directory, so I tried:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ll subdirectory/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But it failed - still just display the content of current directory. The reason
is, for bash, the above command is interpreted as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ls -alF &lt;span class="p"&gt;|&lt;/span&gt; more subdirectory/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But what I have in mind is actually:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ls -alF subdirectory &lt;span class="p"&gt;|&lt;/span&gt; more
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I Googled and found that alias can just not take arguments, but devise a simple
functions is applicable, so I have the below code instead of the &lt;code&gt;ll&lt;/code&gt; alias:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;unalias &lt;/span&gt;ll
&lt;span class="k"&gt;function&lt;/span&gt; ll&lt;span class="o"&gt;(){&lt;/span&gt;
    ls -alF &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; more&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;We need to first unalias since by default, &lt;code&gt;ll&lt;/code&gt; is aliased as &lt;code&gt;ls -l
--color=auto&lt;/code&gt;. If we don't remove the alias, our function won't be invoked.&lt;/strong&gt;&lt;/p&gt;</summary><category term="bash"></category><category term="alias"></category><category term="argument"></category></entry><entry><title>Center the Caption of Figure or Table</title><link href="http://jhshi.me/2011/11/18/center-the-caption-of-figure-or-table/index.html" rel="alternate"></link><updated>2011-11-18T15:30:03-05:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2011-11-18:2011/11/18/center-the-caption-of-figure-or-table/index.html</id><summary type="html">&lt;p&gt;In latex, the caption of figure or table is aligned left by default. Sometimes,
it's not that beautiful, especially when your article is two column.&lt;/p&gt;


&lt;p&gt;To fix this, use the &lt;code&gt;caption&lt;/code&gt; package with &lt;code&gt;center&lt;/code&gt; as the option.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;\usepackage[center]{caption}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you like, you can also substitute &lt;code&gt;center&lt;/code&gt; with &lt;code&gt;left&lt;/code&gt; or &lt;code&gt;right&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Here is a &lt;a href="http://ctan.math.utah.edu/ctan/tex-archive/macros/latex/contrib/caption/caption-eng.pdf"&gt;detailed manual&lt;/a&gt; of &lt;code&gt;caption&lt;/code&gt; package.&lt;/p&gt;</summary><category term="caption"></category><category term="table"></category><category term="figure"></category></entry><entry><title>Figure Over Two Columns in Latex</title><link href="http://jhshi.me/2011/11/17/figure-over-two-columns-in-latex/index.html" rel="alternate"></link><updated>2011-11-17T21:26:21-05:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2011-11-17:2011/11/17/figure-over-two-columns-in-latex/index.html</id><summary type="html">&lt;p&gt;You may often find a table or figure is too big to fit into one column when
your article has two columns. Use this to insert a figure (same with table) and
it will save you:&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;figure*&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;% figure here&lt;/span&gt;
&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;figure*&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note the star (&lt;code&gt;*&lt;/code&gt;) appended after figure? That's the trick.&lt;/p&gt;</summary><category term="figure"></category></entry><entry><title>Set sty file path of Latex in Linux</title><link href="http://jhshi.me/2011/11/13/set-sty-file-path-of-latex-in-fedora-linux/index.html" rel="alternate"></link><updated>2011-11-13T15:19:33-05:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2011-11-13:2011/11/13/set-sty-file-path-of-latex-in-fedora-linux/index.html</id><summary type="html">&lt;p&gt;From time to time, you may want to compose your own sty files to eliminate
long header in your tex file. But it's boring to put you sty file in the same
directory of your tex file every time since you really want your sty file to be
common, i.e., can be accessed everywhere in your system.&lt;/p&gt;


&lt;p&gt;One way to achieve this is put your sty file in the system latex directory
(e.g. &lt;code&gt;/usr/share/texlive/texmf-dist/tex/latex&lt;/code&gt;), and then use &lt;code&gt;texhash&lt;/code&gt; to
refresh the database.&lt;/p&gt;
&lt;p&gt;But if you would prefer not touch the system directory and want to put the sty
file somewhere that easy to access and backup, that will not be a very good
practice.&lt;/p&gt;
&lt;p&gt;So you can just tell latex where to find its sty files, i.e.,
set the system sty file looking up path. Do this by editing
&lt;code&gt;/usr/share/texlive/texmf/web2c/texmf.cnf&lt;/code&gt;. Find the variable called
&lt;code&gt;TEXINPUTS.tex&lt;/code&gt;, add your own sty path there. Don't forget to separate the
directory using ";" and append "//" to the last directory.&lt;/p&gt;
&lt;p&gt;When you finish, execute &lt;code&gt;texhash&lt;/code&gt; in a terminal. Then you can just feel free
to put your sty files in the directory you just specified, latex will now know
where to find them.&lt;/p&gt;
&lt;p&gt;BTW, the comments in &lt;code&gt;texmf.cnf&lt;/code&gt; are very useful if you want to do any other tricks.&lt;/p&gt;</summary><category term="sty"></category><category term="path"></category></entry><entry><title>pdflatex: error while loading shared libraries: libpoppler.so.13</title><link href="http://jhshi.me/2011/11/10/pdflatex-error-while-loading-shared-libraries-libpoppler-so-13/index.html" rel="alternate"></link><updated>2011-11-10T17:30:33-05:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2011-11-10:2011/11/10/pdflatex-error-while-loading-shared-libraries-libpoppler-so-13/index.html</id><summary type="html">&lt;p&gt;This error occurs when I try to use latex after upgrading to fedora 16. After
Google it, I find the reason may be when upgrading, the pregrade just update
the system components, but not user applications, such as &lt;code&gt;texlive&lt;/code&gt;. And since
current version &lt;code&gt;texlive&lt;/code&gt; counts on some older libraries, issues occur.&lt;/p&gt;


&lt;p&gt;I find that the current &lt;code&gt;libpoppler&lt;/code&gt; in &lt;code&gt;/usr/lib&lt;/code&gt; is &lt;code&gt;libpoppler.so.18&lt;/code&gt;, so I
made a symbolic link to it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo ln -s /usr/lib/libpoppler.so.18 /usr/lib/libpoppler.so.13
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This fixes the problem. Thanks to &lt;a href="https://bugs.launchpad.net/ubuntu/+source/xournal/+bug/778234"&gt;this post&lt;/a&gt;&lt;/p&gt;</summary><category term="libpopller"></category><category term="pdflatex"></category><category term="linux"></category></entry></feed>