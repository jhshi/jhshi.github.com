<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Pearls in Life</title><link href="http://jhshi.me/" rel="alternate"></link><link href="http://jhshi.me/feeds/django.atom.xml" rel="self"></link><id>http://jhshi.me/</id><updated>2014-06-18T14:41:00-04:00</updated><entry><title>Performance Tips about Django ORM</title><link href="http://jhshi.me/2014/06/18/performance-tips-about-django-orm/index.html" rel="alternate"></link><updated>2014-06-18T14:41:00-04:00</updated><author><name>Jinghao Shi</name></author><id>tag:jhshi.me,2014-06-18:2014/06/18/performance-tips-about-django-orm/index.html</id><summary type="html">&lt;p&gt;Django provides an friendly Object Relational Mapping (ORM) framework. In
several of my data analysis projects, I used Django ORM to process millions of
logcat data generated by hundreds of Android phones. Here are some of the
experiences and tips that helps making the processing just a bit faster. &lt;/p&gt;


&lt;h3&gt;&lt;code&gt;DEBUG&lt;/code&gt; Flag&lt;/h3&gt;
&lt;p&gt;First of all, set &lt;code&gt;DEBUG&lt;/code&gt; to &lt;code&gt;False&lt;/code&gt; in &lt;code&gt;settings.py&lt;/code&gt;. With &lt;code&gt;DEBUG&lt;/code&gt; as &lt;code&gt;True&lt;/code&gt;,
Django will keep in memory the DB queries it has run so far, which lead to
memory leak if you have a large batch of importing work.&lt;/p&gt;
&lt;h3&gt;Control Transaction Manually&lt;/h3&gt;
&lt;p&gt;By default, Django will wrap each database operation a separate transaction, and
commit them automatically. Accessing database frequently definitely will slow you
down, especially when all you want to do is just to insert (a large amount of)
data. Django's &lt;a href="https://docs.djangoproject.com/en/dev/topics/db/transactions/"&gt;transaction&lt;/a&gt; module provides several functions to let
you control when to commit the transaction. My favorite one is to use
&lt;code&gt;transaction.commit_on_success&lt;/code&gt; to wrap the function that import data for a
individual device. An addition benefit is, now you know the data importing for
each device either finished completely, or didn't get imported at all. So if
something wrong happens during the importing, or you have to stop it in the
middle for some reason. Next time when you rerun the importing, you won't get
duplicate rows!&lt;/p&gt;
&lt;h3&gt;Bulk Create Rows&lt;/h3&gt;
&lt;p&gt;When you have lots of data that you want to import into the database, instead of
call each objects &lt;code&gt;save&lt;/code&gt; function individually, you can store them in a list and
use the object manager's &lt;code&gt;bulk_create&lt;/code&gt; function. It'll insert the list of
objects into the database "in an efficient manner". Use this technique together
with the &lt;code&gt;transaction.commite_on_success&lt;/code&gt; mentioned above, the data importing
should be fast enough.&lt;/p&gt;
&lt;h3&gt;Iterator&lt;/h3&gt;
&lt;p&gt;Now all the raw data is imported into database, the next thing you want to do
is probably run second pass of processing, filtering, or whatever. When the data
size is large, it's unlikely that you need to use them again and again. Most of
the time, you just want to iterate through each log line, get some statistical
information, or some simple computation. So after you construct your (crazy)
query set, you want to add an &lt;code&gt;.iterator()&lt;/code&gt; function after it, so Django knows
you just want to iterate the data once, and will not bother to cache them.
Otherwise, Django will cache the query results, and soon you will find your
system freezes, and the kernel does nothing but swapping...&lt;/p&gt;
&lt;h3&gt;Reset Queries And Garbage Collection&lt;/h3&gt;
&lt;p&gt;Every now and then you can also reset Django queries manually with the
&lt;code&gt;reset_queries&lt;/code&gt; function, and trigger garbage collection using &lt;code&gt;gc.collect()&lt;/code&gt;.
They'll help you to further reduce memory usage.&lt;/p&gt;
&lt;h3&gt;Resources&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.djangoproject.com/en/dev/topics/db/optimization/"&gt;Database access optimization&lt;/a&gt;&lt;/p&gt;</summary><category term="python"></category><category term="performance"></category></entry></feed>